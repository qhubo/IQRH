<?php


/**
 * Base class that represents a row from the 'usuario' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 02/14/19 20:14:52
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuario extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'UsuarioPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        UsuarioPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the codigo field.
     * @var        string
     */
    protected $codigo;

    /**
     * The value for the usuario field.
     * @var        string
     */
    protected $usuario;

    /**
     * The value for the clave field.
     * @var        string
     */
    protected $clave;

    /**
     * The value for the correo field.
     * @var        string
     */
    protected $correo;

    /**
     * The value for the estado field.
     * @var        string
     */
    protected $estado;

    /**
     * The value for the imagen field.
     * @var        string
     */
    protected $imagen;

    /**
     * The value for the administrador field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $administrador;

    /**
     * The value for the validado field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $validado;

    /**
     * The value for the ultimo_ingreso field.
     * @var        string
     */
    protected $ultimo_ingreso;

    /**
     * The value for the tema field.
     * @var        string
     */
    protected $tema;

    /**
     * The value for the frase field.
     * @var        string
     */
    protected $frase;

    /**
     * The value for the genero field.
     * @var        string
     */
    protected $genero;

    /**
     * The value for the fecha_nacimiento field.
     * @var        string
     */
    protected $fecha_nacimiento;

    /**
     * The value for the nombre_completo field.
     * @var        string
     */
    protected $nombre_completo;

    /**
     * The value for the empresa field.
     * @var        string
     */
    protected $empresa;

    /**
     * The value for the logo field.
     * @var        string
     */
    protected $logo;

    /**
     * The value for the activo field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $activo;

    /**
     * The value for the tipo_usuario field.
     * @var        string
     */
    protected $tipo_usuario;

    /**
     * The value for the observaciones field.
     * @var        string
     */
    protected $observaciones;

    /**
     * The value for the primer_nombre field.
     * @var        string
     */
    protected $primer_nombre;

    /**
     * The value for the segundo_nombre field.
     * @var        string
     */
    protected $segundo_nombre;

    /**
     * The value for the primer_apellido field.
     * @var        string
     */
    protected $primer_apellido;

    /**
     * The value for the segundo_apellido field.
     * @var        string
     */
    protected $segundo_apellido;

    /**
     * The value for the puesto field.
     * @var        string
     */
    protected $puesto;

    /**
     * The value for the departamento field.
     * @var        string
     */
    protected $departamento;

    /**
     * The value for the jefe field.
     * @var        string
     */
    protected $jefe;

    /**
     * The value for the fecha_alta field.
     * @var        string
     */
    protected $fecha_alta;

    /**
     * The value for the sueldo field.
     * @var        double
     */
    protected $sueldo;

    /**
     * The value for the usuario_jefe field.
     * @var        int
     */
    protected $usuario_jefe;

    /**
     * The value for the asistencia field.
     * @var        double
     */
    protected $asistencia;

    /**
     * The value for the puntualida field.
     * @var        double
     */
    protected $puntualida;

    /**
     * The value for the token field.
     * @var        string
     */
    protected $token;

    /**
     * The value for the fecha_reporte field.
     * @var        string
     */
    protected $fecha_reporte;

    /**
     * The value for the horas field.
     * @var        double
     */
    protected $horas;

    /**
     * @var        PropelObjectCollection|UsuarioPerfil[] Collection to store aggregation of UsuarioPerfil objects.
     */
    protected $collUsuarioPerfils;
    protected $collUsuarioPerfilsPartial;

    /**
     * @var        PropelObjectCollection|AlertaAusencia[] Collection to store aggregation of AlertaAusencia objects.
     */
    protected $collAlertaAusencias;
    protected $collAlertaAusenciasPartial;

    /**
     * @var        PropelObjectCollection|SolicitudAusencia[] Collection to store aggregation of SolicitudAusencia objects.
     */
    protected $collSolicitudAusencias;
    protected $collSolicitudAusenciasPartial;

    /**
     * @var        PropelObjectCollection|AusenciaDetalle[] Collection to store aggregation of AusenciaDetalle objects.
     */
    protected $collAusenciaDetalles;
    protected $collAusenciaDetallesPartial;

    /**
     * @var        PropelObjectCollection|SolicitudVacacion[] Collection to store aggregation of SolicitudVacacion objects.
     */
    protected $collSolicitudVacacions;
    protected $collSolicitudVacacionsPartial;

    /**
     * @var        PropelObjectCollection|SolicitudFinquito[] Collection to store aggregation of SolicitudFinquito objects.
     */
    protected $collSolicitudFinquitosRelatedByUsuarioGraba;
    protected $collSolicitudFinquitosRelatedByUsuarioGrabaPartial;

    /**
     * @var        PropelObjectCollection|SolicitudFinquito[] Collection to store aggregation of SolicitudFinquito objects.
     */
    protected $collSolicitudFinquitosRelatedByUsuarioRetiro;
    protected $collSolicitudFinquitosRelatedByUsuarioRetiroPartial;

    /**
     * @var        PropelObjectCollection|VacacionUsuario[] Collection to store aggregation of VacacionUsuario objects.
     */
    protected $collVacacionUsuarios;
    protected $collVacacionUsuariosPartial;

    /**
     * @var        PropelObjectCollection|AumentoUsuario[] Collection to store aggregation of AumentoUsuario objects.
     */
    protected $collAumentoUsuarios;
    protected $collAumentoUsuariosPartial;

    /**
     * @var        PropelObjectCollection|CapacitacionUsuario[] Collection to store aggregation of CapacitacionUsuario objects.
     */
    protected $collCapacitacionUsuarios;
    protected $collCapacitacionUsuariosPartial;

    /**
     * @var        PropelObjectCollection|BitacoraUsuario[] Collection to store aggregation of BitacoraUsuario objects.
     */
    protected $collBitacoraUsuarios;
    protected $collBitacoraUsuariosPartial;

    /**
     * @var        PropelObjectCollection|SolicitudUsuario[] Collection to store aggregation of SolicitudUsuario objects.
     */
    protected $collSolicitudUsuarios;
    protected $collSolicitudUsuariosPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $usuarioPerfilsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $alertaAusenciasScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $solicitudAusenciasScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $ausenciaDetallesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $solicitudVacacionsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $vacacionUsuariosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $aumentoUsuariosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $capacitacionUsuariosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $bitacoraUsuariosScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $solicitudUsuariosScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->administrador = false;
        $this->validado = true;
        $this->activo = true;
    }

    /**
     * Initializes internal state of BaseUsuario object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [codigo] column value.
     *
     * @return string
     */
    public function getCodigo()
    {
        return $this->codigo;
    }

    /**
     * Get the [usuario] column value.
     *
     * @return string
     */
    public function getUsuario()
    {
        return $this->usuario;
    }

    /**
     * Get the [clave] column value.
     *
     * @return string
     */
    public function getClave()
    {
        return $this->clave;
    }

    /**
     * Get the [correo] column value.
     *
     * @return string
     */
    public function getCorreo()
    {
        return $this->correo;
    }

    /**
     * Get the [estado] column value.
     *
     * @return string
     */
    public function getEstado()
    {
        return $this->estado;
    }

    /**
     * Get the [imagen] column value.
     *
     * @return string
     */
    public function getImagen()
    {
        return $this->imagen;
    }

    /**
     * Get the [administrador] column value.
     *
     * @return boolean
     */
    public function getAdministrador()
    {
        return $this->administrador;
    }

    /**
     * Get the [validado] column value.
     *
     * @return boolean
     */
    public function getValidado()
    {
        return $this->validado;
    }

    /**
     * Get the [optionally formatted] temporal [ultimo_ingreso] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUltimoIngreso($format = 'Y-m-d')
    {
        if ($this->ultimo_ingreso === null) {
            return null;
        }

        if ($this->ultimo_ingreso === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->ultimo_ingreso);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ultimo_ingreso, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [tema] column value.
     *
     * @return string
     */
    public function getTema()
    {
        return $this->tema;
    }

    /**
     * Get the [frase] column value.
     *
     * @return string
     */
    public function getFrase()
    {
        return $this->frase;
    }

    /**
     * Get the [genero] column value.
     *
     * @return string
     */
    public function getGenero()
    {
        return $this->genero;
    }

    /**
     * Get the [optionally formatted] temporal [fecha_nacimiento] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getFechaNacimiento($format = 'Y-m-d')
    {
        if ($this->fecha_nacimiento === null) {
            return null;
        }

        if ($this->fecha_nacimiento === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->fecha_nacimiento);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_nacimiento, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [nombre_completo] column value.
     *
     * @return string
     */
    public function getNombreCompleto()
    {
        return $this->nombre_completo;
    }

    /**
     * Get the [empresa] column value.
     *
     * @return string
     */
    public function getEmpresa()
    {
        return $this->empresa;
    }

    /**
     * Get the [logo] column value.
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->logo;
    }

    /**
     * Get the [activo] column value.
     *
     * @return boolean
     */
    public function getActivo()
    {
        return $this->activo;
    }

    /**
     * Get the [tipo_usuario] column value.
     *
     * @return string
     */
    public function getTipoUsuario()
    {
        return $this->tipo_usuario;
    }

    /**
     * Get the [observaciones] column value.
     *
     * @return string
     */
    public function getObservaciones()
    {
        return $this->observaciones;
    }

    /**
     * Get the [primer_nombre] column value.
     *
     * @return string
     */
    public function getPrimerNombre()
    {
        return $this->primer_nombre;
    }

    /**
     * Get the [segundo_nombre] column value.
     *
     * @return string
     */
    public function getSegundoNombre()
    {
        return $this->segundo_nombre;
    }

    /**
     * Get the [primer_apellido] column value.
     *
     * @return string
     */
    public function getPrimerApellido()
    {
        return $this->primer_apellido;
    }

    /**
     * Get the [segundo_apellido] column value.
     *
     * @return string
     */
    public function getSegundoApellido()
    {
        return $this->segundo_apellido;
    }

    /**
     * Get the [puesto] column value.
     *
     * @return string
     */
    public function getPuesto()
    {
        return $this->puesto;
    }

    /**
     * Get the [departamento] column value.
     *
     * @return string
     */
    public function getDepartamento()
    {
        return $this->departamento;
    }

    /**
     * Get the [jefe] column value.
     *
     * @return string
     */
    public function getJefe()
    {
        return $this->jefe;
    }

    /**
     * Get the [optionally formatted] temporal [fecha_alta] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getFechaAlta($format = 'Y-m-d')
    {
        if ($this->fecha_alta === null) {
            return null;
        }

        if ($this->fecha_alta === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->fecha_alta);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_alta, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [sueldo] column value.
     *
     * @return double
     */
    public function getSueldo()
    {
        return $this->sueldo;
    }

    /**
     * Get the [usuario_jefe] column value.
     *
     * @return int
     */
    public function getUsuarioJefe()
    {
        return $this->usuario_jefe;
    }

    /**
     * Get the [asistencia] column value.
     *
     * @return double
     */
    public function getAsistencia()
    {
        return $this->asistencia;
    }

    /**
     * Get the [puntualida] column value.
     *
     * @return double
     */
    public function getPuntualida()
    {
        return $this->puntualida;
    }

    /**
     * Get the [token] column value.
     *
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }

    /**
     * Get the [fecha_reporte] column value.
     *
     * @return string
     */
    public function getFechaReporte()
    {
        return $this->fecha_reporte;
    }

    /**
     * Get the [horas] column value.
     *
     * @return double
     */
    public function getHoras()
    {
        return $this->horas;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = UsuarioPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [codigo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setCodigo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->codigo !== $v) {
            $this->codigo = $v;
            $this->modifiedColumns[] = UsuarioPeer::CODIGO;
        }


        return $this;
    } // setCodigo()

    /**
     * Set the value of [usuario] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setUsuario($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->usuario !== $v) {
            $this->usuario = $v;
            $this->modifiedColumns[] = UsuarioPeer::USUARIO;
        }


        return $this;
    } // setUsuario()

    /**
     * Set the value of [clave] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setClave($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->clave !== $v) {
            $this->clave = $v;
            $this->modifiedColumns[] = UsuarioPeer::CLAVE;
        }


        return $this;
    } // setClave()

    /**
     * Set the value of [correo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setCorreo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->correo !== $v) {
            $this->correo = $v;
            $this->modifiedColumns[] = UsuarioPeer::CORREO;
        }


        return $this;
    } // setCorreo()

    /**
     * Set the value of [estado] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setEstado($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->estado !== $v) {
            $this->estado = $v;
            $this->modifiedColumns[] = UsuarioPeer::ESTADO;
        }


        return $this;
    } // setEstado()

    /**
     * Set the value of [imagen] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setImagen($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->imagen !== $v) {
            $this->imagen = $v;
            $this->modifiedColumns[] = UsuarioPeer::IMAGEN;
        }


        return $this;
    } // setImagen()

    /**
     * Sets the value of the [administrador] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setAdministrador($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->administrador !== $v) {
            $this->administrador = $v;
            $this->modifiedColumns[] = UsuarioPeer::ADMINISTRADOR;
        }


        return $this;
    } // setAdministrador()

    /**
     * Sets the value of the [validado] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setValidado($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->validado !== $v) {
            $this->validado = $v;
            $this->modifiedColumns[] = UsuarioPeer::VALIDADO;
        }


        return $this;
    } // setValidado()

    /**
     * Sets the value of [ultimo_ingreso] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setUltimoIngreso($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->ultimo_ingreso !== null || $dt !== null) {
            $currentDateAsString = ($this->ultimo_ingreso !== null && $tmpDt = new DateTime($this->ultimo_ingreso)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->ultimo_ingreso = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::ULTIMO_INGRESO;
            }
        } // if either are not null


        return $this;
    } // setUltimoIngreso()

    /**
     * Set the value of [tema] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setTema($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->tema !== $v) {
            $this->tema = $v;
            $this->modifiedColumns[] = UsuarioPeer::TEMA;
        }


        return $this;
    } // setTema()

    /**
     * Set the value of [frase] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setFrase($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->frase !== $v) {
            $this->frase = $v;
            $this->modifiedColumns[] = UsuarioPeer::FRASE;
        }


        return $this;
    } // setFrase()

    /**
     * Set the value of [genero] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setGenero($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->genero !== $v) {
            $this->genero = $v;
            $this->modifiedColumns[] = UsuarioPeer::GENERO;
        }


        return $this;
    } // setGenero()

    /**
     * Sets the value of [fecha_nacimiento] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setFechaNacimiento($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->fecha_nacimiento !== null || $dt !== null) {
            $currentDateAsString = ($this->fecha_nacimiento !== null && $tmpDt = new DateTime($this->fecha_nacimiento)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->fecha_nacimiento = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::FECHA_NACIMIENTO;
            }
        } // if either are not null


        return $this;
    } // setFechaNacimiento()

    /**
     * Set the value of [nombre_completo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setNombreCompleto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->nombre_completo !== $v) {
            $this->nombre_completo = $v;
            $this->modifiedColumns[] = UsuarioPeer::NOMBRE_COMPLETO;
        }


        return $this;
    } // setNombreCompleto()

    /**
     * Set the value of [empresa] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setEmpresa($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->empresa !== $v) {
            $this->empresa = $v;
            $this->modifiedColumns[] = UsuarioPeer::EMPRESA;
        }


        return $this;
    } // setEmpresa()

    /**
     * Set the value of [logo] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setLogo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->logo !== $v) {
            $this->logo = $v;
            $this->modifiedColumns[] = UsuarioPeer::LOGO;
        }


        return $this;
    } // setLogo()

    /**
     * Sets the value of the [activo] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setActivo($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->activo !== $v) {
            $this->activo = $v;
            $this->modifiedColumns[] = UsuarioPeer::ACTIVO;
        }


        return $this;
    } // setActivo()

    /**
     * Set the value of [tipo_usuario] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setTipoUsuario($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->tipo_usuario !== $v) {
            $this->tipo_usuario = $v;
            $this->modifiedColumns[] = UsuarioPeer::TIPO_USUARIO;
        }


        return $this;
    } // setTipoUsuario()

    /**
     * Set the value of [observaciones] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setObservaciones($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->observaciones !== $v) {
            $this->observaciones = $v;
            $this->modifiedColumns[] = UsuarioPeer::OBSERVACIONES;
        }


        return $this;
    } // setObservaciones()

    /**
     * Set the value of [primer_nombre] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setPrimerNombre($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->primer_nombre !== $v) {
            $this->primer_nombre = $v;
            $this->modifiedColumns[] = UsuarioPeer::PRIMER_NOMBRE;
        }


        return $this;
    } // setPrimerNombre()

    /**
     * Set the value of [segundo_nombre] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setSegundoNombre($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->segundo_nombre !== $v) {
            $this->segundo_nombre = $v;
            $this->modifiedColumns[] = UsuarioPeer::SEGUNDO_NOMBRE;
        }


        return $this;
    } // setSegundoNombre()

    /**
     * Set the value of [primer_apellido] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setPrimerApellido($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->primer_apellido !== $v) {
            $this->primer_apellido = $v;
            $this->modifiedColumns[] = UsuarioPeer::PRIMER_APELLIDO;
        }


        return $this;
    } // setPrimerApellido()

    /**
     * Set the value of [segundo_apellido] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setSegundoApellido($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->segundo_apellido !== $v) {
            $this->segundo_apellido = $v;
            $this->modifiedColumns[] = UsuarioPeer::SEGUNDO_APELLIDO;
        }


        return $this;
    } // setSegundoApellido()

    /**
     * Set the value of [puesto] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setPuesto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->puesto !== $v) {
            $this->puesto = $v;
            $this->modifiedColumns[] = UsuarioPeer::PUESTO;
        }


        return $this;
    } // setPuesto()

    /**
     * Set the value of [departamento] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setDepartamento($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->departamento !== $v) {
            $this->departamento = $v;
            $this->modifiedColumns[] = UsuarioPeer::DEPARTAMENTO;
        }


        return $this;
    } // setDepartamento()

    /**
     * Set the value of [jefe] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setJefe($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->jefe !== $v) {
            $this->jefe = $v;
            $this->modifiedColumns[] = UsuarioPeer::JEFE;
        }


        return $this;
    } // setJefe()

    /**
     * Sets the value of [fecha_alta] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Usuario The current object (for fluent API support)
     */
    public function setFechaAlta($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->fecha_alta !== null || $dt !== null) {
            $currentDateAsString = ($this->fecha_alta !== null && $tmpDt = new DateTime($this->fecha_alta)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->fecha_alta = $newDateAsString;
                $this->modifiedColumns[] = UsuarioPeer::FECHA_ALTA;
            }
        } // if either are not null


        return $this;
    } // setFechaAlta()

    /**
     * Set the value of [sueldo] column.
     *
     * @param double $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setSueldo($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->sueldo !== $v) {
            $this->sueldo = $v;
            $this->modifiedColumns[] = UsuarioPeer::SUELDO;
        }


        return $this;
    } // setSueldo()

    /**
     * Set the value of [usuario_jefe] column.
     *
     * @param int $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setUsuarioJefe($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->usuario_jefe !== $v) {
            $this->usuario_jefe = $v;
            $this->modifiedColumns[] = UsuarioPeer::USUARIO_JEFE;
        }


        return $this;
    } // setUsuarioJefe()

    /**
     * Set the value of [asistencia] column.
     *
     * @param double $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setAsistencia($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->asistencia !== $v) {
            $this->asistencia = $v;
            $this->modifiedColumns[] = UsuarioPeer::ASISTENCIA;
        }


        return $this;
    } // setAsistencia()

    /**
     * Set the value of [puntualida] column.
     *
     * @param double $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setPuntualida($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->puntualida !== $v) {
            $this->puntualida = $v;
            $this->modifiedColumns[] = UsuarioPeer::PUNTUALIDA;
        }


        return $this;
    } // setPuntualida()

    /**
     * Set the value of [token] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setToken($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->token !== $v) {
            $this->token = $v;
            $this->modifiedColumns[] = UsuarioPeer::TOKEN;
        }


        return $this;
    } // setToken()

    /**
     * Set the value of [fecha_reporte] column.
     *
     * @param string $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setFechaReporte($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->fecha_reporte !== $v) {
            $this->fecha_reporte = $v;
            $this->modifiedColumns[] = UsuarioPeer::FECHA_REPORTE;
        }


        return $this;
    } // setFechaReporte()

    /**
     * Set the value of [horas] column.
     *
     * @param double $v new value
     * @return Usuario The current object (for fluent API support)
     */
    public function setHoras($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->horas !== $v) {
            $this->horas = $v;
            $this->modifiedColumns[] = UsuarioPeer::HORAS;
        }


        return $this;
    } // setHoras()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->administrador !== false) {
                return false;
            }

            if ($this->validado !== true) {
                return false;
            }

            if ($this->activo !== true) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->codigo = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->usuario = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->clave = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->correo = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->estado = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->imagen = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->administrador = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
            $this->validado = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
            $this->ultimo_ingreso = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->tema = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->frase = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->genero = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->fecha_nacimiento = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->nombre_completo = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->empresa = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->logo = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->activo = ($row[$startcol + 17] !== null) ? (boolean) $row[$startcol + 17] : null;
            $this->tipo_usuario = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
            $this->observaciones = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
            $this->primer_nombre = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
            $this->segundo_nombre = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
            $this->primer_apellido = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
            $this->segundo_apellido = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
            $this->puesto = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
            $this->departamento = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
            $this->jefe = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
            $this->fecha_alta = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
            $this->sueldo = ($row[$startcol + 28] !== null) ? (double) $row[$startcol + 28] : null;
            $this->usuario_jefe = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
            $this->asistencia = ($row[$startcol + 30] !== null) ? (double) $row[$startcol + 30] : null;
            $this->puntualida = ($row[$startcol + 31] !== null) ? (double) $row[$startcol + 31] : null;
            $this->token = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
            $this->fecha_reporte = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
            $this->horas = ($row[$startcol + 34] !== null) ? (double) $row[$startcol + 34] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 35; // 35 = UsuarioPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Usuario object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = UsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->collUsuarioPerfils = null;

            $this->collAlertaAusencias = null;

            $this->collSolicitudAusencias = null;

            $this->collAusenciaDetalles = null;

            $this->collSolicitudVacacions = null;

            $this->collSolicitudFinquitosRelatedByUsuarioGraba = null;

            $this->collSolicitudFinquitosRelatedByUsuarioRetiro = null;

            $this->collVacacionUsuarios = null;

            $this->collAumentoUsuarios = null;

            $this->collCapacitacionUsuarios = null;

            $this->collBitacoraUsuarios = null;

            $this->collSolicitudUsuarios = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = UsuarioQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUsuario:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUsuario:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUsuario:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUsuario:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                UsuarioPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->usuarioPerfilsScheduledForDeletion !== null) {
                if (!$this->usuarioPerfilsScheduledForDeletion->isEmpty()) {
                    foreach ($this->usuarioPerfilsScheduledForDeletion as $usuarioPerfil) {
                        // need to save related object because we set the relation to null
                        $usuarioPerfil->save($con);
                    }
                    $this->usuarioPerfilsScheduledForDeletion = null;
                }
            }

            if ($this->collUsuarioPerfils !== null) {
                foreach ($this->collUsuarioPerfils as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->alertaAusenciasScheduledForDeletion !== null) {
                if (!$this->alertaAusenciasScheduledForDeletion->isEmpty()) {
                    foreach ($this->alertaAusenciasScheduledForDeletion as $alertaAusencia) {
                        // need to save related object because we set the relation to null
                        $alertaAusencia->save($con);
                    }
                    $this->alertaAusenciasScheduledForDeletion = null;
                }
            }

            if ($this->collAlertaAusencias !== null) {
                foreach ($this->collAlertaAusencias as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->solicitudAusenciasScheduledForDeletion !== null) {
                if (!$this->solicitudAusenciasScheduledForDeletion->isEmpty()) {
                    foreach ($this->solicitudAusenciasScheduledForDeletion as $solicitudAusencia) {
                        // need to save related object because we set the relation to null
                        $solicitudAusencia->save($con);
                    }
                    $this->solicitudAusenciasScheduledForDeletion = null;
                }
            }

            if ($this->collSolicitudAusencias !== null) {
                foreach ($this->collSolicitudAusencias as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->ausenciaDetallesScheduledForDeletion !== null) {
                if (!$this->ausenciaDetallesScheduledForDeletion->isEmpty()) {
                    foreach ($this->ausenciaDetallesScheduledForDeletion as $ausenciaDetalle) {
                        // need to save related object because we set the relation to null
                        $ausenciaDetalle->save($con);
                    }
                    $this->ausenciaDetallesScheduledForDeletion = null;
                }
            }

            if ($this->collAusenciaDetalles !== null) {
                foreach ($this->collAusenciaDetalles as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->solicitudVacacionsScheduledForDeletion !== null) {
                if (!$this->solicitudVacacionsScheduledForDeletion->isEmpty()) {
                    foreach ($this->solicitudVacacionsScheduledForDeletion as $solicitudVacacion) {
                        // need to save related object because we set the relation to null
                        $solicitudVacacion->save($con);
                    }
                    $this->solicitudVacacionsScheduledForDeletion = null;
                }
            }

            if ($this->collSolicitudVacacions !== null) {
                foreach ($this->collSolicitudVacacions as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion !== null) {
                if (!$this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion->isEmpty()) {
                    foreach ($this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion as $solicitudFinquitoRelatedByUsuarioGraba) {
                        // need to save related object because we set the relation to null
                        $solicitudFinquitoRelatedByUsuarioGraba->save($con);
                    }
                    $this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion = null;
                }
            }

            if ($this->collSolicitudFinquitosRelatedByUsuarioGraba !== null) {
                foreach ($this->collSolicitudFinquitosRelatedByUsuarioGraba as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion !== null) {
                if (!$this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion->isEmpty()) {
                    foreach ($this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion as $solicitudFinquitoRelatedByUsuarioRetiro) {
                        // need to save related object because we set the relation to null
                        $solicitudFinquitoRelatedByUsuarioRetiro->save($con);
                    }
                    $this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion = null;
                }
            }

            if ($this->collSolicitudFinquitosRelatedByUsuarioRetiro !== null) {
                foreach ($this->collSolicitudFinquitosRelatedByUsuarioRetiro as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->vacacionUsuariosScheduledForDeletion !== null) {
                if (!$this->vacacionUsuariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->vacacionUsuariosScheduledForDeletion as $vacacionUsuario) {
                        // need to save related object because we set the relation to null
                        $vacacionUsuario->save($con);
                    }
                    $this->vacacionUsuariosScheduledForDeletion = null;
                }
            }

            if ($this->collVacacionUsuarios !== null) {
                foreach ($this->collVacacionUsuarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->aumentoUsuariosScheduledForDeletion !== null) {
                if (!$this->aumentoUsuariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->aumentoUsuariosScheduledForDeletion as $aumentoUsuario) {
                        // need to save related object because we set the relation to null
                        $aumentoUsuario->save($con);
                    }
                    $this->aumentoUsuariosScheduledForDeletion = null;
                }
            }

            if ($this->collAumentoUsuarios !== null) {
                foreach ($this->collAumentoUsuarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->capacitacionUsuariosScheduledForDeletion !== null) {
                if (!$this->capacitacionUsuariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->capacitacionUsuariosScheduledForDeletion as $capacitacionUsuario) {
                        // need to save related object because we set the relation to null
                        $capacitacionUsuario->save($con);
                    }
                    $this->capacitacionUsuariosScheduledForDeletion = null;
                }
            }

            if ($this->collCapacitacionUsuarios !== null) {
                foreach ($this->collCapacitacionUsuarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->bitacoraUsuariosScheduledForDeletion !== null) {
                if (!$this->bitacoraUsuariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->bitacoraUsuariosScheduledForDeletion as $bitacoraUsuario) {
                        // need to save related object because we set the relation to null
                        $bitacoraUsuario->save($con);
                    }
                    $this->bitacoraUsuariosScheduledForDeletion = null;
                }
            }

            if ($this->collBitacoraUsuarios !== null) {
                foreach ($this->collBitacoraUsuarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->solicitudUsuariosScheduledForDeletion !== null) {
                if (!$this->solicitudUsuariosScheduledForDeletion->isEmpty()) {
                    foreach ($this->solicitudUsuariosScheduledForDeletion as $solicitudUsuario) {
                        // need to save related object because we set the relation to null
                        $solicitudUsuario->save($con);
                    }
                    $this->solicitudUsuariosScheduledForDeletion = null;
                }
            }

            if ($this->collSolicitudUsuarios !== null) {
                foreach ($this->collSolicitudUsuarios as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = UsuarioPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . UsuarioPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(UsuarioPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(UsuarioPeer::CODIGO)) {
            $modifiedColumns[':p' . $index++]  = '`CODIGO`';
        }
        if ($this->isColumnModified(UsuarioPeer::USUARIO)) {
            $modifiedColumns[':p' . $index++]  = '`USUARIO`';
        }
        if ($this->isColumnModified(UsuarioPeer::CLAVE)) {
            $modifiedColumns[':p' . $index++]  = '`CLAVE`';
        }
        if ($this->isColumnModified(UsuarioPeer::CORREO)) {
            $modifiedColumns[':p' . $index++]  = '`CORREO`';
        }
        if ($this->isColumnModified(UsuarioPeer::ESTADO)) {
            $modifiedColumns[':p' . $index++]  = '`ESTADO`';
        }
        if ($this->isColumnModified(UsuarioPeer::IMAGEN)) {
            $modifiedColumns[':p' . $index++]  = '`IMAGEN`';
        }
        if ($this->isColumnModified(UsuarioPeer::ADMINISTRADOR)) {
            $modifiedColumns[':p' . $index++]  = '`ADMINISTRADOR`';
        }
        if ($this->isColumnModified(UsuarioPeer::VALIDADO)) {
            $modifiedColumns[':p' . $index++]  = '`VALIDADO`';
        }
        if ($this->isColumnModified(UsuarioPeer::ULTIMO_INGRESO)) {
            $modifiedColumns[':p' . $index++]  = '`ULTIMO_INGRESO`';
        }
        if ($this->isColumnModified(UsuarioPeer::TEMA)) {
            $modifiedColumns[':p' . $index++]  = '`TEMA`';
        }
        if ($this->isColumnModified(UsuarioPeer::FRASE)) {
            $modifiedColumns[':p' . $index++]  = '`FRASE`';
        }
        if ($this->isColumnModified(UsuarioPeer::GENERO)) {
            $modifiedColumns[':p' . $index++]  = '`GENERO`';
        }
        if ($this->isColumnModified(UsuarioPeer::FECHA_NACIMIENTO)) {
            $modifiedColumns[':p' . $index++]  = '`FECHA_NACIMIENTO`';
        }
        if ($this->isColumnModified(UsuarioPeer::NOMBRE_COMPLETO)) {
            $modifiedColumns[':p' . $index++]  = '`NOMBRE_COMPLETO`';
        }
        if ($this->isColumnModified(UsuarioPeer::EMPRESA)) {
            $modifiedColumns[':p' . $index++]  = '`EMPRESA`';
        }
        if ($this->isColumnModified(UsuarioPeer::LOGO)) {
            $modifiedColumns[':p' . $index++]  = '`LOGO`';
        }
        if ($this->isColumnModified(UsuarioPeer::ACTIVO)) {
            $modifiedColumns[':p' . $index++]  = '`ACTIVO`';
        }
        if ($this->isColumnModified(UsuarioPeer::TIPO_USUARIO)) {
            $modifiedColumns[':p' . $index++]  = '`TIPO_USUARIO`';
        }
        if ($this->isColumnModified(UsuarioPeer::OBSERVACIONES)) {
            $modifiedColumns[':p' . $index++]  = '`OBSERVACIONES`';
        }
        if ($this->isColumnModified(UsuarioPeer::PRIMER_NOMBRE)) {
            $modifiedColumns[':p' . $index++]  = '`PRIMER_NOMBRE`';
        }
        if ($this->isColumnModified(UsuarioPeer::SEGUNDO_NOMBRE)) {
            $modifiedColumns[':p' . $index++]  = '`SEGUNDO_NOMBRE`';
        }
        if ($this->isColumnModified(UsuarioPeer::PRIMER_APELLIDO)) {
            $modifiedColumns[':p' . $index++]  = '`PRIMER_APELLIDO`';
        }
        if ($this->isColumnModified(UsuarioPeer::SEGUNDO_APELLIDO)) {
            $modifiedColumns[':p' . $index++]  = '`SEGUNDO_APELLIDO`';
        }
        if ($this->isColumnModified(UsuarioPeer::PUESTO)) {
            $modifiedColumns[':p' . $index++]  = '`PUESTO`';
        }
        if ($this->isColumnModified(UsuarioPeer::DEPARTAMENTO)) {
            $modifiedColumns[':p' . $index++]  = '`DEPARTAMENTO`';
        }
        if ($this->isColumnModified(UsuarioPeer::JEFE)) {
            $modifiedColumns[':p' . $index++]  = '`JEFE`';
        }
        if ($this->isColumnModified(UsuarioPeer::FECHA_ALTA)) {
            $modifiedColumns[':p' . $index++]  = '`FECHA_ALTA`';
        }
        if ($this->isColumnModified(UsuarioPeer::SUELDO)) {
            $modifiedColumns[':p' . $index++]  = '`SUELDO`';
        }
        if ($this->isColumnModified(UsuarioPeer::USUARIO_JEFE)) {
            $modifiedColumns[':p' . $index++]  = '`USUARIO_JEFE`';
        }
        if ($this->isColumnModified(UsuarioPeer::ASISTENCIA)) {
            $modifiedColumns[':p' . $index++]  = '`ASISTENCIA`';
        }
        if ($this->isColumnModified(UsuarioPeer::PUNTUALIDA)) {
            $modifiedColumns[':p' . $index++]  = '`PUNTUALIDA`';
        }
        if ($this->isColumnModified(UsuarioPeer::TOKEN)) {
            $modifiedColumns[':p' . $index++]  = '`TOKEN`';
        }
        if ($this->isColumnModified(UsuarioPeer::FECHA_REPORTE)) {
            $modifiedColumns[':p' . $index++]  = '`FECHA_REPORTE`';
        }
        if ($this->isColumnModified(UsuarioPeer::HORAS)) {
            $modifiedColumns[':p' . $index++]  = '`HORAS`';
        }

        $sql = sprintf(
            'INSERT INTO `usuario` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`CODIGO`':
                        $stmt->bindValue($identifier, $this->codigo, PDO::PARAM_STR);
                        break;
                    case '`USUARIO`':
                        $stmt->bindValue($identifier, $this->usuario, PDO::PARAM_STR);
                        break;
                    case '`CLAVE`':
                        $stmt->bindValue($identifier, $this->clave, PDO::PARAM_STR);
                        break;
                    case '`CORREO`':
                        $stmt->bindValue($identifier, $this->correo, PDO::PARAM_STR);
                        break;
                    case '`ESTADO`':
                        $stmt->bindValue($identifier, $this->estado, PDO::PARAM_STR);
                        break;
                    case '`IMAGEN`':
                        $stmt->bindValue($identifier, $this->imagen, PDO::PARAM_STR);
                        break;
                    case '`ADMINISTRADOR`':
                        $stmt->bindValue($identifier, (int) $this->administrador, PDO::PARAM_INT);
                        break;
                    case '`VALIDADO`':
                        $stmt->bindValue($identifier, (int) $this->validado, PDO::PARAM_INT);
                        break;
                    case '`ULTIMO_INGRESO`':
                        $stmt->bindValue($identifier, $this->ultimo_ingreso, PDO::PARAM_STR);
                        break;
                    case '`TEMA`':
                        $stmt->bindValue($identifier, $this->tema, PDO::PARAM_STR);
                        break;
                    case '`FRASE`':
                        $stmt->bindValue($identifier, $this->frase, PDO::PARAM_STR);
                        break;
                    case '`GENERO`':
                        $stmt->bindValue($identifier, $this->genero, PDO::PARAM_STR);
                        break;
                    case '`FECHA_NACIMIENTO`':
                        $stmt->bindValue($identifier, $this->fecha_nacimiento, PDO::PARAM_STR);
                        break;
                    case '`NOMBRE_COMPLETO`':
                        $stmt->bindValue($identifier, $this->nombre_completo, PDO::PARAM_STR);
                        break;
                    case '`EMPRESA`':
                        $stmt->bindValue($identifier, $this->empresa, PDO::PARAM_STR);
                        break;
                    case '`LOGO`':
                        $stmt->bindValue($identifier, $this->logo, PDO::PARAM_STR);
                        break;
                    case '`ACTIVO`':
                        $stmt->bindValue($identifier, (int) $this->activo, PDO::PARAM_INT);
                        break;
                    case '`TIPO_USUARIO`':
                        $stmt->bindValue($identifier, $this->tipo_usuario, PDO::PARAM_STR);
                        break;
                    case '`OBSERVACIONES`':
                        $stmt->bindValue($identifier, $this->observaciones, PDO::PARAM_STR);
                        break;
                    case '`PRIMER_NOMBRE`':
                        $stmt->bindValue($identifier, $this->primer_nombre, PDO::PARAM_STR);
                        break;
                    case '`SEGUNDO_NOMBRE`':
                        $stmt->bindValue($identifier, $this->segundo_nombre, PDO::PARAM_STR);
                        break;
                    case '`PRIMER_APELLIDO`':
                        $stmt->bindValue($identifier, $this->primer_apellido, PDO::PARAM_STR);
                        break;
                    case '`SEGUNDO_APELLIDO`':
                        $stmt->bindValue($identifier, $this->segundo_apellido, PDO::PARAM_STR);
                        break;
                    case '`PUESTO`':
                        $stmt->bindValue($identifier, $this->puesto, PDO::PARAM_STR);
                        break;
                    case '`DEPARTAMENTO`':
                        $stmt->bindValue($identifier, $this->departamento, PDO::PARAM_STR);
                        break;
                    case '`JEFE`':
                        $stmt->bindValue($identifier, $this->jefe, PDO::PARAM_STR);
                        break;
                    case '`FECHA_ALTA`':
                        $stmt->bindValue($identifier, $this->fecha_alta, PDO::PARAM_STR);
                        break;
                    case '`SUELDO`':
                        $stmt->bindValue($identifier, $this->sueldo, PDO::PARAM_STR);
                        break;
                    case '`USUARIO_JEFE`':
                        $stmt->bindValue($identifier, $this->usuario_jefe, PDO::PARAM_INT);
                        break;
                    case '`ASISTENCIA`':
                        $stmt->bindValue($identifier, $this->asistencia, PDO::PARAM_STR);
                        break;
                    case '`PUNTUALIDA`':
                        $stmt->bindValue($identifier, $this->puntualida, PDO::PARAM_STR);
                        break;
                    case '`TOKEN`':
                        $stmt->bindValue($identifier, $this->token, PDO::PARAM_STR);
                        break;
                    case '`FECHA_REPORTE`':
                        $stmt->bindValue($identifier, $this->fecha_reporte, PDO::PARAM_STR);
                        break;
                    case '`HORAS`':
                        $stmt->bindValue($identifier, $this->horas, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = UsuarioPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collUsuarioPerfils !== null) {
                    foreach ($this->collUsuarioPerfils as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collAlertaAusencias !== null) {
                    foreach ($this->collAlertaAusencias as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collSolicitudAusencias !== null) {
                    foreach ($this->collSolicitudAusencias as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collAusenciaDetalles !== null) {
                    foreach ($this->collAusenciaDetalles as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collSolicitudVacacions !== null) {
                    foreach ($this->collSolicitudVacacions as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collSolicitudFinquitosRelatedByUsuarioGraba !== null) {
                    foreach ($this->collSolicitudFinquitosRelatedByUsuarioGraba as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collSolicitudFinquitosRelatedByUsuarioRetiro !== null) {
                    foreach ($this->collSolicitudFinquitosRelatedByUsuarioRetiro as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collVacacionUsuarios !== null) {
                    foreach ($this->collVacacionUsuarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collAumentoUsuarios !== null) {
                    foreach ($this->collAumentoUsuarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCapacitacionUsuarios !== null) {
                    foreach ($this->collCapacitacionUsuarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collBitacoraUsuarios !== null) {
                    foreach ($this->collBitacoraUsuarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collSolicitudUsuarios !== null) {
                    foreach ($this->collSolicitudUsuarios as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getCodigo();
                break;
            case 2:
                return $this->getUsuario();
                break;
            case 3:
                return $this->getClave();
                break;
            case 4:
                return $this->getCorreo();
                break;
            case 5:
                return $this->getEstado();
                break;
            case 6:
                return $this->getImagen();
                break;
            case 7:
                return $this->getAdministrador();
                break;
            case 8:
                return $this->getValidado();
                break;
            case 9:
                return $this->getUltimoIngreso();
                break;
            case 10:
                return $this->getTema();
                break;
            case 11:
                return $this->getFrase();
                break;
            case 12:
                return $this->getGenero();
                break;
            case 13:
                return $this->getFechaNacimiento();
                break;
            case 14:
                return $this->getNombreCompleto();
                break;
            case 15:
                return $this->getEmpresa();
                break;
            case 16:
                return $this->getLogo();
                break;
            case 17:
                return $this->getActivo();
                break;
            case 18:
                return $this->getTipoUsuario();
                break;
            case 19:
                return $this->getObservaciones();
                break;
            case 20:
                return $this->getPrimerNombre();
                break;
            case 21:
                return $this->getSegundoNombre();
                break;
            case 22:
                return $this->getPrimerApellido();
                break;
            case 23:
                return $this->getSegundoApellido();
                break;
            case 24:
                return $this->getPuesto();
                break;
            case 25:
                return $this->getDepartamento();
                break;
            case 26:
                return $this->getJefe();
                break;
            case 27:
                return $this->getFechaAlta();
                break;
            case 28:
                return $this->getSueldo();
                break;
            case 29:
                return $this->getUsuarioJefe();
                break;
            case 30:
                return $this->getAsistencia();
                break;
            case 31:
                return $this->getPuntualida();
                break;
            case 32:
                return $this->getToken();
                break;
            case 33:
                return $this->getFechaReporte();
                break;
            case 34:
                return $this->getHoras();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()] = true;
        $keys = UsuarioPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getCodigo(),
            $keys[2] => $this->getUsuario(),
            $keys[3] => $this->getClave(),
            $keys[4] => $this->getCorreo(),
            $keys[5] => $this->getEstado(),
            $keys[6] => $this->getImagen(),
            $keys[7] => $this->getAdministrador(),
            $keys[8] => $this->getValidado(),
            $keys[9] => $this->getUltimoIngreso(),
            $keys[10] => $this->getTema(),
            $keys[11] => $this->getFrase(),
            $keys[12] => $this->getGenero(),
            $keys[13] => $this->getFechaNacimiento(),
            $keys[14] => $this->getNombreCompleto(),
            $keys[15] => $this->getEmpresa(),
            $keys[16] => $this->getLogo(),
            $keys[17] => $this->getActivo(),
            $keys[18] => $this->getTipoUsuario(),
            $keys[19] => $this->getObservaciones(),
            $keys[20] => $this->getPrimerNombre(),
            $keys[21] => $this->getSegundoNombre(),
            $keys[22] => $this->getPrimerApellido(),
            $keys[23] => $this->getSegundoApellido(),
            $keys[24] => $this->getPuesto(),
            $keys[25] => $this->getDepartamento(),
            $keys[26] => $this->getJefe(),
            $keys[27] => $this->getFechaAlta(),
            $keys[28] => $this->getSueldo(),
            $keys[29] => $this->getUsuarioJefe(),
            $keys[30] => $this->getAsistencia(),
            $keys[31] => $this->getPuntualida(),
            $keys[32] => $this->getToken(),
            $keys[33] => $this->getFechaReporte(),
            $keys[34] => $this->getHoras(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->collUsuarioPerfils) {
                $result['UsuarioPerfils'] = $this->collUsuarioPerfils->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collAlertaAusencias) {
                $result['AlertaAusencias'] = $this->collAlertaAusencias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collSolicitudAusencias) {
                $result['SolicitudAusencias'] = $this->collSolicitudAusencias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collAusenciaDetalles) {
                $result['AusenciaDetalles'] = $this->collAusenciaDetalles->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collSolicitudVacacions) {
                $result['SolicitudVacacions'] = $this->collSolicitudVacacions->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collSolicitudFinquitosRelatedByUsuarioGraba) {
                $result['SolicitudFinquitosRelatedByUsuarioGraba'] = $this->collSolicitudFinquitosRelatedByUsuarioGraba->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collSolicitudFinquitosRelatedByUsuarioRetiro) {
                $result['SolicitudFinquitosRelatedByUsuarioRetiro'] = $this->collSolicitudFinquitosRelatedByUsuarioRetiro->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collVacacionUsuarios) {
                $result['VacacionUsuarios'] = $this->collVacacionUsuarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collAumentoUsuarios) {
                $result['AumentoUsuarios'] = $this->collAumentoUsuarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCapacitacionUsuarios) {
                $result['CapacitacionUsuarios'] = $this->collCapacitacionUsuarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collBitacoraUsuarios) {
                $result['BitacoraUsuarios'] = $this->collBitacoraUsuarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collSolicitudUsuarios) {
                $result['SolicitudUsuarios'] = $this->collSolicitudUsuarios->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setCodigo($value);
                break;
            case 2:
                $this->setUsuario($value);
                break;
            case 3:
                $this->setClave($value);
                break;
            case 4:
                $this->setCorreo($value);
                break;
            case 5:
                $this->setEstado($value);
                break;
            case 6:
                $this->setImagen($value);
                break;
            case 7:
                $this->setAdministrador($value);
                break;
            case 8:
                $this->setValidado($value);
                break;
            case 9:
                $this->setUltimoIngreso($value);
                break;
            case 10:
                $this->setTema($value);
                break;
            case 11:
                $this->setFrase($value);
                break;
            case 12:
                $this->setGenero($value);
                break;
            case 13:
                $this->setFechaNacimiento($value);
                break;
            case 14:
                $this->setNombreCompleto($value);
                break;
            case 15:
                $this->setEmpresa($value);
                break;
            case 16:
                $this->setLogo($value);
                break;
            case 17:
                $this->setActivo($value);
                break;
            case 18:
                $this->setTipoUsuario($value);
                break;
            case 19:
                $this->setObservaciones($value);
                break;
            case 20:
                $this->setPrimerNombre($value);
                break;
            case 21:
                $this->setSegundoNombre($value);
                break;
            case 22:
                $this->setPrimerApellido($value);
                break;
            case 23:
                $this->setSegundoApellido($value);
                break;
            case 24:
                $this->setPuesto($value);
                break;
            case 25:
                $this->setDepartamento($value);
                break;
            case 26:
                $this->setJefe($value);
                break;
            case 27:
                $this->setFechaAlta($value);
                break;
            case 28:
                $this->setSueldo($value);
                break;
            case 29:
                $this->setUsuarioJefe($value);
                break;
            case 30:
                $this->setAsistencia($value);
                break;
            case 31:
                $this->setPuntualida($value);
                break;
            case 32:
                $this->setToken($value);
                break;
            case 33:
                $this->setFechaReporte($value);
                break;
            case 34:
                $this->setHoras($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = UsuarioPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setCodigo($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setUsuario($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setClave($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setCorreo($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setEstado($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setImagen($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setAdministrador($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setValidado($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setUltimoIngreso($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setTema($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setFrase($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setGenero($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setFechaNacimiento($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setNombreCompleto($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setEmpresa($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setLogo($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setActivo($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setTipoUsuario($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setObservaciones($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setPrimerNombre($arr[$keys[20]]);
        if (array_key_exists($keys[21], $arr)) $this->setSegundoNombre($arr[$keys[21]]);
        if (array_key_exists($keys[22], $arr)) $this->setPrimerApellido($arr[$keys[22]]);
        if (array_key_exists($keys[23], $arr)) $this->setSegundoApellido($arr[$keys[23]]);
        if (array_key_exists($keys[24], $arr)) $this->setPuesto($arr[$keys[24]]);
        if (array_key_exists($keys[25], $arr)) $this->setDepartamento($arr[$keys[25]]);
        if (array_key_exists($keys[26], $arr)) $this->setJefe($arr[$keys[26]]);
        if (array_key_exists($keys[27], $arr)) $this->setFechaAlta($arr[$keys[27]]);
        if (array_key_exists($keys[28], $arr)) $this->setSueldo($arr[$keys[28]]);
        if (array_key_exists($keys[29], $arr)) $this->setUsuarioJefe($arr[$keys[29]]);
        if (array_key_exists($keys[30], $arr)) $this->setAsistencia($arr[$keys[30]]);
        if (array_key_exists($keys[31], $arr)) $this->setPuntualida($arr[$keys[31]]);
        if (array_key_exists($keys[32], $arr)) $this->setToken($arr[$keys[32]]);
        if (array_key_exists($keys[33], $arr)) $this->setFechaReporte($arr[$keys[33]]);
        if (array_key_exists($keys[34], $arr)) $this->setHoras($arr[$keys[34]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

        if ($this->isColumnModified(UsuarioPeer::ID)) $criteria->add(UsuarioPeer::ID, $this->id);
        if ($this->isColumnModified(UsuarioPeer::CODIGO)) $criteria->add(UsuarioPeer::CODIGO, $this->codigo);
        if ($this->isColumnModified(UsuarioPeer::USUARIO)) $criteria->add(UsuarioPeer::USUARIO, $this->usuario);
        if ($this->isColumnModified(UsuarioPeer::CLAVE)) $criteria->add(UsuarioPeer::CLAVE, $this->clave);
        if ($this->isColumnModified(UsuarioPeer::CORREO)) $criteria->add(UsuarioPeer::CORREO, $this->correo);
        if ($this->isColumnModified(UsuarioPeer::ESTADO)) $criteria->add(UsuarioPeer::ESTADO, $this->estado);
        if ($this->isColumnModified(UsuarioPeer::IMAGEN)) $criteria->add(UsuarioPeer::IMAGEN, $this->imagen);
        if ($this->isColumnModified(UsuarioPeer::ADMINISTRADOR)) $criteria->add(UsuarioPeer::ADMINISTRADOR, $this->administrador);
        if ($this->isColumnModified(UsuarioPeer::VALIDADO)) $criteria->add(UsuarioPeer::VALIDADO, $this->validado);
        if ($this->isColumnModified(UsuarioPeer::ULTIMO_INGRESO)) $criteria->add(UsuarioPeer::ULTIMO_INGRESO, $this->ultimo_ingreso);
        if ($this->isColumnModified(UsuarioPeer::TEMA)) $criteria->add(UsuarioPeer::TEMA, $this->tema);
        if ($this->isColumnModified(UsuarioPeer::FRASE)) $criteria->add(UsuarioPeer::FRASE, $this->frase);
        if ($this->isColumnModified(UsuarioPeer::GENERO)) $criteria->add(UsuarioPeer::GENERO, $this->genero);
        if ($this->isColumnModified(UsuarioPeer::FECHA_NACIMIENTO)) $criteria->add(UsuarioPeer::FECHA_NACIMIENTO, $this->fecha_nacimiento);
        if ($this->isColumnModified(UsuarioPeer::NOMBRE_COMPLETO)) $criteria->add(UsuarioPeer::NOMBRE_COMPLETO, $this->nombre_completo);
        if ($this->isColumnModified(UsuarioPeer::EMPRESA)) $criteria->add(UsuarioPeer::EMPRESA, $this->empresa);
        if ($this->isColumnModified(UsuarioPeer::LOGO)) $criteria->add(UsuarioPeer::LOGO, $this->logo);
        if ($this->isColumnModified(UsuarioPeer::ACTIVO)) $criteria->add(UsuarioPeer::ACTIVO, $this->activo);
        if ($this->isColumnModified(UsuarioPeer::TIPO_USUARIO)) $criteria->add(UsuarioPeer::TIPO_USUARIO, $this->tipo_usuario);
        if ($this->isColumnModified(UsuarioPeer::OBSERVACIONES)) $criteria->add(UsuarioPeer::OBSERVACIONES, $this->observaciones);
        if ($this->isColumnModified(UsuarioPeer::PRIMER_NOMBRE)) $criteria->add(UsuarioPeer::PRIMER_NOMBRE, $this->primer_nombre);
        if ($this->isColumnModified(UsuarioPeer::SEGUNDO_NOMBRE)) $criteria->add(UsuarioPeer::SEGUNDO_NOMBRE, $this->segundo_nombre);
        if ($this->isColumnModified(UsuarioPeer::PRIMER_APELLIDO)) $criteria->add(UsuarioPeer::PRIMER_APELLIDO, $this->primer_apellido);
        if ($this->isColumnModified(UsuarioPeer::SEGUNDO_APELLIDO)) $criteria->add(UsuarioPeer::SEGUNDO_APELLIDO, $this->segundo_apellido);
        if ($this->isColumnModified(UsuarioPeer::PUESTO)) $criteria->add(UsuarioPeer::PUESTO, $this->puesto);
        if ($this->isColumnModified(UsuarioPeer::DEPARTAMENTO)) $criteria->add(UsuarioPeer::DEPARTAMENTO, $this->departamento);
        if ($this->isColumnModified(UsuarioPeer::JEFE)) $criteria->add(UsuarioPeer::JEFE, $this->jefe);
        if ($this->isColumnModified(UsuarioPeer::FECHA_ALTA)) $criteria->add(UsuarioPeer::FECHA_ALTA, $this->fecha_alta);
        if ($this->isColumnModified(UsuarioPeer::SUELDO)) $criteria->add(UsuarioPeer::SUELDO, $this->sueldo);
        if ($this->isColumnModified(UsuarioPeer::USUARIO_JEFE)) $criteria->add(UsuarioPeer::USUARIO_JEFE, $this->usuario_jefe);
        if ($this->isColumnModified(UsuarioPeer::ASISTENCIA)) $criteria->add(UsuarioPeer::ASISTENCIA, $this->asistencia);
        if ($this->isColumnModified(UsuarioPeer::PUNTUALIDA)) $criteria->add(UsuarioPeer::PUNTUALIDA, $this->puntualida);
        if ($this->isColumnModified(UsuarioPeer::TOKEN)) $criteria->add(UsuarioPeer::TOKEN, $this->token);
        if ($this->isColumnModified(UsuarioPeer::FECHA_REPORTE)) $criteria->add(UsuarioPeer::FECHA_REPORTE, $this->fecha_reporte);
        if ($this->isColumnModified(UsuarioPeer::HORAS)) $criteria->add(UsuarioPeer::HORAS, $this->horas);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
        $criteria->add(UsuarioPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Usuario (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setCodigo($this->getCodigo());
        $copyObj->setUsuario($this->getUsuario());
        $copyObj->setClave($this->getClave());
        $copyObj->setCorreo($this->getCorreo());
        $copyObj->setEstado($this->getEstado());
        $copyObj->setImagen($this->getImagen());
        $copyObj->setAdministrador($this->getAdministrador());
        $copyObj->setValidado($this->getValidado());
        $copyObj->setUltimoIngreso($this->getUltimoIngreso());
        $copyObj->setTema($this->getTema());
        $copyObj->setFrase($this->getFrase());
        $copyObj->setGenero($this->getGenero());
        $copyObj->setFechaNacimiento($this->getFechaNacimiento());
        $copyObj->setNombreCompleto($this->getNombreCompleto());
        $copyObj->setEmpresa($this->getEmpresa());
        $copyObj->setLogo($this->getLogo());
        $copyObj->setActivo($this->getActivo());
        $copyObj->setTipoUsuario($this->getTipoUsuario());
        $copyObj->setObservaciones($this->getObservaciones());
        $copyObj->setPrimerNombre($this->getPrimerNombre());
        $copyObj->setSegundoNombre($this->getSegundoNombre());
        $copyObj->setPrimerApellido($this->getPrimerApellido());
        $copyObj->setSegundoApellido($this->getSegundoApellido());
        $copyObj->setPuesto($this->getPuesto());
        $copyObj->setDepartamento($this->getDepartamento());
        $copyObj->setJefe($this->getJefe());
        $copyObj->setFechaAlta($this->getFechaAlta());
        $copyObj->setSueldo($this->getSueldo());
        $copyObj->setUsuarioJefe($this->getUsuarioJefe());
        $copyObj->setAsistencia($this->getAsistencia());
        $copyObj->setPuntualida($this->getPuntualida());
        $copyObj->setToken($this->getToken());
        $copyObj->setFechaReporte($this->getFechaReporte());
        $copyObj->setHoras($this->getHoras());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getUsuarioPerfils() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addUsuarioPerfil($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getAlertaAusencias() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addAlertaAusencia($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getSolicitudAusencias() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addSolicitudAusencia($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getAusenciaDetalles() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addAusenciaDetalle($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getSolicitudVacacions() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addSolicitudVacacion($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getSolicitudFinquitosRelatedByUsuarioGraba() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addSolicitudFinquitoRelatedByUsuarioGraba($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getSolicitudFinquitosRelatedByUsuarioRetiro() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addSolicitudFinquitoRelatedByUsuarioRetiro($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getVacacionUsuarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addVacacionUsuario($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getAumentoUsuarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addAumentoUsuario($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCapacitacionUsuarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCapacitacionUsuario($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getBitacoraUsuarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addBitacoraUsuario($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getSolicitudUsuarios() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addSolicitudUsuario($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Usuario Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return UsuarioPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new UsuarioPeer();
        }

        return self::$peer;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('UsuarioPerfil' == $relationName) {
            $this->initUsuarioPerfils();
        }
        if ('AlertaAusencia' == $relationName) {
            $this->initAlertaAusencias();
        }
        if ('SolicitudAusencia' == $relationName) {
            $this->initSolicitudAusencias();
        }
        if ('AusenciaDetalle' == $relationName) {
            $this->initAusenciaDetalles();
        }
        if ('SolicitudVacacion' == $relationName) {
            $this->initSolicitudVacacions();
        }
        if ('SolicitudFinquitoRelatedByUsuarioGraba' == $relationName) {
            $this->initSolicitudFinquitosRelatedByUsuarioGraba();
        }
        if ('SolicitudFinquitoRelatedByUsuarioRetiro' == $relationName) {
            $this->initSolicitudFinquitosRelatedByUsuarioRetiro();
        }
        if ('VacacionUsuario' == $relationName) {
            $this->initVacacionUsuarios();
        }
        if ('AumentoUsuario' == $relationName) {
            $this->initAumentoUsuarios();
        }
        if ('CapacitacionUsuario' == $relationName) {
            $this->initCapacitacionUsuarios();
        }
        if ('BitacoraUsuario' == $relationName) {
            $this->initBitacoraUsuarios();
        }
        if ('SolicitudUsuario' == $relationName) {
            $this->initSolicitudUsuarios();
        }
    }

    /**
     * Clears out the collUsuarioPerfils collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addUsuarioPerfils()
     */
    public function clearUsuarioPerfils()
    {
        $this->collUsuarioPerfils = null; // important to set this to null since that means it is uninitialized
        $this->collUsuarioPerfilsPartial = null;
    }

    /**
     * reset is the collUsuarioPerfils collection loaded partially
     *
     * @return void
     */
    public function resetPartialUsuarioPerfils($v = true)
    {
        $this->collUsuarioPerfilsPartial = $v;
    }

    /**
     * Initializes the collUsuarioPerfils collection.
     *
     * By default this just sets the collUsuarioPerfils collection to an empty array (like clearcollUsuarioPerfils());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initUsuarioPerfils($overrideExisting = true)
    {
        if (null !== $this->collUsuarioPerfils && !$overrideExisting) {
            return;
        }
        $this->collUsuarioPerfils = new PropelObjectCollection();
        $this->collUsuarioPerfils->setModel('UsuarioPerfil');
    }

    /**
     * Gets an array of UsuarioPerfil objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|UsuarioPerfil[] List of UsuarioPerfil objects
     * @throws PropelException
     */
    public function getUsuarioPerfils($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collUsuarioPerfilsPartial && !$this->isNew();
        if (null === $this->collUsuarioPerfils || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collUsuarioPerfils) {
                // return empty collection
                $this->initUsuarioPerfils();
            } else {
                $collUsuarioPerfils = UsuarioPerfilQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collUsuarioPerfilsPartial && count($collUsuarioPerfils)) {
                      $this->initUsuarioPerfils(false);

                      foreach($collUsuarioPerfils as $obj) {
                        if (false == $this->collUsuarioPerfils->contains($obj)) {
                          $this->collUsuarioPerfils->append($obj);
                        }
                      }

                      $this->collUsuarioPerfilsPartial = true;
                    }

                    return $collUsuarioPerfils;
                }

                if($partial && $this->collUsuarioPerfils) {
                    foreach($this->collUsuarioPerfils as $obj) {
                        if($obj->isNew()) {
                            $collUsuarioPerfils[] = $obj;
                        }
                    }
                }

                $this->collUsuarioPerfils = $collUsuarioPerfils;
                $this->collUsuarioPerfilsPartial = false;
            }
        }

        return $this->collUsuarioPerfils;
    }

    /**
     * Sets a collection of UsuarioPerfil objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $usuarioPerfils A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setUsuarioPerfils(PropelCollection $usuarioPerfils, PropelPDO $con = null)
    {
        $this->usuarioPerfilsScheduledForDeletion = $this->getUsuarioPerfils(new Criteria(), $con)->diff($usuarioPerfils);

        foreach ($this->usuarioPerfilsScheduledForDeletion as $usuarioPerfilRemoved) {
            $usuarioPerfilRemoved->setUsuario(null);
        }

        $this->collUsuarioPerfils = null;
        foreach ($usuarioPerfils as $usuarioPerfil) {
            $this->addUsuarioPerfil($usuarioPerfil);
        }

        $this->collUsuarioPerfils = $usuarioPerfils;
        $this->collUsuarioPerfilsPartial = false;
    }

    /**
     * Returns the number of related UsuarioPerfil objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related UsuarioPerfil objects.
     * @throws PropelException
     */
    public function countUsuarioPerfils(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collUsuarioPerfilsPartial && !$this->isNew();
        if (null === $this->collUsuarioPerfils || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collUsuarioPerfils) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getUsuarioPerfils());
                }
                $query = UsuarioPerfilQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collUsuarioPerfils);
        }
    }

    /**
     * Method called to associate a UsuarioPerfil object to this object
     * through the UsuarioPerfil foreign key attribute.
     *
     * @param    UsuarioPerfil $l UsuarioPerfil
     * @return Usuario The current object (for fluent API support)
     */
    public function addUsuarioPerfil(UsuarioPerfil $l)
    {
        if ($this->collUsuarioPerfils === null) {
            $this->initUsuarioPerfils();
            $this->collUsuarioPerfilsPartial = true;
        }
        if (!$this->collUsuarioPerfils->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddUsuarioPerfil($l);
        }

        return $this;
    }

    /**
     * @param	UsuarioPerfil $usuarioPerfil The usuarioPerfil object to add.
     */
    protected function doAddUsuarioPerfil($usuarioPerfil)
    {
        $this->collUsuarioPerfils[]= $usuarioPerfil;
        $usuarioPerfil->setUsuario($this);
    }

    /**
     * @param	UsuarioPerfil $usuarioPerfil The usuarioPerfil object to remove.
     */
    public function removeUsuarioPerfil($usuarioPerfil)
    {
        if ($this->getUsuarioPerfils()->contains($usuarioPerfil)) {
            $this->collUsuarioPerfils->remove($this->collUsuarioPerfils->search($usuarioPerfil));
            if (null === $this->usuarioPerfilsScheduledForDeletion) {
                $this->usuarioPerfilsScheduledForDeletion = clone $this->collUsuarioPerfils;
                $this->usuarioPerfilsScheduledForDeletion->clear();
            }
            $this->usuarioPerfilsScheduledForDeletion[]= $usuarioPerfil;
            $usuarioPerfil->setUsuario(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related UsuarioPerfils from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|UsuarioPerfil[] List of UsuarioPerfil objects
     */
    public function getUsuarioPerfilsJoinPerfil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = UsuarioPerfilQuery::create(null, $criteria);
        $query->joinWith('Perfil', $join_behavior);

        return $this->getUsuarioPerfils($query, $con);
    }

    /**
     * Clears out the collAlertaAusencias collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addAlertaAusencias()
     */
    public function clearAlertaAusencias()
    {
        $this->collAlertaAusencias = null; // important to set this to null since that means it is uninitialized
        $this->collAlertaAusenciasPartial = null;
    }

    /**
     * reset is the collAlertaAusencias collection loaded partially
     *
     * @return void
     */
    public function resetPartialAlertaAusencias($v = true)
    {
        $this->collAlertaAusenciasPartial = $v;
    }

    /**
     * Initializes the collAlertaAusencias collection.
     *
     * By default this just sets the collAlertaAusencias collection to an empty array (like clearcollAlertaAusencias());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initAlertaAusencias($overrideExisting = true)
    {
        if (null !== $this->collAlertaAusencias && !$overrideExisting) {
            return;
        }
        $this->collAlertaAusencias = new PropelObjectCollection();
        $this->collAlertaAusencias->setModel('AlertaAusencia');
    }

    /**
     * Gets an array of AlertaAusencia objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|AlertaAusencia[] List of AlertaAusencia objects
     * @throws PropelException
     */
    public function getAlertaAusencias($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collAlertaAusenciasPartial && !$this->isNew();
        if (null === $this->collAlertaAusencias || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collAlertaAusencias) {
                // return empty collection
                $this->initAlertaAusencias();
            } else {
                $collAlertaAusencias = AlertaAusenciaQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collAlertaAusenciasPartial && count($collAlertaAusencias)) {
                      $this->initAlertaAusencias(false);

                      foreach($collAlertaAusencias as $obj) {
                        if (false == $this->collAlertaAusencias->contains($obj)) {
                          $this->collAlertaAusencias->append($obj);
                        }
                      }

                      $this->collAlertaAusenciasPartial = true;
                    }

                    return $collAlertaAusencias;
                }

                if($partial && $this->collAlertaAusencias) {
                    foreach($this->collAlertaAusencias as $obj) {
                        if($obj->isNew()) {
                            $collAlertaAusencias[] = $obj;
                        }
                    }
                }

                $this->collAlertaAusencias = $collAlertaAusencias;
                $this->collAlertaAusenciasPartial = false;
            }
        }

        return $this->collAlertaAusencias;
    }

    /**
     * Sets a collection of AlertaAusencia objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $alertaAusencias A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setAlertaAusencias(PropelCollection $alertaAusencias, PropelPDO $con = null)
    {
        $this->alertaAusenciasScheduledForDeletion = $this->getAlertaAusencias(new Criteria(), $con)->diff($alertaAusencias);

        foreach ($this->alertaAusenciasScheduledForDeletion as $alertaAusenciaRemoved) {
            $alertaAusenciaRemoved->setUsuario(null);
        }

        $this->collAlertaAusencias = null;
        foreach ($alertaAusencias as $alertaAusencia) {
            $this->addAlertaAusencia($alertaAusencia);
        }

        $this->collAlertaAusencias = $alertaAusencias;
        $this->collAlertaAusenciasPartial = false;
    }

    /**
     * Returns the number of related AlertaAusencia objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related AlertaAusencia objects.
     * @throws PropelException
     */
    public function countAlertaAusencias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collAlertaAusenciasPartial && !$this->isNew();
        if (null === $this->collAlertaAusencias || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collAlertaAusencias) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getAlertaAusencias());
                }
                $query = AlertaAusenciaQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collAlertaAusencias);
        }
    }

    /**
     * Method called to associate a AlertaAusencia object to this object
     * through the AlertaAusencia foreign key attribute.
     *
     * @param    AlertaAusencia $l AlertaAusencia
     * @return Usuario The current object (for fluent API support)
     */
    public function addAlertaAusencia(AlertaAusencia $l)
    {
        if ($this->collAlertaAusencias === null) {
            $this->initAlertaAusencias();
            $this->collAlertaAusenciasPartial = true;
        }
        if (!$this->collAlertaAusencias->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddAlertaAusencia($l);
        }

        return $this;
    }

    /**
     * @param	AlertaAusencia $alertaAusencia The alertaAusencia object to add.
     */
    protected function doAddAlertaAusencia($alertaAusencia)
    {
        $this->collAlertaAusencias[]= $alertaAusencia;
        $alertaAusencia->setUsuario($this);
    }

    /**
     * @param	AlertaAusencia $alertaAusencia The alertaAusencia object to remove.
     */
    public function removeAlertaAusencia($alertaAusencia)
    {
        if ($this->getAlertaAusencias()->contains($alertaAusencia)) {
            $this->collAlertaAusencias->remove($this->collAlertaAusencias->search($alertaAusencia));
            if (null === $this->alertaAusenciasScheduledForDeletion) {
                $this->alertaAusenciasScheduledForDeletion = clone $this->collAlertaAusencias;
                $this->alertaAusenciasScheduledForDeletion->clear();
            }
            $this->alertaAusenciasScheduledForDeletion[]= $alertaAusencia;
            $alertaAusencia->setUsuario(null);
        }
    }

    /**
     * Clears out the collSolicitudAusencias collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addSolicitudAusencias()
     */
    public function clearSolicitudAusencias()
    {
        $this->collSolicitudAusencias = null; // important to set this to null since that means it is uninitialized
        $this->collSolicitudAusenciasPartial = null;
    }

    /**
     * reset is the collSolicitudAusencias collection loaded partially
     *
     * @return void
     */
    public function resetPartialSolicitudAusencias($v = true)
    {
        $this->collSolicitudAusenciasPartial = $v;
    }

    /**
     * Initializes the collSolicitudAusencias collection.
     *
     * By default this just sets the collSolicitudAusencias collection to an empty array (like clearcollSolicitudAusencias());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initSolicitudAusencias($overrideExisting = true)
    {
        if (null !== $this->collSolicitudAusencias && !$overrideExisting) {
            return;
        }
        $this->collSolicitudAusencias = new PropelObjectCollection();
        $this->collSolicitudAusencias->setModel('SolicitudAusencia');
    }

    /**
     * Gets an array of SolicitudAusencia objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|SolicitudAusencia[] List of SolicitudAusencia objects
     * @throws PropelException
     */
    public function getSolicitudAusencias($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudAusenciasPartial && !$this->isNew();
        if (null === $this->collSolicitudAusencias || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collSolicitudAusencias) {
                // return empty collection
                $this->initSolicitudAusencias();
            } else {
                $collSolicitudAusencias = SolicitudAusenciaQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collSolicitudAusenciasPartial && count($collSolicitudAusencias)) {
                      $this->initSolicitudAusencias(false);

                      foreach($collSolicitudAusencias as $obj) {
                        if (false == $this->collSolicitudAusencias->contains($obj)) {
                          $this->collSolicitudAusencias->append($obj);
                        }
                      }

                      $this->collSolicitudAusenciasPartial = true;
                    }

                    return $collSolicitudAusencias;
                }

                if($partial && $this->collSolicitudAusencias) {
                    foreach($this->collSolicitudAusencias as $obj) {
                        if($obj->isNew()) {
                            $collSolicitudAusencias[] = $obj;
                        }
                    }
                }

                $this->collSolicitudAusencias = $collSolicitudAusencias;
                $this->collSolicitudAusenciasPartial = false;
            }
        }

        return $this->collSolicitudAusencias;
    }

    /**
     * Sets a collection of SolicitudAusencia objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $solicitudAusencias A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setSolicitudAusencias(PropelCollection $solicitudAusencias, PropelPDO $con = null)
    {
        $this->solicitudAusenciasScheduledForDeletion = $this->getSolicitudAusencias(new Criteria(), $con)->diff($solicitudAusencias);

        foreach ($this->solicitudAusenciasScheduledForDeletion as $solicitudAusenciaRemoved) {
            $solicitudAusenciaRemoved->setUsuario(null);
        }

        $this->collSolicitudAusencias = null;
        foreach ($solicitudAusencias as $solicitudAusencia) {
            $this->addSolicitudAusencia($solicitudAusencia);
        }

        $this->collSolicitudAusencias = $solicitudAusencias;
        $this->collSolicitudAusenciasPartial = false;
    }

    /**
     * Returns the number of related SolicitudAusencia objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related SolicitudAusencia objects.
     * @throws PropelException
     */
    public function countSolicitudAusencias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudAusenciasPartial && !$this->isNew();
        if (null === $this->collSolicitudAusencias || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collSolicitudAusencias) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getSolicitudAusencias());
                }
                $query = SolicitudAusenciaQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collSolicitudAusencias);
        }
    }

    /**
     * Method called to associate a SolicitudAusencia object to this object
     * through the SolicitudAusencia foreign key attribute.
     *
     * @param    SolicitudAusencia $l SolicitudAusencia
     * @return Usuario The current object (for fluent API support)
     */
    public function addSolicitudAusencia(SolicitudAusencia $l)
    {
        if ($this->collSolicitudAusencias === null) {
            $this->initSolicitudAusencias();
            $this->collSolicitudAusenciasPartial = true;
        }
        if (!$this->collSolicitudAusencias->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddSolicitudAusencia($l);
        }

        return $this;
    }

    /**
     * @param	SolicitudAusencia $solicitudAusencia The solicitudAusencia object to add.
     */
    protected function doAddSolicitudAusencia($solicitudAusencia)
    {
        $this->collSolicitudAusencias[]= $solicitudAusencia;
        $solicitudAusencia->setUsuario($this);
    }

    /**
     * @param	SolicitudAusencia $solicitudAusencia The solicitudAusencia object to remove.
     */
    public function removeSolicitudAusencia($solicitudAusencia)
    {
        if ($this->getSolicitudAusencias()->contains($solicitudAusencia)) {
            $this->collSolicitudAusencias->remove($this->collSolicitudAusencias->search($solicitudAusencia));
            if (null === $this->solicitudAusenciasScheduledForDeletion) {
                $this->solicitudAusenciasScheduledForDeletion = clone $this->collSolicitudAusencias;
                $this->solicitudAusenciasScheduledForDeletion->clear();
            }
            $this->solicitudAusenciasScheduledForDeletion[]= $solicitudAusencia;
            $solicitudAusencia->setUsuario(null);
        }
    }

    /**
     * Clears out the collAusenciaDetalles collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addAusenciaDetalles()
     */
    public function clearAusenciaDetalles()
    {
        $this->collAusenciaDetalles = null; // important to set this to null since that means it is uninitialized
        $this->collAusenciaDetallesPartial = null;
    }

    /**
     * reset is the collAusenciaDetalles collection loaded partially
     *
     * @return void
     */
    public function resetPartialAusenciaDetalles($v = true)
    {
        $this->collAusenciaDetallesPartial = $v;
    }

    /**
     * Initializes the collAusenciaDetalles collection.
     *
     * By default this just sets the collAusenciaDetalles collection to an empty array (like clearcollAusenciaDetalles());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initAusenciaDetalles($overrideExisting = true)
    {
        if (null !== $this->collAusenciaDetalles && !$overrideExisting) {
            return;
        }
        $this->collAusenciaDetalles = new PropelObjectCollection();
        $this->collAusenciaDetalles->setModel('AusenciaDetalle');
    }

    /**
     * Gets an array of AusenciaDetalle objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|AusenciaDetalle[] List of AusenciaDetalle objects
     * @throws PropelException
     */
    public function getAusenciaDetalles($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collAusenciaDetallesPartial && !$this->isNew();
        if (null === $this->collAusenciaDetalles || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collAusenciaDetalles) {
                // return empty collection
                $this->initAusenciaDetalles();
            } else {
                $collAusenciaDetalles = AusenciaDetalleQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collAusenciaDetallesPartial && count($collAusenciaDetalles)) {
                      $this->initAusenciaDetalles(false);

                      foreach($collAusenciaDetalles as $obj) {
                        if (false == $this->collAusenciaDetalles->contains($obj)) {
                          $this->collAusenciaDetalles->append($obj);
                        }
                      }

                      $this->collAusenciaDetallesPartial = true;
                    }

                    return $collAusenciaDetalles;
                }

                if($partial && $this->collAusenciaDetalles) {
                    foreach($this->collAusenciaDetalles as $obj) {
                        if($obj->isNew()) {
                            $collAusenciaDetalles[] = $obj;
                        }
                    }
                }

                $this->collAusenciaDetalles = $collAusenciaDetalles;
                $this->collAusenciaDetallesPartial = false;
            }
        }

        return $this->collAusenciaDetalles;
    }

    /**
     * Sets a collection of AusenciaDetalle objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $ausenciaDetalles A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setAusenciaDetalles(PropelCollection $ausenciaDetalles, PropelPDO $con = null)
    {
        $this->ausenciaDetallesScheduledForDeletion = $this->getAusenciaDetalles(new Criteria(), $con)->diff($ausenciaDetalles);

        foreach ($this->ausenciaDetallesScheduledForDeletion as $ausenciaDetalleRemoved) {
            $ausenciaDetalleRemoved->setUsuario(null);
        }

        $this->collAusenciaDetalles = null;
        foreach ($ausenciaDetalles as $ausenciaDetalle) {
            $this->addAusenciaDetalle($ausenciaDetalle);
        }

        $this->collAusenciaDetalles = $ausenciaDetalles;
        $this->collAusenciaDetallesPartial = false;
    }

    /**
     * Returns the number of related AusenciaDetalle objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related AusenciaDetalle objects.
     * @throws PropelException
     */
    public function countAusenciaDetalles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collAusenciaDetallesPartial && !$this->isNew();
        if (null === $this->collAusenciaDetalles || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collAusenciaDetalles) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getAusenciaDetalles());
                }
                $query = AusenciaDetalleQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collAusenciaDetalles);
        }
    }

    /**
     * Method called to associate a AusenciaDetalle object to this object
     * through the AusenciaDetalle foreign key attribute.
     *
     * @param    AusenciaDetalle $l AusenciaDetalle
     * @return Usuario The current object (for fluent API support)
     */
    public function addAusenciaDetalle(AusenciaDetalle $l)
    {
        if ($this->collAusenciaDetalles === null) {
            $this->initAusenciaDetalles();
            $this->collAusenciaDetallesPartial = true;
        }
        if (!$this->collAusenciaDetalles->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddAusenciaDetalle($l);
        }

        return $this;
    }

    /**
     * @param	AusenciaDetalle $ausenciaDetalle The ausenciaDetalle object to add.
     */
    protected function doAddAusenciaDetalle($ausenciaDetalle)
    {
        $this->collAusenciaDetalles[]= $ausenciaDetalle;
        $ausenciaDetalle->setUsuario($this);
    }

    /**
     * @param	AusenciaDetalle $ausenciaDetalle The ausenciaDetalle object to remove.
     */
    public function removeAusenciaDetalle($ausenciaDetalle)
    {
        if ($this->getAusenciaDetalles()->contains($ausenciaDetalle)) {
            $this->collAusenciaDetalles->remove($this->collAusenciaDetalles->search($ausenciaDetalle));
            if (null === $this->ausenciaDetallesScheduledForDeletion) {
                $this->ausenciaDetallesScheduledForDeletion = clone $this->collAusenciaDetalles;
                $this->ausenciaDetallesScheduledForDeletion->clear();
            }
            $this->ausenciaDetallesScheduledForDeletion[]= $ausenciaDetalle;
            $ausenciaDetalle->setUsuario(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related AusenciaDetalles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|AusenciaDetalle[] List of AusenciaDetalle objects
     */
    public function getAusenciaDetallesJoinSolicitudAusencia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = AusenciaDetalleQuery::create(null, $criteria);
        $query->joinWith('SolicitudAusencia', $join_behavior);

        return $this->getAusenciaDetalles($query, $con);
    }

    /**
     * Clears out the collSolicitudVacacions collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addSolicitudVacacions()
     */
    public function clearSolicitudVacacions()
    {
        $this->collSolicitudVacacions = null; // important to set this to null since that means it is uninitialized
        $this->collSolicitudVacacionsPartial = null;
    }

    /**
     * reset is the collSolicitudVacacions collection loaded partially
     *
     * @return void
     */
    public function resetPartialSolicitudVacacions($v = true)
    {
        $this->collSolicitudVacacionsPartial = $v;
    }

    /**
     * Initializes the collSolicitudVacacions collection.
     *
     * By default this just sets the collSolicitudVacacions collection to an empty array (like clearcollSolicitudVacacions());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initSolicitudVacacions($overrideExisting = true)
    {
        if (null !== $this->collSolicitudVacacions && !$overrideExisting) {
            return;
        }
        $this->collSolicitudVacacions = new PropelObjectCollection();
        $this->collSolicitudVacacions->setModel('SolicitudVacacion');
    }

    /**
     * Gets an array of SolicitudVacacion objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|SolicitudVacacion[] List of SolicitudVacacion objects
     * @throws PropelException
     */
    public function getSolicitudVacacions($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudVacacionsPartial && !$this->isNew();
        if (null === $this->collSolicitudVacacions || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collSolicitudVacacions) {
                // return empty collection
                $this->initSolicitudVacacions();
            } else {
                $collSolicitudVacacions = SolicitudVacacionQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collSolicitudVacacionsPartial && count($collSolicitudVacacions)) {
                      $this->initSolicitudVacacions(false);

                      foreach($collSolicitudVacacions as $obj) {
                        if (false == $this->collSolicitudVacacions->contains($obj)) {
                          $this->collSolicitudVacacions->append($obj);
                        }
                      }

                      $this->collSolicitudVacacionsPartial = true;
                    }

                    return $collSolicitudVacacions;
                }

                if($partial && $this->collSolicitudVacacions) {
                    foreach($this->collSolicitudVacacions as $obj) {
                        if($obj->isNew()) {
                            $collSolicitudVacacions[] = $obj;
                        }
                    }
                }

                $this->collSolicitudVacacions = $collSolicitudVacacions;
                $this->collSolicitudVacacionsPartial = false;
            }
        }

        return $this->collSolicitudVacacions;
    }

    /**
     * Sets a collection of SolicitudVacacion objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $solicitudVacacions A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setSolicitudVacacions(PropelCollection $solicitudVacacions, PropelPDO $con = null)
    {
        $this->solicitudVacacionsScheduledForDeletion = $this->getSolicitudVacacions(new Criteria(), $con)->diff($solicitudVacacions);

        foreach ($this->solicitudVacacionsScheduledForDeletion as $solicitudVacacionRemoved) {
            $solicitudVacacionRemoved->setUsuario(null);
        }

        $this->collSolicitudVacacions = null;
        foreach ($solicitudVacacions as $solicitudVacacion) {
            $this->addSolicitudVacacion($solicitudVacacion);
        }

        $this->collSolicitudVacacions = $solicitudVacacions;
        $this->collSolicitudVacacionsPartial = false;
    }

    /**
     * Returns the number of related SolicitudVacacion objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related SolicitudVacacion objects.
     * @throws PropelException
     */
    public function countSolicitudVacacions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudVacacionsPartial && !$this->isNew();
        if (null === $this->collSolicitudVacacions || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collSolicitudVacacions) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getSolicitudVacacions());
                }
                $query = SolicitudVacacionQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collSolicitudVacacions);
        }
    }

    /**
     * Method called to associate a SolicitudVacacion object to this object
     * through the SolicitudVacacion foreign key attribute.
     *
     * @param    SolicitudVacacion $l SolicitudVacacion
     * @return Usuario The current object (for fluent API support)
     */
    public function addSolicitudVacacion(SolicitudVacacion $l)
    {
        if ($this->collSolicitudVacacions === null) {
            $this->initSolicitudVacacions();
            $this->collSolicitudVacacionsPartial = true;
        }
        if (!$this->collSolicitudVacacions->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddSolicitudVacacion($l);
        }

        return $this;
    }

    /**
     * @param	SolicitudVacacion $solicitudVacacion The solicitudVacacion object to add.
     */
    protected function doAddSolicitudVacacion($solicitudVacacion)
    {
        $this->collSolicitudVacacions[]= $solicitudVacacion;
        $solicitudVacacion->setUsuario($this);
    }

    /**
     * @param	SolicitudVacacion $solicitudVacacion The solicitudVacacion object to remove.
     */
    public function removeSolicitudVacacion($solicitudVacacion)
    {
        if ($this->getSolicitudVacacions()->contains($solicitudVacacion)) {
            $this->collSolicitudVacacions->remove($this->collSolicitudVacacions->search($solicitudVacacion));
            if (null === $this->solicitudVacacionsScheduledForDeletion) {
                $this->solicitudVacacionsScheduledForDeletion = clone $this->collSolicitudVacacions;
                $this->solicitudVacacionsScheduledForDeletion->clear();
            }
            $this->solicitudVacacionsScheduledForDeletion[]= $solicitudVacacion;
            $solicitudVacacion->setUsuario(null);
        }
    }

    /**
     * Clears out the collSolicitudFinquitosRelatedByUsuarioGraba collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addSolicitudFinquitosRelatedByUsuarioGraba()
     */
    public function clearSolicitudFinquitosRelatedByUsuarioGraba()
    {
        $this->collSolicitudFinquitosRelatedByUsuarioGraba = null; // important to set this to null since that means it is uninitialized
        $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial = null;
    }

    /**
     * reset is the collSolicitudFinquitosRelatedByUsuarioGraba collection loaded partially
     *
     * @return void
     */
    public function resetPartialSolicitudFinquitosRelatedByUsuarioGraba($v = true)
    {
        $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial = $v;
    }

    /**
     * Initializes the collSolicitudFinquitosRelatedByUsuarioGraba collection.
     *
     * By default this just sets the collSolicitudFinquitosRelatedByUsuarioGraba collection to an empty array (like clearcollSolicitudFinquitosRelatedByUsuarioGraba());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initSolicitudFinquitosRelatedByUsuarioGraba($overrideExisting = true)
    {
        if (null !== $this->collSolicitudFinquitosRelatedByUsuarioGraba && !$overrideExisting) {
            return;
        }
        $this->collSolicitudFinquitosRelatedByUsuarioGraba = new PropelObjectCollection();
        $this->collSolicitudFinquitosRelatedByUsuarioGraba->setModel('SolicitudFinquito');
    }

    /**
     * Gets an array of SolicitudFinquito objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|SolicitudFinquito[] List of SolicitudFinquito objects
     * @throws PropelException
     */
    public function getSolicitudFinquitosRelatedByUsuarioGraba($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial && !$this->isNew();
        if (null === $this->collSolicitudFinquitosRelatedByUsuarioGraba || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collSolicitudFinquitosRelatedByUsuarioGraba) {
                // return empty collection
                $this->initSolicitudFinquitosRelatedByUsuarioGraba();
            } else {
                $collSolicitudFinquitosRelatedByUsuarioGraba = SolicitudFinquitoQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuarioGraba($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial && count($collSolicitudFinquitosRelatedByUsuarioGraba)) {
                      $this->initSolicitudFinquitosRelatedByUsuarioGraba(false);

                      foreach($collSolicitudFinquitosRelatedByUsuarioGraba as $obj) {
                        if (false == $this->collSolicitudFinquitosRelatedByUsuarioGraba->contains($obj)) {
                          $this->collSolicitudFinquitosRelatedByUsuarioGraba->append($obj);
                        }
                      }

                      $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial = true;
                    }

                    return $collSolicitudFinquitosRelatedByUsuarioGraba;
                }

                if($partial && $this->collSolicitudFinquitosRelatedByUsuarioGraba) {
                    foreach($this->collSolicitudFinquitosRelatedByUsuarioGraba as $obj) {
                        if($obj->isNew()) {
                            $collSolicitudFinquitosRelatedByUsuarioGraba[] = $obj;
                        }
                    }
                }

                $this->collSolicitudFinquitosRelatedByUsuarioGraba = $collSolicitudFinquitosRelatedByUsuarioGraba;
                $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial = false;
            }
        }

        return $this->collSolicitudFinquitosRelatedByUsuarioGraba;
    }

    /**
     * Sets a collection of SolicitudFinquitoRelatedByUsuarioGraba objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $solicitudFinquitosRelatedByUsuarioGraba A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setSolicitudFinquitosRelatedByUsuarioGraba(PropelCollection $solicitudFinquitosRelatedByUsuarioGraba, PropelPDO $con = null)
    {
        $this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion = $this->getSolicitudFinquitosRelatedByUsuarioGraba(new Criteria(), $con)->diff($solicitudFinquitosRelatedByUsuarioGraba);

        foreach ($this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion as $solicitudFinquitoRelatedByUsuarioGrabaRemoved) {
            $solicitudFinquitoRelatedByUsuarioGrabaRemoved->setUsuarioRelatedByUsuarioGraba(null);
        }

        $this->collSolicitudFinquitosRelatedByUsuarioGraba = null;
        foreach ($solicitudFinquitosRelatedByUsuarioGraba as $solicitudFinquitoRelatedByUsuarioGraba) {
            $this->addSolicitudFinquitoRelatedByUsuarioGraba($solicitudFinquitoRelatedByUsuarioGraba);
        }

        $this->collSolicitudFinquitosRelatedByUsuarioGraba = $solicitudFinquitosRelatedByUsuarioGraba;
        $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial = false;
    }

    /**
     * Returns the number of related SolicitudFinquito objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related SolicitudFinquito objects.
     * @throws PropelException
     */
    public function countSolicitudFinquitosRelatedByUsuarioGraba(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial && !$this->isNew();
        if (null === $this->collSolicitudFinquitosRelatedByUsuarioGraba || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collSolicitudFinquitosRelatedByUsuarioGraba) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getSolicitudFinquitosRelatedByUsuarioGraba());
                }
                $query = SolicitudFinquitoQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuarioGraba($this)
                    ->count($con);
            }
        } else {
            return count($this->collSolicitudFinquitosRelatedByUsuarioGraba);
        }
    }

    /**
     * Method called to associate a SolicitudFinquito object to this object
     * through the SolicitudFinquito foreign key attribute.
     *
     * @param    SolicitudFinquito $l SolicitudFinquito
     * @return Usuario The current object (for fluent API support)
     */
    public function addSolicitudFinquitoRelatedByUsuarioGraba(SolicitudFinquito $l)
    {
        if ($this->collSolicitudFinquitosRelatedByUsuarioGraba === null) {
            $this->initSolicitudFinquitosRelatedByUsuarioGraba();
            $this->collSolicitudFinquitosRelatedByUsuarioGrabaPartial = true;
        }
        if (!$this->collSolicitudFinquitosRelatedByUsuarioGraba->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddSolicitudFinquitoRelatedByUsuarioGraba($l);
        }

        return $this;
    }

    /**
     * @param	SolicitudFinquitoRelatedByUsuarioGraba $solicitudFinquitoRelatedByUsuarioGraba The solicitudFinquitoRelatedByUsuarioGraba object to add.
     */
    protected function doAddSolicitudFinquitoRelatedByUsuarioGraba($solicitudFinquitoRelatedByUsuarioGraba)
    {
        $this->collSolicitudFinquitosRelatedByUsuarioGraba[]= $solicitudFinquitoRelatedByUsuarioGraba;
        $solicitudFinquitoRelatedByUsuarioGraba->setUsuarioRelatedByUsuarioGraba($this);
    }

    /**
     * @param	SolicitudFinquitoRelatedByUsuarioGraba $solicitudFinquitoRelatedByUsuarioGraba The solicitudFinquitoRelatedByUsuarioGraba object to remove.
     */
    public function removeSolicitudFinquitoRelatedByUsuarioGraba($solicitudFinquitoRelatedByUsuarioGraba)
    {
        if ($this->getSolicitudFinquitosRelatedByUsuarioGraba()->contains($solicitudFinquitoRelatedByUsuarioGraba)) {
            $this->collSolicitudFinquitosRelatedByUsuarioGraba->remove($this->collSolicitudFinquitosRelatedByUsuarioGraba->search($solicitudFinquitoRelatedByUsuarioGraba));
            if (null === $this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion) {
                $this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion = clone $this->collSolicitudFinquitosRelatedByUsuarioGraba;
                $this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion->clear();
            }
            $this->solicitudFinquitosRelatedByUsuarioGrabaScheduledForDeletion[]= $solicitudFinquitoRelatedByUsuarioGraba;
            $solicitudFinquitoRelatedByUsuarioGraba->setUsuarioRelatedByUsuarioGraba(null);
        }
    }

    /**
     * Clears out the collSolicitudFinquitosRelatedByUsuarioRetiro collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addSolicitudFinquitosRelatedByUsuarioRetiro()
     */
    public function clearSolicitudFinquitosRelatedByUsuarioRetiro()
    {
        $this->collSolicitudFinquitosRelatedByUsuarioRetiro = null; // important to set this to null since that means it is uninitialized
        $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial = null;
    }

    /**
     * reset is the collSolicitudFinquitosRelatedByUsuarioRetiro collection loaded partially
     *
     * @return void
     */
    public function resetPartialSolicitudFinquitosRelatedByUsuarioRetiro($v = true)
    {
        $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial = $v;
    }

    /**
     * Initializes the collSolicitudFinquitosRelatedByUsuarioRetiro collection.
     *
     * By default this just sets the collSolicitudFinquitosRelatedByUsuarioRetiro collection to an empty array (like clearcollSolicitudFinquitosRelatedByUsuarioRetiro());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initSolicitudFinquitosRelatedByUsuarioRetiro($overrideExisting = true)
    {
        if (null !== $this->collSolicitudFinquitosRelatedByUsuarioRetiro && !$overrideExisting) {
            return;
        }
        $this->collSolicitudFinquitosRelatedByUsuarioRetiro = new PropelObjectCollection();
        $this->collSolicitudFinquitosRelatedByUsuarioRetiro->setModel('SolicitudFinquito');
    }

    /**
     * Gets an array of SolicitudFinquito objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|SolicitudFinquito[] List of SolicitudFinquito objects
     * @throws PropelException
     */
    public function getSolicitudFinquitosRelatedByUsuarioRetiro($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial && !$this->isNew();
        if (null === $this->collSolicitudFinquitosRelatedByUsuarioRetiro || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collSolicitudFinquitosRelatedByUsuarioRetiro) {
                // return empty collection
                $this->initSolicitudFinquitosRelatedByUsuarioRetiro();
            } else {
                $collSolicitudFinquitosRelatedByUsuarioRetiro = SolicitudFinquitoQuery::create(null, $criteria)
                    ->filterByUsuarioRelatedByUsuarioRetiro($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial && count($collSolicitudFinquitosRelatedByUsuarioRetiro)) {
                      $this->initSolicitudFinquitosRelatedByUsuarioRetiro(false);

                      foreach($collSolicitudFinquitosRelatedByUsuarioRetiro as $obj) {
                        if (false == $this->collSolicitudFinquitosRelatedByUsuarioRetiro->contains($obj)) {
                          $this->collSolicitudFinquitosRelatedByUsuarioRetiro->append($obj);
                        }
                      }

                      $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial = true;
                    }

                    return $collSolicitudFinquitosRelatedByUsuarioRetiro;
                }

                if($partial && $this->collSolicitudFinquitosRelatedByUsuarioRetiro) {
                    foreach($this->collSolicitudFinquitosRelatedByUsuarioRetiro as $obj) {
                        if($obj->isNew()) {
                            $collSolicitudFinquitosRelatedByUsuarioRetiro[] = $obj;
                        }
                    }
                }

                $this->collSolicitudFinquitosRelatedByUsuarioRetiro = $collSolicitudFinquitosRelatedByUsuarioRetiro;
                $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial = false;
            }
        }

        return $this->collSolicitudFinquitosRelatedByUsuarioRetiro;
    }

    /**
     * Sets a collection of SolicitudFinquitoRelatedByUsuarioRetiro objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $solicitudFinquitosRelatedByUsuarioRetiro A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setSolicitudFinquitosRelatedByUsuarioRetiro(PropelCollection $solicitudFinquitosRelatedByUsuarioRetiro, PropelPDO $con = null)
    {
        $this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion = $this->getSolicitudFinquitosRelatedByUsuarioRetiro(new Criteria(), $con)->diff($solicitudFinquitosRelatedByUsuarioRetiro);

        foreach ($this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion as $solicitudFinquitoRelatedByUsuarioRetiroRemoved) {
            $solicitudFinquitoRelatedByUsuarioRetiroRemoved->setUsuarioRelatedByUsuarioRetiro(null);
        }

        $this->collSolicitudFinquitosRelatedByUsuarioRetiro = null;
        foreach ($solicitudFinquitosRelatedByUsuarioRetiro as $solicitudFinquitoRelatedByUsuarioRetiro) {
            $this->addSolicitudFinquitoRelatedByUsuarioRetiro($solicitudFinquitoRelatedByUsuarioRetiro);
        }

        $this->collSolicitudFinquitosRelatedByUsuarioRetiro = $solicitudFinquitosRelatedByUsuarioRetiro;
        $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial = false;
    }

    /**
     * Returns the number of related SolicitudFinquito objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related SolicitudFinquito objects.
     * @throws PropelException
     */
    public function countSolicitudFinquitosRelatedByUsuarioRetiro(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial && !$this->isNew();
        if (null === $this->collSolicitudFinquitosRelatedByUsuarioRetiro || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collSolicitudFinquitosRelatedByUsuarioRetiro) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getSolicitudFinquitosRelatedByUsuarioRetiro());
                }
                $query = SolicitudFinquitoQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuarioRelatedByUsuarioRetiro($this)
                    ->count($con);
            }
        } else {
            return count($this->collSolicitudFinquitosRelatedByUsuarioRetiro);
        }
    }

    /**
     * Method called to associate a SolicitudFinquito object to this object
     * through the SolicitudFinquito foreign key attribute.
     *
     * @param    SolicitudFinquito $l SolicitudFinquito
     * @return Usuario The current object (for fluent API support)
     */
    public function addSolicitudFinquitoRelatedByUsuarioRetiro(SolicitudFinquito $l)
    {
        if ($this->collSolicitudFinquitosRelatedByUsuarioRetiro === null) {
            $this->initSolicitudFinquitosRelatedByUsuarioRetiro();
            $this->collSolicitudFinquitosRelatedByUsuarioRetiroPartial = true;
        }
        if (!$this->collSolicitudFinquitosRelatedByUsuarioRetiro->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddSolicitudFinquitoRelatedByUsuarioRetiro($l);
        }

        return $this;
    }

    /**
     * @param	SolicitudFinquitoRelatedByUsuarioRetiro $solicitudFinquitoRelatedByUsuarioRetiro The solicitudFinquitoRelatedByUsuarioRetiro object to add.
     */
    protected function doAddSolicitudFinquitoRelatedByUsuarioRetiro($solicitudFinquitoRelatedByUsuarioRetiro)
    {
        $this->collSolicitudFinquitosRelatedByUsuarioRetiro[]= $solicitudFinquitoRelatedByUsuarioRetiro;
        $solicitudFinquitoRelatedByUsuarioRetiro->setUsuarioRelatedByUsuarioRetiro($this);
    }

    /**
     * @param	SolicitudFinquitoRelatedByUsuarioRetiro $solicitudFinquitoRelatedByUsuarioRetiro The solicitudFinquitoRelatedByUsuarioRetiro object to remove.
     */
    public function removeSolicitudFinquitoRelatedByUsuarioRetiro($solicitudFinquitoRelatedByUsuarioRetiro)
    {
        if ($this->getSolicitudFinquitosRelatedByUsuarioRetiro()->contains($solicitudFinquitoRelatedByUsuarioRetiro)) {
            $this->collSolicitudFinquitosRelatedByUsuarioRetiro->remove($this->collSolicitudFinquitosRelatedByUsuarioRetiro->search($solicitudFinquitoRelatedByUsuarioRetiro));
            if (null === $this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion) {
                $this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion = clone $this->collSolicitudFinquitosRelatedByUsuarioRetiro;
                $this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion->clear();
            }
            $this->solicitudFinquitosRelatedByUsuarioRetiroScheduledForDeletion[]= $solicitudFinquitoRelatedByUsuarioRetiro;
            $solicitudFinquitoRelatedByUsuarioRetiro->setUsuarioRelatedByUsuarioRetiro(null);
        }
    }

    /**
     * Clears out the collVacacionUsuarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addVacacionUsuarios()
     */
    public function clearVacacionUsuarios()
    {
        $this->collVacacionUsuarios = null; // important to set this to null since that means it is uninitialized
        $this->collVacacionUsuariosPartial = null;
    }

    /**
     * reset is the collVacacionUsuarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialVacacionUsuarios($v = true)
    {
        $this->collVacacionUsuariosPartial = $v;
    }

    /**
     * Initializes the collVacacionUsuarios collection.
     *
     * By default this just sets the collVacacionUsuarios collection to an empty array (like clearcollVacacionUsuarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initVacacionUsuarios($overrideExisting = true)
    {
        if (null !== $this->collVacacionUsuarios && !$overrideExisting) {
            return;
        }
        $this->collVacacionUsuarios = new PropelObjectCollection();
        $this->collVacacionUsuarios->setModel('VacacionUsuario');
    }

    /**
     * Gets an array of VacacionUsuario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|VacacionUsuario[] List of VacacionUsuario objects
     * @throws PropelException
     */
    public function getVacacionUsuarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collVacacionUsuariosPartial && !$this->isNew();
        if (null === $this->collVacacionUsuarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collVacacionUsuarios) {
                // return empty collection
                $this->initVacacionUsuarios();
            } else {
                $collVacacionUsuarios = VacacionUsuarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collVacacionUsuariosPartial && count($collVacacionUsuarios)) {
                      $this->initVacacionUsuarios(false);

                      foreach($collVacacionUsuarios as $obj) {
                        if (false == $this->collVacacionUsuarios->contains($obj)) {
                          $this->collVacacionUsuarios->append($obj);
                        }
                      }

                      $this->collVacacionUsuariosPartial = true;
                    }

                    return $collVacacionUsuarios;
                }

                if($partial && $this->collVacacionUsuarios) {
                    foreach($this->collVacacionUsuarios as $obj) {
                        if($obj->isNew()) {
                            $collVacacionUsuarios[] = $obj;
                        }
                    }
                }

                $this->collVacacionUsuarios = $collVacacionUsuarios;
                $this->collVacacionUsuariosPartial = false;
            }
        }

        return $this->collVacacionUsuarios;
    }

    /**
     * Sets a collection of VacacionUsuario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $vacacionUsuarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setVacacionUsuarios(PropelCollection $vacacionUsuarios, PropelPDO $con = null)
    {
        $this->vacacionUsuariosScheduledForDeletion = $this->getVacacionUsuarios(new Criteria(), $con)->diff($vacacionUsuarios);

        foreach ($this->vacacionUsuariosScheduledForDeletion as $vacacionUsuarioRemoved) {
            $vacacionUsuarioRemoved->setUsuario(null);
        }

        $this->collVacacionUsuarios = null;
        foreach ($vacacionUsuarios as $vacacionUsuario) {
            $this->addVacacionUsuario($vacacionUsuario);
        }

        $this->collVacacionUsuarios = $vacacionUsuarios;
        $this->collVacacionUsuariosPartial = false;
    }

    /**
     * Returns the number of related VacacionUsuario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related VacacionUsuario objects.
     * @throws PropelException
     */
    public function countVacacionUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collVacacionUsuariosPartial && !$this->isNew();
        if (null === $this->collVacacionUsuarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collVacacionUsuarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getVacacionUsuarios());
                }
                $query = VacacionUsuarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collVacacionUsuarios);
        }
    }

    /**
     * Method called to associate a VacacionUsuario object to this object
     * through the VacacionUsuario foreign key attribute.
     *
     * @param    VacacionUsuario $l VacacionUsuario
     * @return Usuario The current object (for fluent API support)
     */
    public function addVacacionUsuario(VacacionUsuario $l)
    {
        if ($this->collVacacionUsuarios === null) {
            $this->initVacacionUsuarios();
            $this->collVacacionUsuariosPartial = true;
        }
        if (!$this->collVacacionUsuarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddVacacionUsuario($l);
        }

        return $this;
    }

    /**
     * @param	VacacionUsuario $vacacionUsuario The vacacionUsuario object to add.
     */
    protected function doAddVacacionUsuario($vacacionUsuario)
    {
        $this->collVacacionUsuarios[]= $vacacionUsuario;
        $vacacionUsuario->setUsuario($this);
    }

    /**
     * @param	VacacionUsuario $vacacionUsuario The vacacionUsuario object to remove.
     */
    public function removeVacacionUsuario($vacacionUsuario)
    {
        if ($this->getVacacionUsuarios()->contains($vacacionUsuario)) {
            $this->collVacacionUsuarios->remove($this->collVacacionUsuarios->search($vacacionUsuario));
            if (null === $this->vacacionUsuariosScheduledForDeletion) {
                $this->vacacionUsuariosScheduledForDeletion = clone $this->collVacacionUsuarios;
                $this->vacacionUsuariosScheduledForDeletion->clear();
            }
            $this->vacacionUsuariosScheduledForDeletion[]= $vacacionUsuario;
            $vacacionUsuario->setUsuario(null);
        }
    }

    /**
     * Clears out the collAumentoUsuarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addAumentoUsuarios()
     */
    public function clearAumentoUsuarios()
    {
        $this->collAumentoUsuarios = null; // important to set this to null since that means it is uninitialized
        $this->collAumentoUsuariosPartial = null;
    }

    /**
     * reset is the collAumentoUsuarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialAumentoUsuarios($v = true)
    {
        $this->collAumentoUsuariosPartial = $v;
    }

    /**
     * Initializes the collAumentoUsuarios collection.
     *
     * By default this just sets the collAumentoUsuarios collection to an empty array (like clearcollAumentoUsuarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initAumentoUsuarios($overrideExisting = true)
    {
        if (null !== $this->collAumentoUsuarios && !$overrideExisting) {
            return;
        }
        $this->collAumentoUsuarios = new PropelObjectCollection();
        $this->collAumentoUsuarios->setModel('AumentoUsuario');
    }

    /**
     * Gets an array of AumentoUsuario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|AumentoUsuario[] List of AumentoUsuario objects
     * @throws PropelException
     */
    public function getAumentoUsuarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collAumentoUsuariosPartial && !$this->isNew();
        if (null === $this->collAumentoUsuarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collAumentoUsuarios) {
                // return empty collection
                $this->initAumentoUsuarios();
            } else {
                $collAumentoUsuarios = AumentoUsuarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collAumentoUsuariosPartial && count($collAumentoUsuarios)) {
                      $this->initAumentoUsuarios(false);

                      foreach($collAumentoUsuarios as $obj) {
                        if (false == $this->collAumentoUsuarios->contains($obj)) {
                          $this->collAumentoUsuarios->append($obj);
                        }
                      }

                      $this->collAumentoUsuariosPartial = true;
                    }

                    return $collAumentoUsuarios;
                }

                if($partial && $this->collAumentoUsuarios) {
                    foreach($this->collAumentoUsuarios as $obj) {
                        if($obj->isNew()) {
                            $collAumentoUsuarios[] = $obj;
                        }
                    }
                }

                $this->collAumentoUsuarios = $collAumentoUsuarios;
                $this->collAumentoUsuariosPartial = false;
            }
        }

        return $this->collAumentoUsuarios;
    }

    /**
     * Sets a collection of AumentoUsuario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $aumentoUsuarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setAumentoUsuarios(PropelCollection $aumentoUsuarios, PropelPDO $con = null)
    {
        $this->aumentoUsuariosScheduledForDeletion = $this->getAumentoUsuarios(new Criteria(), $con)->diff($aumentoUsuarios);

        foreach ($this->aumentoUsuariosScheduledForDeletion as $aumentoUsuarioRemoved) {
            $aumentoUsuarioRemoved->setUsuario(null);
        }

        $this->collAumentoUsuarios = null;
        foreach ($aumentoUsuarios as $aumentoUsuario) {
            $this->addAumentoUsuario($aumentoUsuario);
        }

        $this->collAumentoUsuarios = $aumentoUsuarios;
        $this->collAumentoUsuariosPartial = false;
    }

    /**
     * Returns the number of related AumentoUsuario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related AumentoUsuario objects.
     * @throws PropelException
     */
    public function countAumentoUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collAumentoUsuariosPartial && !$this->isNew();
        if (null === $this->collAumentoUsuarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collAumentoUsuarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getAumentoUsuarios());
                }
                $query = AumentoUsuarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collAumentoUsuarios);
        }
    }

    /**
     * Method called to associate a AumentoUsuario object to this object
     * through the AumentoUsuario foreign key attribute.
     *
     * @param    AumentoUsuario $l AumentoUsuario
     * @return Usuario The current object (for fluent API support)
     */
    public function addAumentoUsuario(AumentoUsuario $l)
    {
        if ($this->collAumentoUsuarios === null) {
            $this->initAumentoUsuarios();
            $this->collAumentoUsuariosPartial = true;
        }
        if (!$this->collAumentoUsuarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddAumentoUsuario($l);
        }

        return $this;
    }

    /**
     * @param	AumentoUsuario $aumentoUsuario The aumentoUsuario object to add.
     */
    protected function doAddAumentoUsuario($aumentoUsuario)
    {
        $this->collAumentoUsuarios[]= $aumentoUsuario;
        $aumentoUsuario->setUsuario($this);
    }

    /**
     * @param	AumentoUsuario $aumentoUsuario The aumentoUsuario object to remove.
     */
    public function removeAumentoUsuario($aumentoUsuario)
    {
        if ($this->getAumentoUsuarios()->contains($aumentoUsuario)) {
            $this->collAumentoUsuarios->remove($this->collAumentoUsuarios->search($aumentoUsuario));
            if (null === $this->aumentoUsuariosScheduledForDeletion) {
                $this->aumentoUsuariosScheduledForDeletion = clone $this->collAumentoUsuarios;
                $this->aumentoUsuariosScheduledForDeletion->clear();
            }
            $this->aumentoUsuariosScheduledForDeletion[]= $aumentoUsuario;
            $aumentoUsuario->setUsuario(null);
        }
    }

    /**
     * Clears out the collCapacitacionUsuarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addCapacitacionUsuarios()
     */
    public function clearCapacitacionUsuarios()
    {
        $this->collCapacitacionUsuarios = null; // important to set this to null since that means it is uninitialized
        $this->collCapacitacionUsuariosPartial = null;
    }

    /**
     * reset is the collCapacitacionUsuarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialCapacitacionUsuarios($v = true)
    {
        $this->collCapacitacionUsuariosPartial = $v;
    }

    /**
     * Initializes the collCapacitacionUsuarios collection.
     *
     * By default this just sets the collCapacitacionUsuarios collection to an empty array (like clearcollCapacitacionUsuarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCapacitacionUsuarios($overrideExisting = true)
    {
        if (null !== $this->collCapacitacionUsuarios && !$overrideExisting) {
            return;
        }
        $this->collCapacitacionUsuarios = new PropelObjectCollection();
        $this->collCapacitacionUsuarios->setModel('CapacitacionUsuario');
    }

    /**
     * Gets an array of CapacitacionUsuario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CapacitacionUsuario[] List of CapacitacionUsuario objects
     * @throws PropelException
     */
    public function getCapacitacionUsuarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCapacitacionUsuariosPartial && !$this->isNew();
        if (null === $this->collCapacitacionUsuarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCapacitacionUsuarios) {
                // return empty collection
                $this->initCapacitacionUsuarios();
            } else {
                $collCapacitacionUsuarios = CapacitacionUsuarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCapacitacionUsuariosPartial && count($collCapacitacionUsuarios)) {
                      $this->initCapacitacionUsuarios(false);

                      foreach($collCapacitacionUsuarios as $obj) {
                        if (false == $this->collCapacitacionUsuarios->contains($obj)) {
                          $this->collCapacitacionUsuarios->append($obj);
                        }
                      }

                      $this->collCapacitacionUsuariosPartial = true;
                    }

                    return $collCapacitacionUsuarios;
                }

                if($partial && $this->collCapacitacionUsuarios) {
                    foreach($this->collCapacitacionUsuarios as $obj) {
                        if($obj->isNew()) {
                            $collCapacitacionUsuarios[] = $obj;
                        }
                    }
                }

                $this->collCapacitacionUsuarios = $collCapacitacionUsuarios;
                $this->collCapacitacionUsuariosPartial = false;
            }
        }

        return $this->collCapacitacionUsuarios;
    }

    /**
     * Sets a collection of CapacitacionUsuario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $capacitacionUsuarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setCapacitacionUsuarios(PropelCollection $capacitacionUsuarios, PropelPDO $con = null)
    {
        $this->capacitacionUsuariosScheduledForDeletion = $this->getCapacitacionUsuarios(new Criteria(), $con)->diff($capacitacionUsuarios);

        foreach ($this->capacitacionUsuariosScheduledForDeletion as $capacitacionUsuarioRemoved) {
            $capacitacionUsuarioRemoved->setUsuario(null);
        }

        $this->collCapacitacionUsuarios = null;
        foreach ($capacitacionUsuarios as $capacitacionUsuario) {
            $this->addCapacitacionUsuario($capacitacionUsuario);
        }

        $this->collCapacitacionUsuarios = $capacitacionUsuarios;
        $this->collCapacitacionUsuariosPartial = false;
    }

    /**
     * Returns the number of related CapacitacionUsuario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CapacitacionUsuario objects.
     * @throws PropelException
     */
    public function countCapacitacionUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCapacitacionUsuariosPartial && !$this->isNew();
        if (null === $this->collCapacitacionUsuarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCapacitacionUsuarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getCapacitacionUsuarios());
                }
                $query = CapacitacionUsuarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collCapacitacionUsuarios);
        }
    }

    /**
     * Method called to associate a CapacitacionUsuario object to this object
     * through the CapacitacionUsuario foreign key attribute.
     *
     * @param    CapacitacionUsuario $l CapacitacionUsuario
     * @return Usuario The current object (for fluent API support)
     */
    public function addCapacitacionUsuario(CapacitacionUsuario $l)
    {
        if ($this->collCapacitacionUsuarios === null) {
            $this->initCapacitacionUsuarios();
            $this->collCapacitacionUsuariosPartial = true;
        }
        if (!$this->collCapacitacionUsuarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddCapacitacionUsuario($l);
        }

        return $this;
    }

    /**
     * @param	CapacitacionUsuario $capacitacionUsuario The capacitacionUsuario object to add.
     */
    protected function doAddCapacitacionUsuario($capacitacionUsuario)
    {
        $this->collCapacitacionUsuarios[]= $capacitacionUsuario;
        $capacitacionUsuario->setUsuario($this);
    }

    /**
     * @param	CapacitacionUsuario $capacitacionUsuario The capacitacionUsuario object to remove.
     */
    public function removeCapacitacionUsuario($capacitacionUsuario)
    {
        if ($this->getCapacitacionUsuarios()->contains($capacitacionUsuario)) {
            $this->collCapacitacionUsuarios->remove($this->collCapacitacionUsuarios->search($capacitacionUsuario));
            if (null === $this->capacitacionUsuariosScheduledForDeletion) {
                $this->capacitacionUsuariosScheduledForDeletion = clone $this->collCapacitacionUsuarios;
                $this->capacitacionUsuariosScheduledForDeletion->clear();
            }
            $this->capacitacionUsuariosScheduledForDeletion[]= $capacitacionUsuario;
            $capacitacionUsuario->setUsuario(null);
        }
    }

    /**
     * Clears out the collBitacoraUsuarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addBitacoraUsuarios()
     */
    public function clearBitacoraUsuarios()
    {
        $this->collBitacoraUsuarios = null; // important to set this to null since that means it is uninitialized
        $this->collBitacoraUsuariosPartial = null;
    }

    /**
     * reset is the collBitacoraUsuarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialBitacoraUsuarios($v = true)
    {
        $this->collBitacoraUsuariosPartial = $v;
    }

    /**
     * Initializes the collBitacoraUsuarios collection.
     *
     * By default this just sets the collBitacoraUsuarios collection to an empty array (like clearcollBitacoraUsuarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initBitacoraUsuarios($overrideExisting = true)
    {
        if (null !== $this->collBitacoraUsuarios && !$overrideExisting) {
            return;
        }
        $this->collBitacoraUsuarios = new PropelObjectCollection();
        $this->collBitacoraUsuarios->setModel('BitacoraUsuario');
    }

    /**
     * Gets an array of BitacoraUsuario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|BitacoraUsuario[] List of BitacoraUsuario objects
     * @throws PropelException
     */
    public function getBitacoraUsuarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collBitacoraUsuariosPartial && !$this->isNew();
        if (null === $this->collBitacoraUsuarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collBitacoraUsuarios) {
                // return empty collection
                $this->initBitacoraUsuarios();
            } else {
                $collBitacoraUsuarios = BitacoraUsuarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collBitacoraUsuariosPartial && count($collBitacoraUsuarios)) {
                      $this->initBitacoraUsuarios(false);

                      foreach($collBitacoraUsuarios as $obj) {
                        if (false == $this->collBitacoraUsuarios->contains($obj)) {
                          $this->collBitacoraUsuarios->append($obj);
                        }
                      }

                      $this->collBitacoraUsuariosPartial = true;
                    }

                    return $collBitacoraUsuarios;
                }

                if($partial && $this->collBitacoraUsuarios) {
                    foreach($this->collBitacoraUsuarios as $obj) {
                        if($obj->isNew()) {
                            $collBitacoraUsuarios[] = $obj;
                        }
                    }
                }

                $this->collBitacoraUsuarios = $collBitacoraUsuarios;
                $this->collBitacoraUsuariosPartial = false;
            }
        }

        return $this->collBitacoraUsuarios;
    }

    /**
     * Sets a collection of BitacoraUsuario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $bitacoraUsuarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setBitacoraUsuarios(PropelCollection $bitacoraUsuarios, PropelPDO $con = null)
    {
        $this->bitacoraUsuariosScheduledForDeletion = $this->getBitacoraUsuarios(new Criteria(), $con)->diff($bitacoraUsuarios);

        foreach ($this->bitacoraUsuariosScheduledForDeletion as $bitacoraUsuarioRemoved) {
            $bitacoraUsuarioRemoved->setUsuario(null);
        }

        $this->collBitacoraUsuarios = null;
        foreach ($bitacoraUsuarios as $bitacoraUsuario) {
            $this->addBitacoraUsuario($bitacoraUsuario);
        }

        $this->collBitacoraUsuarios = $bitacoraUsuarios;
        $this->collBitacoraUsuariosPartial = false;
    }

    /**
     * Returns the number of related BitacoraUsuario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related BitacoraUsuario objects.
     * @throws PropelException
     */
    public function countBitacoraUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collBitacoraUsuariosPartial && !$this->isNew();
        if (null === $this->collBitacoraUsuarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collBitacoraUsuarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getBitacoraUsuarios());
                }
                $query = BitacoraUsuarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collBitacoraUsuarios);
        }
    }

    /**
     * Method called to associate a BitacoraUsuario object to this object
     * through the BitacoraUsuario foreign key attribute.
     *
     * @param    BitacoraUsuario $l BitacoraUsuario
     * @return Usuario The current object (for fluent API support)
     */
    public function addBitacoraUsuario(BitacoraUsuario $l)
    {
        if ($this->collBitacoraUsuarios === null) {
            $this->initBitacoraUsuarios();
            $this->collBitacoraUsuariosPartial = true;
        }
        if (!$this->collBitacoraUsuarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddBitacoraUsuario($l);
        }

        return $this;
    }

    /**
     * @param	BitacoraUsuario $bitacoraUsuario The bitacoraUsuario object to add.
     */
    protected function doAddBitacoraUsuario($bitacoraUsuario)
    {
        $this->collBitacoraUsuarios[]= $bitacoraUsuario;
        $bitacoraUsuario->setUsuario($this);
    }

    /**
     * @param	BitacoraUsuario $bitacoraUsuario The bitacoraUsuario object to remove.
     */
    public function removeBitacoraUsuario($bitacoraUsuario)
    {
        if ($this->getBitacoraUsuarios()->contains($bitacoraUsuario)) {
            $this->collBitacoraUsuarios->remove($this->collBitacoraUsuarios->search($bitacoraUsuario));
            if (null === $this->bitacoraUsuariosScheduledForDeletion) {
                $this->bitacoraUsuariosScheduledForDeletion = clone $this->collBitacoraUsuarios;
                $this->bitacoraUsuariosScheduledForDeletion->clear();
            }
            $this->bitacoraUsuariosScheduledForDeletion[]= $bitacoraUsuario;
            $bitacoraUsuario->setUsuario(null);
        }
    }

    /**
     * Clears out the collSolicitudUsuarios collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addSolicitudUsuarios()
     */
    public function clearSolicitudUsuarios()
    {
        $this->collSolicitudUsuarios = null; // important to set this to null since that means it is uninitialized
        $this->collSolicitudUsuariosPartial = null;
    }

    /**
     * reset is the collSolicitudUsuarios collection loaded partially
     *
     * @return void
     */
    public function resetPartialSolicitudUsuarios($v = true)
    {
        $this->collSolicitudUsuariosPartial = $v;
    }

    /**
     * Initializes the collSolicitudUsuarios collection.
     *
     * By default this just sets the collSolicitudUsuarios collection to an empty array (like clearcollSolicitudUsuarios());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initSolicitudUsuarios($overrideExisting = true)
    {
        if (null !== $this->collSolicitudUsuarios && !$overrideExisting) {
            return;
        }
        $this->collSolicitudUsuarios = new PropelObjectCollection();
        $this->collSolicitudUsuarios->setModel('SolicitudUsuario');
    }

    /**
     * Gets an array of SolicitudUsuario objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Usuario is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|SolicitudUsuario[] List of SolicitudUsuario objects
     * @throws PropelException
     */
    public function getSolicitudUsuarios($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudUsuariosPartial && !$this->isNew();
        if (null === $this->collSolicitudUsuarios || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collSolicitudUsuarios) {
                // return empty collection
                $this->initSolicitudUsuarios();
            } else {
                $collSolicitudUsuarios = SolicitudUsuarioQuery::create(null, $criteria)
                    ->filterByUsuario($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collSolicitudUsuariosPartial && count($collSolicitudUsuarios)) {
                      $this->initSolicitudUsuarios(false);

                      foreach($collSolicitudUsuarios as $obj) {
                        if (false == $this->collSolicitudUsuarios->contains($obj)) {
                          $this->collSolicitudUsuarios->append($obj);
                        }
                      }

                      $this->collSolicitudUsuariosPartial = true;
                    }

                    return $collSolicitudUsuarios;
                }

                if($partial && $this->collSolicitudUsuarios) {
                    foreach($this->collSolicitudUsuarios as $obj) {
                        if($obj->isNew()) {
                            $collSolicitudUsuarios[] = $obj;
                        }
                    }
                }

                $this->collSolicitudUsuarios = $collSolicitudUsuarios;
                $this->collSolicitudUsuariosPartial = false;
            }
        }

        return $this->collSolicitudUsuarios;
    }

    /**
     * Sets a collection of SolicitudUsuario objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $solicitudUsuarios A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setSolicitudUsuarios(PropelCollection $solicitudUsuarios, PropelPDO $con = null)
    {
        $this->solicitudUsuariosScheduledForDeletion = $this->getSolicitudUsuarios(new Criteria(), $con)->diff($solicitudUsuarios);

        foreach ($this->solicitudUsuariosScheduledForDeletion as $solicitudUsuarioRemoved) {
            $solicitudUsuarioRemoved->setUsuario(null);
        }

        $this->collSolicitudUsuarios = null;
        foreach ($solicitudUsuarios as $solicitudUsuario) {
            $this->addSolicitudUsuario($solicitudUsuario);
        }

        $this->collSolicitudUsuarios = $solicitudUsuarios;
        $this->collSolicitudUsuariosPartial = false;
    }

    /**
     * Returns the number of related SolicitudUsuario objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related SolicitudUsuario objects.
     * @throws PropelException
     */
    public function countSolicitudUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collSolicitudUsuariosPartial && !$this->isNew();
        if (null === $this->collSolicitudUsuarios || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collSolicitudUsuarios) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getSolicitudUsuarios());
                }
                $query = SolicitudUsuarioQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUsuario($this)
                    ->count($con);
            }
        } else {
            return count($this->collSolicitudUsuarios);
        }
    }

    /**
     * Method called to associate a SolicitudUsuario object to this object
     * through the SolicitudUsuario foreign key attribute.
     *
     * @param    SolicitudUsuario $l SolicitudUsuario
     * @return Usuario The current object (for fluent API support)
     */
    public function addSolicitudUsuario(SolicitudUsuario $l)
    {
        if ($this->collSolicitudUsuarios === null) {
            $this->initSolicitudUsuarios();
            $this->collSolicitudUsuariosPartial = true;
        }
        if (!$this->collSolicitudUsuarios->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddSolicitudUsuario($l);
        }

        return $this;
    }

    /**
     * @param	SolicitudUsuario $solicitudUsuario The solicitudUsuario object to add.
     */
    protected function doAddSolicitudUsuario($solicitudUsuario)
    {
        $this->collSolicitudUsuarios[]= $solicitudUsuario;
        $solicitudUsuario->setUsuario($this);
    }

    /**
     * @param	SolicitudUsuario $solicitudUsuario The solicitudUsuario object to remove.
     */
    public function removeSolicitudUsuario($solicitudUsuario)
    {
        if ($this->getSolicitudUsuarios()->contains($solicitudUsuario)) {
            $this->collSolicitudUsuarios->remove($this->collSolicitudUsuarios->search($solicitudUsuario));
            if (null === $this->solicitudUsuariosScheduledForDeletion) {
                $this->solicitudUsuariosScheduledForDeletion = clone $this->collSolicitudUsuarios;
                $this->solicitudUsuariosScheduledForDeletion->clear();
            }
            $this->solicitudUsuariosScheduledForDeletion[]= $solicitudUsuario;
            $solicitudUsuario->setUsuario(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Usuario is new, it will return
     * an empty collection; or if this Usuario has previously
     * been saved, it will retrieve related SolicitudUsuarios from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Usuario.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|SolicitudUsuario[] List of SolicitudUsuario objects
     */
    public function getSolicitudUsuariosJoinCatalogoSolicitud($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = SolicitudUsuarioQuery::create(null, $criteria);
        $query->joinWith('CatalogoSolicitud', $join_behavior);

        return $this->getSolicitudUsuarios($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->codigo = null;
        $this->usuario = null;
        $this->clave = null;
        $this->correo = null;
        $this->estado = null;
        $this->imagen = null;
        $this->administrador = null;
        $this->validado = null;
        $this->ultimo_ingreso = null;
        $this->tema = null;
        $this->frase = null;
        $this->genero = null;
        $this->fecha_nacimiento = null;
        $this->nombre_completo = null;
        $this->empresa = null;
        $this->logo = null;
        $this->activo = null;
        $this->tipo_usuario = null;
        $this->observaciones = null;
        $this->primer_nombre = null;
        $this->segundo_nombre = null;
        $this->primer_apellido = null;
        $this->segundo_apellido = null;
        $this->puesto = null;
        $this->departamento = null;
        $this->jefe = null;
        $this->fecha_alta = null;
        $this->sueldo = null;
        $this->usuario_jefe = null;
        $this->asistencia = null;
        $this->puntualida = null;
        $this->token = null;
        $this->fecha_reporte = null;
        $this->horas = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collUsuarioPerfils) {
                foreach ($this->collUsuarioPerfils as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collAlertaAusencias) {
                foreach ($this->collAlertaAusencias as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collSolicitudAusencias) {
                foreach ($this->collSolicitudAusencias as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collAusenciaDetalles) {
                foreach ($this->collAusenciaDetalles as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collSolicitudVacacions) {
                foreach ($this->collSolicitudVacacions as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collSolicitudFinquitosRelatedByUsuarioGraba) {
                foreach ($this->collSolicitudFinquitosRelatedByUsuarioGraba as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collSolicitudFinquitosRelatedByUsuarioRetiro) {
                foreach ($this->collSolicitudFinquitosRelatedByUsuarioRetiro as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collVacacionUsuarios) {
                foreach ($this->collVacacionUsuarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collAumentoUsuarios) {
                foreach ($this->collAumentoUsuarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCapacitacionUsuarios) {
                foreach ($this->collCapacitacionUsuarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collBitacoraUsuarios) {
                foreach ($this->collBitacoraUsuarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collSolicitudUsuarios) {
                foreach ($this->collSolicitudUsuarios as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collUsuarioPerfils instanceof PropelCollection) {
            $this->collUsuarioPerfils->clearIterator();
        }
        $this->collUsuarioPerfils = null;
        if ($this->collAlertaAusencias instanceof PropelCollection) {
            $this->collAlertaAusencias->clearIterator();
        }
        $this->collAlertaAusencias = null;
        if ($this->collSolicitudAusencias instanceof PropelCollection) {
            $this->collSolicitudAusencias->clearIterator();
        }
        $this->collSolicitudAusencias = null;
        if ($this->collAusenciaDetalles instanceof PropelCollection) {
            $this->collAusenciaDetalles->clearIterator();
        }
        $this->collAusenciaDetalles = null;
        if ($this->collSolicitudVacacions instanceof PropelCollection) {
            $this->collSolicitudVacacions->clearIterator();
        }
        $this->collSolicitudVacacions = null;
        if ($this->collSolicitudFinquitosRelatedByUsuarioGraba instanceof PropelCollection) {
            $this->collSolicitudFinquitosRelatedByUsuarioGraba->clearIterator();
        }
        $this->collSolicitudFinquitosRelatedByUsuarioGraba = null;
        if ($this->collSolicitudFinquitosRelatedByUsuarioRetiro instanceof PropelCollection) {
            $this->collSolicitudFinquitosRelatedByUsuarioRetiro->clearIterator();
        }
        $this->collSolicitudFinquitosRelatedByUsuarioRetiro = null;
        if ($this->collVacacionUsuarios instanceof PropelCollection) {
            $this->collVacacionUsuarios->clearIterator();
        }
        $this->collVacacionUsuarios = null;
        if ($this->collAumentoUsuarios instanceof PropelCollection) {
            $this->collAumentoUsuarios->clearIterator();
        }
        $this->collAumentoUsuarios = null;
        if ($this->collCapacitacionUsuarios instanceof PropelCollection) {
            $this->collCapacitacionUsuarios->clearIterator();
        }
        $this->collCapacitacionUsuarios = null;
        if ($this->collBitacoraUsuarios instanceof PropelCollection) {
            $this->collBitacoraUsuarios->clearIterator();
        }
        $this->collBitacoraUsuarios = null;
        if ($this->collSolicitudUsuarios instanceof PropelCollection) {
            $this->collSolicitudUsuarios->clearIterator();
        }
        $this->collSolicitudUsuarios = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string The value of the 'usuario' column
     */
    public function __toString()
    {
        return (string) $this->getUsuario();
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseUsuario:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
