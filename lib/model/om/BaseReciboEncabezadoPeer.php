<?php


/**
 * Base static class for performing query and update operations on the 'recibo_encabezado' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 03/28/19 02:04:55
 *
 * @package propel.generator.lib.model.om
 */
abstract class BaseReciboEncabezadoPeer
{

    /** the default database name for this class */
    const DATABASE_NAME = 'propel';

    /** the table name for this class */
    const TABLE_NAME = 'recibo_encabezado';

    /** the related Propel class for this table */
    const OM_CLASS = 'ReciboEncabezado';

    /** the related TableMap class for this table */
    const TM_CLASS = 'ReciboEncabezadoTableMap';

    /** The total number of columns. */
    const NUM_COLUMNS = 26;

    /** The number of lazy-loaded columns. */
    const NUM_LAZY_LOAD_COLUMNS = 0;

    /** The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS) */
    const NUM_HYDRATE_COLUMNS = 26;

    /** the column name for the ID field */
    const ID = 'recibo_encabezado.ID';

    /** the column name for the PLANILLA_RESUMEN_ID field */
    const PLANILLA_RESUMEN_ID = 'recibo_encabezado.PLANILLA_RESUMEN_ID';

    /** the column name for the EMPLEADO field */
    const EMPLEADO = 'recibo_encabezado.EMPLEADO';

    /** the column name for the EMPLEADO_PROYECTO_ID field */
    const EMPLEADO_PROYECTO_ID = 'recibo_encabezado.EMPLEADO_PROYECTO_ID';

    /** the column name for the SUELDO_BASE field */
    const SUELDO_BASE = 'recibo_encabezado.SUELDO_BASE';

    /** the column name for the BONIFICACION_BASE field */
    const BONIFICACION_BASE = 'recibo_encabezado.BONIFICACION_BASE';

    /** the column name for the DIAS_AUSENCIAS field */
    const DIAS_AUSENCIAS = 'recibo_encabezado.DIAS_AUSENCIAS';

    /** the column name for the DIAS_SUSPENDIDO field */
    const DIAS_SUSPENDIDO = 'recibo_encabezado.DIAS_SUSPENDIDO';

    /** the column name for the SEPTIMOS field */
    const SEPTIMOS = 'recibo_encabezado.SEPTIMOS';

    /** the column name for the TOTAL_DESCUENTOS field */
    const TOTAL_DESCUENTOS = 'recibo_encabezado.TOTAL_DESCUENTOS';

    /** the column name for the TOTAL_INGRESOS field */
    const TOTAL_INGRESOS = 'recibo_encabezado.TOTAL_INGRESOS';

    /** the column name for the TOTAL_EXTRAS field */
    const TOTAL_EXTRAS = 'recibo_encabezado.TOTAL_EXTRAS';

    /** the column name for the TOTAL_SUELDO_LIQUIDO field */
    const TOTAL_SUELDO_LIQUIDO = 'recibo_encabezado.TOTAL_SUELDO_LIQUIDO';

    /** the column name for the ALTA field */
    const ALTA = 'recibo_encabezado.ALTA';

    /** the column name for the BAJA field */
    const BAJA = 'recibo_encabezado.BAJA';

    /** the column name for the CODIGO field */
    const CODIGO = 'recibo_encabezado.CODIGO';

    /** the column name for the PUESTO field */
    const PUESTO = 'recibo_encabezado.PUESTO';

    /** the column name for the DEPARTAMENTO field */
    const DEPARTAMENTO = 'recibo_encabezado.DEPARTAMENTO';

    /** the column name for the DIAS_BASE field */
    const DIAS_BASE = 'recibo_encabezado.DIAS_BASE';

    /** the column name for the BLOQUE field */
    const BLOQUE = 'recibo_encabezado.BLOQUE';

    /** the column name for the INICIO field */
    const INICIO = 'recibo_encabezado.INICIO';

    /** the column name for the FIN field */
    const FIN = 'recibo_encabezado.FIN';

    /** the column name for the NUMERO field */
    const NUMERO = 'recibo_encabezado.NUMERO';

    /** the column name for the LABORADOS field */
    const LABORADOS = 'recibo_encabezado.LABORADOS';

    /** the column name for the CABECERA_IN field */
    const CABECERA_IN = 'recibo_encabezado.CABECERA_IN';

    /** the column name for the ENVIADO_CORREO field */
    const ENVIADO_CORREO = 'recibo_encabezado.ENVIADO_CORREO';

    /** The default string format for model objects of the related table **/
    const DEFAULT_STRING_FORMAT = 'YAML';

    /**
     * An identiy map to hold any loaded instances of ReciboEncabezado objects.
     * This must be public so that other peer classes can access this when hydrating from JOIN
     * queries.
     * @var        array ReciboEncabezado[]
     */
    public static $instances = array();


    /**
     * holds an array of fieldnames
     *
     * first dimension keys are the type constants
     * e.g. ReciboEncabezadoPeer::$fieldNames[ReciboEncabezadoPeer::TYPE_PHPNAME][0] = 'Id'
     */
    protected static $fieldNames = array (
        BasePeer::TYPE_PHPNAME => array ('Id', 'PlanillaResumenId', 'Empleado', 'EmpleadoProyectoId', 'SueldoBase', 'BonificacionBase', 'DiasAusencias', 'DiasSuspendido', 'Septimos', 'TotalDescuentos', 'TotalIngresos', 'TotalExtras', 'TotalSueldoLiquido', 'Alta', 'Baja', 'Codigo', 'Puesto', 'Departamento', 'DiasBase', 'Bloque', 'Inicio', 'Fin', 'Numero', 'Laborados', 'CabeceraIn', 'EnviadoCorreo', ),
        BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'planillaResumenId', 'empleado', 'empleadoProyectoId', 'sueldoBase', 'bonificacionBase', 'diasAusencias', 'diasSuspendido', 'septimos', 'totalDescuentos', 'totalIngresos', 'totalExtras', 'totalSueldoLiquido', 'alta', 'baja', 'codigo', 'puesto', 'departamento', 'diasBase', 'bloque', 'inicio', 'fin', 'numero', 'laborados', 'cabeceraIn', 'enviadoCorreo', ),
        BasePeer::TYPE_COLNAME => array (ReciboEncabezadoPeer::ID, ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID, ReciboEncabezadoPeer::EMPLEADO, ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID, ReciboEncabezadoPeer::SUELDO_BASE, ReciboEncabezadoPeer::BONIFICACION_BASE, ReciboEncabezadoPeer::DIAS_AUSENCIAS, ReciboEncabezadoPeer::DIAS_SUSPENDIDO, ReciboEncabezadoPeer::SEPTIMOS, ReciboEncabezadoPeer::TOTAL_DESCUENTOS, ReciboEncabezadoPeer::TOTAL_INGRESOS, ReciboEncabezadoPeer::TOTAL_EXTRAS, ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO, ReciboEncabezadoPeer::ALTA, ReciboEncabezadoPeer::BAJA, ReciboEncabezadoPeer::CODIGO, ReciboEncabezadoPeer::PUESTO, ReciboEncabezadoPeer::DEPARTAMENTO, ReciboEncabezadoPeer::DIAS_BASE, ReciboEncabezadoPeer::BLOQUE, ReciboEncabezadoPeer::INICIO, ReciboEncabezadoPeer::FIN, ReciboEncabezadoPeer::NUMERO, ReciboEncabezadoPeer::LABORADOS, ReciboEncabezadoPeer::CABECERA_IN, ReciboEncabezadoPeer::ENVIADO_CORREO, ),
        BasePeer::TYPE_RAW_COLNAME => array ('ID', 'PLANILLA_RESUMEN_ID', 'EMPLEADO', 'EMPLEADO_PROYECTO_ID', 'SUELDO_BASE', 'BONIFICACION_BASE', 'DIAS_AUSENCIAS', 'DIAS_SUSPENDIDO', 'SEPTIMOS', 'TOTAL_DESCUENTOS', 'TOTAL_INGRESOS', 'TOTAL_EXTRAS', 'TOTAL_SUELDO_LIQUIDO', 'ALTA', 'BAJA', 'CODIGO', 'PUESTO', 'DEPARTAMENTO', 'DIAS_BASE', 'BLOQUE', 'INICIO', 'FIN', 'NUMERO', 'LABORADOS', 'CABECERA_IN', 'ENVIADO_CORREO', ),
        BasePeer::TYPE_FIELDNAME => array ('id', 'Planilla_Resumen_id', 'empleado', 'empleado_proyecto_id', 'sueldo_base', 'bonificacion_base', 'dias_ausencias', 'dias_suspendido', 'septimos', 'total_descuentos', 'total_ingresos', 'total_extras', 'total_sueldo_liquido', 'alta', 'baja', 'codigo', 'puesto', 'departamento', 'dias_base', 'bloque', 'inicio', 'fin', 'numero', 'laborados', 'cabecera_in', 'enviado_correo', ),
        BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, )
    );

    /**
     * holds an array of keys for quick access to the fieldnames array
     *
     * first dimension keys are the type constants
     * e.g. ReciboEncabezadoPeer::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
     */
    protected static $fieldKeys = array (
        BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'PlanillaResumenId' => 1, 'Empleado' => 2, 'EmpleadoProyectoId' => 3, 'SueldoBase' => 4, 'BonificacionBase' => 5, 'DiasAusencias' => 6, 'DiasSuspendido' => 7, 'Septimos' => 8, 'TotalDescuentos' => 9, 'TotalIngresos' => 10, 'TotalExtras' => 11, 'TotalSueldoLiquido' => 12, 'Alta' => 13, 'Baja' => 14, 'Codigo' => 15, 'Puesto' => 16, 'Departamento' => 17, 'DiasBase' => 18, 'Bloque' => 19, 'Inicio' => 20, 'Fin' => 21, 'Numero' => 22, 'Laborados' => 23, 'CabeceraIn' => 24, 'EnviadoCorreo' => 25, ),
        BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'planillaResumenId' => 1, 'empleado' => 2, 'empleadoProyectoId' => 3, 'sueldoBase' => 4, 'bonificacionBase' => 5, 'diasAusencias' => 6, 'diasSuspendido' => 7, 'septimos' => 8, 'totalDescuentos' => 9, 'totalIngresos' => 10, 'totalExtras' => 11, 'totalSueldoLiquido' => 12, 'alta' => 13, 'baja' => 14, 'codigo' => 15, 'puesto' => 16, 'departamento' => 17, 'diasBase' => 18, 'bloque' => 19, 'inicio' => 20, 'fin' => 21, 'numero' => 22, 'laborados' => 23, 'cabeceraIn' => 24, 'enviadoCorreo' => 25, ),
        BasePeer::TYPE_COLNAME => array (ReciboEncabezadoPeer::ID => 0, ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID => 1, ReciboEncabezadoPeer::EMPLEADO => 2, ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID => 3, ReciboEncabezadoPeer::SUELDO_BASE => 4, ReciboEncabezadoPeer::BONIFICACION_BASE => 5, ReciboEncabezadoPeer::DIAS_AUSENCIAS => 6, ReciboEncabezadoPeer::DIAS_SUSPENDIDO => 7, ReciboEncabezadoPeer::SEPTIMOS => 8, ReciboEncabezadoPeer::TOTAL_DESCUENTOS => 9, ReciboEncabezadoPeer::TOTAL_INGRESOS => 10, ReciboEncabezadoPeer::TOTAL_EXTRAS => 11, ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO => 12, ReciboEncabezadoPeer::ALTA => 13, ReciboEncabezadoPeer::BAJA => 14, ReciboEncabezadoPeer::CODIGO => 15, ReciboEncabezadoPeer::PUESTO => 16, ReciboEncabezadoPeer::DEPARTAMENTO => 17, ReciboEncabezadoPeer::DIAS_BASE => 18, ReciboEncabezadoPeer::BLOQUE => 19, ReciboEncabezadoPeer::INICIO => 20, ReciboEncabezadoPeer::FIN => 21, ReciboEncabezadoPeer::NUMERO => 22, ReciboEncabezadoPeer::LABORADOS => 23, ReciboEncabezadoPeer::CABECERA_IN => 24, ReciboEncabezadoPeer::ENVIADO_CORREO => 25, ),
        BasePeer::TYPE_RAW_COLNAME => array ('ID' => 0, 'PLANILLA_RESUMEN_ID' => 1, 'EMPLEADO' => 2, 'EMPLEADO_PROYECTO_ID' => 3, 'SUELDO_BASE' => 4, 'BONIFICACION_BASE' => 5, 'DIAS_AUSENCIAS' => 6, 'DIAS_SUSPENDIDO' => 7, 'SEPTIMOS' => 8, 'TOTAL_DESCUENTOS' => 9, 'TOTAL_INGRESOS' => 10, 'TOTAL_EXTRAS' => 11, 'TOTAL_SUELDO_LIQUIDO' => 12, 'ALTA' => 13, 'BAJA' => 14, 'CODIGO' => 15, 'PUESTO' => 16, 'DEPARTAMENTO' => 17, 'DIAS_BASE' => 18, 'BLOQUE' => 19, 'INICIO' => 20, 'FIN' => 21, 'NUMERO' => 22, 'LABORADOS' => 23, 'CABECERA_IN' => 24, 'ENVIADO_CORREO' => 25, ),
        BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'Planilla_Resumen_id' => 1, 'empleado' => 2, 'empleado_proyecto_id' => 3, 'sueldo_base' => 4, 'bonificacion_base' => 5, 'dias_ausencias' => 6, 'dias_suspendido' => 7, 'septimos' => 8, 'total_descuentos' => 9, 'total_ingresos' => 10, 'total_extras' => 11, 'total_sueldo_liquido' => 12, 'alta' => 13, 'baja' => 14, 'codigo' => 15, 'puesto' => 16, 'departamento' => 17, 'dias_base' => 18, 'bloque' => 19, 'inicio' => 20, 'fin' => 21, 'numero' => 22, 'laborados' => 23, 'cabecera_in' => 24, 'enviado_correo' => 25, ),
        BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, )
    );

    /**
     * Translates a fieldname to another type
     *
     * @param      string $name field name
     * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
     * @param      string $toType   One of the class type constants
     * @return string          translated name of the field.
     * @throws PropelException - if the specified name could not be found in the fieldname mappings.
     */
    public static function translateFieldName($name, $fromType, $toType)
    {
        $toNames = ReciboEncabezadoPeer::getFieldNames($toType);
        $key = isset(ReciboEncabezadoPeer::$fieldKeys[$fromType][$name]) ? ReciboEncabezadoPeer::$fieldKeys[$fromType][$name] : null;
        if ($key === null) {
            throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(ReciboEncabezadoPeer::$fieldKeys[$fromType], true));
        }

        return $toNames[$key];
    }

    /**
     * Returns an array of field names.
     *
     * @param      string $type The type of fieldnames to return:
     *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
     * @return array           A list of field names
     * @throws PropelException - if the type is not valid.
     */
    public static function getFieldNames($type = BasePeer::TYPE_PHPNAME)
    {
        if (!array_key_exists($type, ReciboEncabezadoPeer::$fieldNames)) {
            throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
        }

        return ReciboEncabezadoPeer::$fieldNames[$type];
    }

    /**
     * Convenience method which changes table.column to alias.column.
     *
     * Using this method you can maintain SQL abstraction while using column aliases.
     * <code>
     *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
     *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
     * </code>
     * @param      string $alias The alias for the current table.
     * @param      string $column The column name for current table. (i.e. ReciboEncabezadoPeer::COLUMN_NAME).
     * @return string
     */
    public static function alias($alias, $column)
    {
        return str_replace(ReciboEncabezadoPeer::TABLE_NAME.'.', $alias.'.', $column);
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * Note: any columns that were marked with lazyLoad="true" in the
     * XML schema will not be added to the select list and only loaded
     * on demand.
     *
     * @param      Criteria $criteria object containing the columns to add.
     * @param      string   $alias    optional table alias
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function addSelectColumns(Criteria $criteria, $alias = null)
    {
        if (null === $alias) {
            $criteria->addSelectColumn(ReciboEncabezadoPeer::ID);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::EMPLEADO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::SUELDO_BASE);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::BONIFICACION_BASE);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::DIAS_AUSENCIAS);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::DIAS_SUSPENDIDO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::SEPTIMOS);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::TOTAL_DESCUENTOS);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::TOTAL_INGRESOS);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::TOTAL_EXTRAS);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::ALTA);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::BAJA);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::CODIGO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::PUESTO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::DEPARTAMENTO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::DIAS_BASE);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::BLOQUE);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::INICIO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::FIN);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::NUMERO);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::LABORADOS);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::CABECERA_IN);
            $criteria->addSelectColumn(ReciboEncabezadoPeer::ENVIADO_CORREO);
        } else {
            $criteria->addSelectColumn($alias . '.ID');
            $criteria->addSelectColumn($alias . '.PLANILLA_RESUMEN_ID');
            $criteria->addSelectColumn($alias . '.EMPLEADO');
            $criteria->addSelectColumn($alias . '.EMPLEADO_PROYECTO_ID');
            $criteria->addSelectColumn($alias . '.SUELDO_BASE');
            $criteria->addSelectColumn($alias . '.BONIFICACION_BASE');
            $criteria->addSelectColumn($alias . '.DIAS_AUSENCIAS');
            $criteria->addSelectColumn($alias . '.DIAS_SUSPENDIDO');
            $criteria->addSelectColumn($alias . '.SEPTIMOS');
            $criteria->addSelectColumn($alias . '.TOTAL_DESCUENTOS');
            $criteria->addSelectColumn($alias . '.TOTAL_INGRESOS');
            $criteria->addSelectColumn($alias . '.TOTAL_EXTRAS');
            $criteria->addSelectColumn($alias . '.TOTAL_SUELDO_LIQUIDO');
            $criteria->addSelectColumn($alias . '.ALTA');
            $criteria->addSelectColumn($alias . '.BAJA');
            $criteria->addSelectColumn($alias . '.CODIGO');
            $criteria->addSelectColumn($alias . '.PUESTO');
            $criteria->addSelectColumn($alias . '.DEPARTAMENTO');
            $criteria->addSelectColumn($alias . '.DIAS_BASE');
            $criteria->addSelectColumn($alias . '.BLOQUE');
            $criteria->addSelectColumn($alias . '.INICIO');
            $criteria->addSelectColumn($alias . '.FIN');
            $criteria->addSelectColumn($alias . '.NUMERO');
            $criteria->addSelectColumn($alias . '.LABORADOS');
            $criteria->addSelectColumn($alias . '.CABECERA_IN');
            $criteria->addSelectColumn($alias . '.ENVIADO_CORREO');
        }
    }

    /**
     * Returns the number of rows matching criteria.
     *
     * @param      Criteria $criteria
     * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
     * @param      PropelPDO $con
     * @return int Number of matching rows.
     */
    public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
    {
        // we may modify criteria, so copy it first
        $criteria = clone $criteria;

        // We need to set the primary table name, since in the case that there are no WHERE columns
        // it will be impossible for the BasePeer::createSelectSql() method to determine which
        // tables go into the FROM clause.
        $criteria->setPrimaryTableName(ReciboEncabezadoPeer::TABLE_NAME);

        if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
            $criteria->setDistinct();
        }

        if (!$criteria->hasSelectClause()) {
            ReciboEncabezadoPeer::addSelectColumns($criteria);
        }

        $criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
        $criteria->setDbName(ReciboEncabezadoPeer::DATABASE_NAME); // Set the correct dbName

        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BaseReciboEncabezadoPeer', $criteria, $con);
        }

        // BasePeer returns a PDOStatement
        $stmt = BasePeer::doCount($criteria, $con);

        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $count = (int) $row[0];
        } else {
            $count = 0; // no rows returned; we infer that means 0 matches.
        }
        $stmt->closeCursor();

        return $count;
    }
    /**
     * Selects one object from the DB.
     *
     * @param      Criteria $criteria object used to create the SELECT statement.
     * @param      PropelPDO $con
     * @return                 ReciboEncabezado
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
    {
        $critcopy = clone $criteria;
        $critcopy->setLimit(1);
        $objects = ReciboEncabezadoPeer::doSelect($critcopy, $con);
        if ($objects) {
            return $objects[0];
        }

        return null;
    }
    /**
     * Selects several row from the DB.
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con
     * @return array           Array of selected Objects
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doSelect(Criteria $criteria, PropelPDO $con = null)
    {
        return ReciboEncabezadoPeer::populateObjects(ReciboEncabezadoPeer::doSelectStmt($criteria, $con));
    }
    /**
     * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
     *
     * Use this method directly if you want to work with an executed statement durirectly (for example
     * to perform your own object hydration).
     *
     * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
     * @param      PropelPDO $con The connection to use
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     * @return PDOStatement The executed PDOStatement object.
     * @see        BasePeer::doSelect()
     */
    public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        if (!$criteria->hasSelectClause()) {
            $criteria = clone $criteria;
            ReciboEncabezadoPeer::addSelectColumns($criteria);
        }

        // Set the correct dbName
        $criteria->setDbName(ReciboEncabezadoPeer::DATABASE_NAME);
        // symfony_behaviors behavior
        foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
        {
          call_user_func($sf_hook, 'BaseReciboEncabezadoPeer', $criteria, $con);
        }


        // BasePeer returns a PDOStatement
        return BasePeer::doSelect($criteria, $con);
    }
    /**
     * Adds an object to the instance pool.
     *
     * Propel keeps cached copies of objects in an instance pool when they are retrieved
     * from the database.  In some cases -- especially when you override doSelect*()
     * methods in your stub classes -- you may need to explicitly add objects
     * to the cache in order to ensure that the same objects are always returned by doSelect*()
     * and retrieveByPK*() calls.
     *
     * @param      ReciboEncabezado $obj A ReciboEncabezado object.
     * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
     */
    public static function addInstanceToPool($obj, $key = null)
    {
        if (Propel::isInstancePoolingEnabled()) {
            if ($key === null) {
                $key = (string) $obj->getId();
            } // if key === null
            ReciboEncabezadoPeer::$instances[$key] = $obj;
        }
    }

    /**
     * Removes an object from the instance pool.
     *
     * Propel keeps cached copies of objects in an instance pool when they are retrieved
     * from the database.  In some cases -- especially when you override doDelete
     * methods in your stub classes -- you may need to explicitly remove objects
     * from the cache in order to prevent returning objects that no longer exist.
     *
     * @param      mixed $value A ReciboEncabezado object or a primary key value.
     *
     * @return void
     * @throws PropelException - if the value is invalid.
     */
    public static function removeInstanceFromPool($value)
    {
        if (Propel::isInstancePoolingEnabled() && $value !== null) {
            if (is_object($value) && $value instanceof ReciboEncabezado) {
                $key = (string) $value->getId();
            } elseif (is_scalar($value)) {
                // assume we've been passed a primary key
                $key = (string) $value;
            } else {
                $e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or ReciboEncabezado object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
                throw $e;
            }

            unset(ReciboEncabezadoPeer::$instances[$key]);
        }
    } // removeInstanceFromPool()

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
     * @return   ReciboEncabezado Found object or null if 1) no instance exists for specified key or 2) instance pooling has been disabled.
     * @see        getPrimaryKeyHash()
     */
    public static function getInstanceFromPool($key)
    {
        if (Propel::isInstancePoolingEnabled()) {
            if (isset(ReciboEncabezadoPeer::$instances[$key])) {
                return ReciboEncabezadoPeer::$instances[$key];
            }
        }

        return null; // just to be explicit
    }

    /**
     * Clear the instance pool.
     *
     * @return void
     */
    public static function clearInstancePool()
    {
        ReciboEncabezadoPeer::$instances = array();
    }

    /**
     * Method to invalidate the instance pool of all tables related to recibo_encabezado
     * by a foreign key with ON DELETE CASCADE
     */
    public static function clearRelatedInstancePool()
    {
    }

    /**
     * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
     *
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, a serialize()d version of the primary key will be returned.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @return string A string version of PK or null if the components of primary key in result array are all null.
     */
    public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
    {
        // If the PK cannot be derived from the row, return null.
        if ($row[$startcol] === null) {
            return null;
        }

        return (string) $row[$startcol];
    }

    /**
     * Retrieves the primary key from the DB resultset row
     * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
     * a multi-column primary key, an array of the primary key columns will be returned.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @return mixed The primary key of the row
     */
    public static function getPrimaryKeyFromRow($row, $startcol = 0)
    {

        return (int) $row[$startcol];
    }

    /**
     * The returned array will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function populateObjects(PDOStatement $stmt)
    {
        $results = array();

        // set the class once to avoid overhead in the loop
        $cls = ReciboEncabezadoPeer::getOMClass();
        // populate the object(s)
        while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $key = ReciboEncabezadoPeer::getPrimaryKeyHashFromRow($row, 0);
            if (null !== ($obj = ReciboEncabezadoPeer::getInstanceFromPool($key))) {
                // We no longer rehydrate the object, since this can cause data loss.
                // See http://www.propelorm.org/ticket/509
                // $obj->hydrate($row, 0, true); // rehydrate
                $results[] = $obj;
            } else {
                $obj = new $cls();
                $obj->hydrate($row);
                $results[] = $obj;
                ReciboEncabezadoPeer::addInstanceToPool($obj, $key);
            } // if key exists
        }
        $stmt->closeCursor();

        return $results;
    }
    /**
     * Populates an object of the default type or an object that inherit from the default.
     *
     * @param      array $row PropelPDO resultset row.
     * @param      int $startcol The 0-based offset for reading from the resultset row.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     * @return array (ReciboEncabezado object, last column rank)
     */
    public static function populateObject($row, $startcol = 0)
    {
        $key = ReciboEncabezadoPeer::getPrimaryKeyHashFromRow($row, $startcol);
        if (null !== ($obj = ReciboEncabezadoPeer::getInstanceFromPool($key))) {
            // We no longer rehydrate the object, since this can cause data loss.
            // See http://www.propelorm.org/ticket/509
            // $obj->hydrate($row, $startcol, true); // rehydrate
            $col = $startcol + ReciboEncabezadoPeer::NUM_HYDRATE_COLUMNS;
        } else {
            $cls = ReciboEncabezadoPeer::OM_CLASS;
            $obj = new $cls();
            $col = $obj->hydrate($row, $startcol);
            ReciboEncabezadoPeer::addInstanceToPool($obj, $key);
        }

        return array($obj, $col);
    }

    /**
     * Returns the TableMap related to this peer.
     * This method is not needed for general use but a specific application could have a need.
     * @return TableMap
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function getTableMap()
    {
        return Propel::getDatabaseMap(ReciboEncabezadoPeer::DATABASE_NAME)->getTable(ReciboEncabezadoPeer::TABLE_NAME);
    }

    /**
     * Add a TableMap instance to the database for this peer class.
     */
    public static function buildTableMap()
    {
      $dbMap = Propel::getDatabaseMap(BaseReciboEncabezadoPeer::DATABASE_NAME);
      if (!$dbMap->hasTable(BaseReciboEncabezadoPeer::TABLE_NAME)) {
        $dbMap->addTableObject(new ReciboEncabezadoTableMap());
      }
    }

    /**
     * The class that the Peer will make instances of.
     *
     *
     * @return string ClassName
     */
    public static function getOMClass()
    {
        return ReciboEncabezadoPeer::OM_CLASS;
    }

    /**
     * Performs an INSERT on the database, given a ReciboEncabezado or Criteria object.
     *
     * @param      mixed $values Criteria or ReciboEncabezado object containing data that is used to create the INSERT statement.
     * @param      PropelPDO $con the PropelPDO connection to use
     * @return mixed           The new primary key.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doInsert($values, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        if ($values instanceof Criteria) {
            $criteria = clone $values; // rename for clarity
        } else {
            $criteria = $values->buildCriteria(); // build Criteria from ReciboEncabezado object
        }

        if ($criteria->containsKey(ReciboEncabezadoPeer::ID) && $criteria->keyContainsValue(ReciboEncabezadoPeer::ID) ) {
            throw new PropelException('Cannot insert a value for auto-increment primary key ('.ReciboEncabezadoPeer::ID.')');
        }


        // Set the correct dbName
        $criteria->setDbName(ReciboEncabezadoPeer::DATABASE_NAME);

        try {
            // use transaction because $criteria could contain info
            // for more than one table (I guess, conceivably)
            $con->beginTransaction();
            $pk = BasePeer::doInsert($criteria, $con);
            $con->commit();
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }

        return $pk;
    }

    /**
     * Performs an UPDATE on the database, given a ReciboEncabezado or Criteria object.
     *
     * @param      mixed $values Criteria or ReciboEncabezado object containing data that is used to create the UPDATE statement.
     * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
     * @return int             The number of affected rows (if supported by underlying database driver).
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function doUpdate($values, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $selectCriteria = new Criteria(ReciboEncabezadoPeer::DATABASE_NAME);

        if ($values instanceof Criteria) {
            $criteria = clone $values; // rename for clarity

            $comparison = $criteria->getComparison(ReciboEncabezadoPeer::ID);
            $value = $criteria->remove(ReciboEncabezadoPeer::ID);
            if ($value) {
                $selectCriteria->add(ReciboEncabezadoPeer::ID, $value, $comparison);
            } else {
                $selectCriteria->setPrimaryTableName(ReciboEncabezadoPeer::TABLE_NAME);
            }

        } else { // $values is ReciboEncabezado object
            $criteria = $values->buildCriteria(); // gets full criteria
            $selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
        }

        // set the correct dbName
        $criteria->setDbName(ReciboEncabezadoPeer::DATABASE_NAME);

        return BasePeer::doUpdate($selectCriteria, $criteria, $con);
    }

    /**
     * Deletes all rows from the recibo_encabezado table.
     *
     * @param      PropelPDO $con the connection to use
     * @return int             The number of affected rows (if supported by underlying database driver).
     * @throws PropelException
     */
    public static function doDeleteAll(PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }
        $affectedRows = 0; // initialize var to track total num of affected rows
        try {
            // use transaction because $criteria could contain info
            // for more than one table or we could emulating ON DELETE CASCADE, etc.
            $con->beginTransaction();
            $affectedRows += BasePeer::doDeleteAll(ReciboEncabezadoPeer::TABLE_NAME, $con, ReciboEncabezadoPeer::DATABASE_NAME);
            // Because this db requires some delete cascade/set null emulation, we have to
            // clear the cached instance *after* the emulation has happened (since
            // instances get re-added by the select statement contained therein).
            ReciboEncabezadoPeer::clearInstancePool();
            ReciboEncabezadoPeer::clearRelatedInstancePool();
            $con->commit();

            return $affectedRows;
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs a DELETE on the database, given a ReciboEncabezado or Criteria object OR a primary key value.
     *
     * @param      mixed $values Criteria or ReciboEncabezado object or primary key or array of primary keys
     *              which is used to create the DELETE statement
     * @param      PropelPDO $con the connection to use
     * @return int The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
     *				if supported by native driver or if emulated using Propel.
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
     public static function doDelete($values, PropelPDO $con = null)
     {
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        if ($values instanceof Criteria) {
            // invalidate the cache for all objects of this type, since we have no
            // way of knowing (without running a query) what objects should be invalidated
            // from the cache based on this Criteria.
            ReciboEncabezadoPeer::clearInstancePool();
            // rename for clarity
            $criteria = clone $values;
        } elseif ($values instanceof ReciboEncabezado) { // it's a model object
            // invalidate the cache for this single object
            ReciboEncabezadoPeer::removeInstanceFromPool($values);
            // create criteria based on pk values
            $criteria = $values->buildPkeyCriteria();
        } else { // it's a primary key, or an array of pks
            $criteria = new Criteria(ReciboEncabezadoPeer::DATABASE_NAME);
            $criteria->add(ReciboEncabezadoPeer::ID, (array) $values, Criteria::IN);
            // invalidate the cache for this object(s)
            foreach ((array) $values as $singleval) {
                ReciboEncabezadoPeer::removeInstanceFromPool($singleval);
            }
        }

        // Set the correct dbName
        $criteria->setDbName(ReciboEncabezadoPeer::DATABASE_NAME);

        $affectedRows = 0; // initialize var to track total num of affected rows

        try {
            // use transaction because $criteria could contain info
            // for more than one table or we could emulating ON DELETE CASCADE, etc.
            $con->beginTransaction();

            $affectedRows += BasePeer::doDelete($criteria, $con);
            ReciboEncabezadoPeer::clearRelatedInstancePool();
            $con->commit();

            return $affectedRows;
        } catch (PropelException $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Validates all modified columns of given ReciboEncabezado object.
     * If parameter $columns is either a single column name or an array of column names
     * than only those columns are validated.
     *
     * NOTICE: This does not apply to primary or foreign keys for now.
     *
     * @param      ReciboEncabezado $obj The object to validate.
     * @param      mixed $cols Column name or array of column names.
     *
     * @return mixed TRUE if all columns are valid or the error message of the first invalid column.
     */
    public static function doValidate($obj, $cols = null)
    {
        $columns = array();

        if ($cols) {
            $dbMap = Propel::getDatabaseMap(ReciboEncabezadoPeer::DATABASE_NAME);
            $tableMap = $dbMap->getTable(ReciboEncabezadoPeer::TABLE_NAME);

            if (! is_array($cols)) {
                $cols = array($cols);
            }

            foreach ($cols as $colName) {
                if ($tableMap->hasColumn($colName)) {
                    $get = 'get' . $tableMap->getColumn($colName)->getPhpName();
                    $columns[$colName] = $obj->$get();
                }
            }
        } else {

        }

        return BasePeer::doValidate(ReciboEncabezadoPeer::DATABASE_NAME, ReciboEncabezadoPeer::TABLE_NAME, $columns);
    }

    /**
     * Retrieve a single object by pkey.
     *
     * @param      int $pk the primary key.
     * @param      PropelPDO $con the connection to use
     * @return ReciboEncabezado
     */
    public static function retrieveByPK($pk, PropelPDO $con = null)
    {

        if (null !== ($obj = ReciboEncabezadoPeer::getInstanceFromPool((string) $pk))) {
            return $obj;
        }

        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $criteria = new Criteria(ReciboEncabezadoPeer::DATABASE_NAME);
        $criteria->add(ReciboEncabezadoPeer::ID, $pk);

        $v = ReciboEncabezadoPeer::doSelect($criteria, $con);

        return !empty($v) > 0 ? $v[0] : null;
    }

    /**
     * Retrieve multiple objects by pkey.
     *
     * @param      array $pks List of primary keys
     * @param      PropelPDO $con the connection to use
     * @return ReciboEncabezado[]
     * @throws PropelException Any exceptions caught during processing will be
     *		 rethrown wrapped into a PropelException.
     */
    public static function retrieveByPKs($pks, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        $objs = null;
        if (empty($pks)) {
            $objs = array();
        } else {
            $criteria = new Criteria(ReciboEncabezadoPeer::DATABASE_NAME);
            $criteria->add(ReciboEncabezadoPeer::ID, $pks, Criteria::IN);
            $objs = ReciboEncabezadoPeer::doSelect($criteria, $con);
        }

        return $objs;
    }

    // symfony behavior

    /**
     * Returns an array of arrays that contain columns in each unique index.
     *
     * @return array
     */
    static public function getUniqueColumnNames()
    {
      return array();
    }

    // symfony_behaviors behavior

    /**
     * Returns the name of the hook to call from inside the supplied method.
     *
     * @param string $method The calling method
     *
     * @return string A hook name for {@link sfMixer}
     *
     * @throws LogicException If the method name is not recognized
     */
    static private function getMixerPreSelectHook($method)
    {
      if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
      {
        return sprintf('BaseReciboEncabezadoPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
      }

      throw new LogicException(sprintf('Unrecognized function "%s"', $method));
    }

} // BaseReciboEncabezadoPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseReciboEncabezadoPeer::buildTableMap();

