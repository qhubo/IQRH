<?php


/**
 * Base class that represents a query for the 'recibo_encabezado' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 12/14/18 21:36:48
 *
 * @method ReciboEncabezadoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method ReciboEncabezadoQuery orderByPlanillaResumenId($order = Criteria::ASC) Order by the Planilla_Resumen_id column
 * @method ReciboEncabezadoQuery orderByEmpleado($order = Criteria::ASC) Order by the empleado column
 * @method ReciboEncabezadoQuery orderByEmpleadoProyectoId($order = Criteria::ASC) Order by the empleado_proyecto_id column
 * @method ReciboEncabezadoQuery orderBySueldoBase($order = Criteria::ASC) Order by the sueldo_base column
 * @method ReciboEncabezadoQuery orderByBonificacionBase($order = Criteria::ASC) Order by the bonificacion_base column
 * @method ReciboEncabezadoQuery orderByDiasAusencias($order = Criteria::ASC) Order by the dias_ausencias column
 * @method ReciboEncabezadoQuery orderByDiasSuspendido($order = Criteria::ASC) Order by the dias_suspendido column
 * @method ReciboEncabezadoQuery orderBySeptimos($order = Criteria::ASC) Order by the septimos column
 * @method ReciboEncabezadoQuery orderByTotalDescuentos($order = Criteria::ASC) Order by the total_descuentos column
 * @method ReciboEncabezadoQuery orderByTotalIngresos($order = Criteria::ASC) Order by the total_ingresos column
 * @method ReciboEncabezadoQuery orderByTotalExtras($order = Criteria::ASC) Order by the total_extras column
 * @method ReciboEncabezadoQuery orderByTotalSueldoLiquido($order = Criteria::ASC) Order by the total_sueldo_liquido column
 * @method ReciboEncabezadoQuery orderByAlta($order = Criteria::ASC) Order by the alta column
 * @method ReciboEncabezadoQuery orderByBaja($order = Criteria::ASC) Order by the baja column
 * @method ReciboEncabezadoQuery orderByCodigo($order = Criteria::ASC) Order by the codigo column
 * @method ReciboEncabezadoQuery orderByPuesto($order = Criteria::ASC) Order by the puesto column
 * @method ReciboEncabezadoQuery orderByDepartamento($order = Criteria::ASC) Order by the departamento column
 * @method ReciboEncabezadoQuery orderByDiasBase($order = Criteria::ASC) Order by the dias_base column
 * @method ReciboEncabezadoQuery orderByBloque($order = Criteria::ASC) Order by the bloque column
 * @method ReciboEncabezadoQuery orderByInicio($order = Criteria::ASC) Order by the inicio column
 * @method ReciboEncabezadoQuery orderByFin($order = Criteria::ASC) Order by the fin column
 * @method ReciboEncabezadoQuery orderByNumero($order = Criteria::ASC) Order by the numero column
 * @method ReciboEncabezadoQuery orderByLaborados($order = Criteria::ASC) Order by the laborados column
 * @method ReciboEncabezadoQuery orderByCabeceraIn($order = Criteria::ASC) Order by the cabecera_in column
 *
 * @method ReciboEncabezadoQuery groupById() Group by the id column
 * @method ReciboEncabezadoQuery groupByPlanillaResumenId() Group by the Planilla_Resumen_id column
 * @method ReciboEncabezadoQuery groupByEmpleado() Group by the empleado column
 * @method ReciboEncabezadoQuery groupByEmpleadoProyectoId() Group by the empleado_proyecto_id column
 * @method ReciboEncabezadoQuery groupBySueldoBase() Group by the sueldo_base column
 * @method ReciboEncabezadoQuery groupByBonificacionBase() Group by the bonificacion_base column
 * @method ReciboEncabezadoQuery groupByDiasAusencias() Group by the dias_ausencias column
 * @method ReciboEncabezadoQuery groupByDiasSuspendido() Group by the dias_suspendido column
 * @method ReciboEncabezadoQuery groupBySeptimos() Group by the septimos column
 * @method ReciboEncabezadoQuery groupByTotalDescuentos() Group by the total_descuentos column
 * @method ReciboEncabezadoQuery groupByTotalIngresos() Group by the total_ingresos column
 * @method ReciboEncabezadoQuery groupByTotalExtras() Group by the total_extras column
 * @method ReciboEncabezadoQuery groupByTotalSueldoLiquido() Group by the total_sueldo_liquido column
 * @method ReciboEncabezadoQuery groupByAlta() Group by the alta column
 * @method ReciboEncabezadoQuery groupByBaja() Group by the baja column
 * @method ReciboEncabezadoQuery groupByCodigo() Group by the codigo column
 * @method ReciboEncabezadoQuery groupByPuesto() Group by the puesto column
 * @method ReciboEncabezadoQuery groupByDepartamento() Group by the departamento column
 * @method ReciboEncabezadoQuery groupByDiasBase() Group by the dias_base column
 * @method ReciboEncabezadoQuery groupByBloque() Group by the bloque column
 * @method ReciboEncabezadoQuery groupByInicio() Group by the inicio column
 * @method ReciboEncabezadoQuery groupByFin() Group by the fin column
 * @method ReciboEncabezadoQuery groupByNumero() Group by the numero column
 * @method ReciboEncabezadoQuery groupByLaborados() Group by the laborados column
 * @method ReciboEncabezadoQuery groupByCabeceraIn() Group by the cabecera_in column
 *
 * @method ReciboEncabezadoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method ReciboEncabezadoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method ReciboEncabezadoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method ReciboEncabezado findOne(PropelPDO $con = null) Return the first ReciboEncabezado matching the query
 * @method ReciboEncabezado findOneOrCreate(PropelPDO $con = null) Return the first ReciboEncabezado matching the query, or a new ReciboEncabezado object populated from the query conditions when no match is found
 *
 * @method ReciboEncabezado findOneById(int $id) Return the first ReciboEncabezado filtered by the id column
 * @method ReciboEncabezado findOneByPlanillaResumenId(int $Planilla_Resumen_id) Return the first ReciboEncabezado filtered by the Planilla_Resumen_id column
 * @method ReciboEncabezado findOneByEmpleado(string $empleado) Return the first ReciboEncabezado filtered by the empleado column
 * @method ReciboEncabezado findOneByEmpleadoProyectoId(int $empleado_proyecto_id) Return the first ReciboEncabezado filtered by the empleado_proyecto_id column
 * @method ReciboEncabezado findOneBySueldoBase(double $sueldo_base) Return the first ReciboEncabezado filtered by the sueldo_base column
 * @method ReciboEncabezado findOneByBonificacionBase(string $bonificacion_base) Return the first ReciboEncabezado filtered by the bonificacion_base column
 * @method ReciboEncabezado findOneByDiasAusencias(double $dias_ausencias) Return the first ReciboEncabezado filtered by the dias_ausencias column
 * @method ReciboEncabezado findOneByDiasSuspendido(double $dias_suspendido) Return the first ReciboEncabezado filtered by the dias_suspendido column
 * @method ReciboEncabezado findOneBySeptimos(double $septimos) Return the first ReciboEncabezado filtered by the septimos column
 * @method ReciboEncabezado findOneByTotalDescuentos(double $total_descuentos) Return the first ReciboEncabezado filtered by the total_descuentos column
 * @method ReciboEncabezado findOneByTotalIngresos(double $total_ingresos) Return the first ReciboEncabezado filtered by the total_ingresos column
 * @method ReciboEncabezado findOneByTotalExtras(double $total_extras) Return the first ReciboEncabezado filtered by the total_extras column
 * @method ReciboEncabezado findOneByTotalSueldoLiquido(double $total_sueldo_liquido) Return the first ReciboEncabezado filtered by the total_sueldo_liquido column
 * @method ReciboEncabezado findOneByAlta(string $alta) Return the first ReciboEncabezado filtered by the alta column
 * @method ReciboEncabezado findOneByBaja(string $baja) Return the first ReciboEncabezado filtered by the baja column
 * @method ReciboEncabezado findOneByCodigo(string $codigo) Return the first ReciboEncabezado filtered by the codigo column
 * @method ReciboEncabezado findOneByPuesto(string $puesto) Return the first ReciboEncabezado filtered by the puesto column
 * @method ReciboEncabezado findOneByDepartamento(string $departamento) Return the first ReciboEncabezado filtered by the departamento column
 * @method ReciboEncabezado findOneByDiasBase(double $dias_base) Return the first ReciboEncabezado filtered by the dias_base column
 * @method ReciboEncabezado findOneByBloque(string $bloque) Return the first ReciboEncabezado filtered by the bloque column
 * @method ReciboEncabezado findOneByInicio(string $inicio) Return the first ReciboEncabezado filtered by the inicio column
 * @method ReciboEncabezado findOneByFin(string $fin) Return the first ReciboEncabezado filtered by the fin column
 * @method ReciboEncabezado findOneByNumero(string $numero) Return the first ReciboEncabezado filtered by the numero column
 * @method ReciboEncabezado findOneByLaborados(double $laborados) Return the first ReciboEncabezado filtered by the laborados column
 * @method ReciboEncabezado findOneByCabeceraIn(int $cabecera_in) Return the first ReciboEncabezado filtered by the cabecera_in column
 *
 * @method array findById(int $id) Return ReciboEncabezado objects filtered by the id column
 * @method array findByPlanillaResumenId(int $Planilla_Resumen_id) Return ReciboEncabezado objects filtered by the Planilla_Resumen_id column
 * @method array findByEmpleado(string $empleado) Return ReciboEncabezado objects filtered by the empleado column
 * @method array findByEmpleadoProyectoId(int $empleado_proyecto_id) Return ReciboEncabezado objects filtered by the empleado_proyecto_id column
 * @method array findBySueldoBase(double $sueldo_base) Return ReciboEncabezado objects filtered by the sueldo_base column
 * @method array findByBonificacionBase(string $bonificacion_base) Return ReciboEncabezado objects filtered by the bonificacion_base column
 * @method array findByDiasAusencias(double $dias_ausencias) Return ReciboEncabezado objects filtered by the dias_ausencias column
 * @method array findByDiasSuspendido(double $dias_suspendido) Return ReciboEncabezado objects filtered by the dias_suspendido column
 * @method array findBySeptimos(double $septimos) Return ReciboEncabezado objects filtered by the septimos column
 * @method array findByTotalDescuentos(double $total_descuentos) Return ReciboEncabezado objects filtered by the total_descuentos column
 * @method array findByTotalIngresos(double $total_ingresos) Return ReciboEncabezado objects filtered by the total_ingresos column
 * @method array findByTotalExtras(double $total_extras) Return ReciboEncabezado objects filtered by the total_extras column
 * @method array findByTotalSueldoLiquido(double $total_sueldo_liquido) Return ReciboEncabezado objects filtered by the total_sueldo_liquido column
 * @method array findByAlta(string $alta) Return ReciboEncabezado objects filtered by the alta column
 * @method array findByBaja(string $baja) Return ReciboEncabezado objects filtered by the baja column
 * @method array findByCodigo(string $codigo) Return ReciboEncabezado objects filtered by the codigo column
 * @method array findByPuesto(string $puesto) Return ReciboEncabezado objects filtered by the puesto column
 * @method array findByDepartamento(string $departamento) Return ReciboEncabezado objects filtered by the departamento column
 * @method array findByDiasBase(double $dias_base) Return ReciboEncabezado objects filtered by the dias_base column
 * @method array findByBloque(string $bloque) Return ReciboEncabezado objects filtered by the bloque column
 * @method array findByInicio(string $inicio) Return ReciboEncabezado objects filtered by the inicio column
 * @method array findByFin(string $fin) Return ReciboEncabezado objects filtered by the fin column
 * @method array findByNumero(string $numero) Return ReciboEncabezado objects filtered by the numero column
 * @method array findByLaborados(double $laborados) Return ReciboEncabezado objects filtered by the laborados column
 * @method array findByCabeceraIn(int $cabecera_in) Return ReciboEncabezado objects filtered by the cabecera_in column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseReciboEncabezadoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseReciboEncabezadoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'ReciboEncabezado', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new ReciboEncabezadoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     ReciboEncabezadoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return ReciboEncabezadoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof ReciboEncabezadoQuery) {
            return $criteria;
        }
        $query = new ReciboEncabezadoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   ReciboEncabezado|ReciboEncabezado[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = ReciboEncabezadoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   ReciboEncabezado A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `PLANILLA_RESUMEN_ID`, `EMPLEADO`, `EMPLEADO_PROYECTO_ID`, `SUELDO_BASE`, `BONIFICACION_BASE`, `DIAS_AUSENCIAS`, `DIAS_SUSPENDIDO`, `SEPTIMOS`, `TOTAL_DESCUENTOS`, `TOTAL_INGRESOS`, `TOTAL_EXTRAS`, `TOTAL_SUELDO_LIQUIDO`, `ALTA`, `BAJA`, `CODIGO`, `PUESTO`, `DEPARTAMENTO`, `DIAS_BASE`, `BLOQUE`, `INICIO`, `FIN`, `NUMERO`, `LABORADOS`, `CABECERA_IN` FROM `recibo_encabezado` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new ReciboEncabezado();
            $obj->hydrate($row);
            ReciboEncabezadoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return ReciboEncabezado|ReciboEncabezado[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|ReciboEncabezado[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(ReciboEncabezadoPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(ReciboEncabezadoPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the Planilla_Resumen_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPlanillaResumenId(1234); // WHERE Planilla_Resumen_id = 1234
     * $query->filterByPlanillaResumenId(array(12, 34)); // WHERE Planilla_Resumen_id IN (12, 34)
     * $query->filterByPlanillaResumenId(array('min' => 12)); // WHERE Planilla_Resumen_id > 12
     * </code>
     *
     * @param     mixed $planillaResumenId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByPlanillaResumenId($planillaResumenId = null, $comparison = null)
    {
        if (is_array($planillaResumenId)) {
            $useMinMax = false;
            if (isset($planillaResumenId['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID, $planillaResumenId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($planillaResumenId['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID, $planillaResumenId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID, $planillaResumenId, $comparison);
    }

    /**
     * Filter the query on the empleado column
     *
     * Example usage:
     * <code>
     * $query->filterByEmpleado('fooValue');   // WHERE empleado = 'fooValue'
     * $query->filterByEmpleado('%fooValue%'); // WHERE empleado LIKE '%fooValue%'
     * </code>
     *
     * @param     string $empleado The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByEmpleado($empleado = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($empleado)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $empleado)) {
                $empleado = str_replace('*', '%', $empleado);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::EMPLEADO, $empleado, $comparison);
    }

    /**
     * Filter the query on the empleado_proyecto_id column
     *
     * Example usage:
     * <code>
     * $query->filterByEmpleadoProyectoId(1234); // WHERE empleado_proyecto_id = 1234
     * $query->filterByEmpleadoProyectoId(array(12, 34)); // WHERE empleado_proyecto_id IN (12, 34)
     * $query->filterByEmpleadoProyectoId(array('min' => 12)); // WHERE empleado_proyecto_id > 12
     * </code>
     *
     * @param     mixed $empleadoProyectoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByEmpleadoProyectoId($empleadoProyectoId = null, $comparison = null)
    {
        if (is_array($empleadoProyectoId)) {
            $useMinMax = false;
            if (isset($empleadoProyectoId['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID, $empleadoProyectoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($empleadoProyectoId['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID, $empleadoProyectoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID, $empleadoProyectoId, $comparison);
    }

    /**
     * Filter the query on the sueldo_base column
     *
     * Example usage:
     * <code>
     * $query->filterBySueldoBase(1234); // WHERE sueldo_base = 1234
     * $query->filterBySueldoBase(array(12, 34)); // WHERE sueldo_base IN (12, 34)
     * $query->filterBySueldoBase(array('min' => 12)); // WHERE sueldo_base > 12
     * </code>
     *
     * @param     mixed $sueldoBase The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterBySueldoBase($sueldoBase = null, $comparison = null)
    {
        if (is_array($sueldoBase)) {
            $useMinMax = false;
            if (isset($sueldoBase['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::SUELDO_BASE, $sueldoBase['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($sueldoBase['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::SUELDO_BASE, $sueldoBase['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::SUELDO_BASE, $sueldoBase, $comparison);
    }

    /**
     * Filter the query on the bonificacion_base column
     *
     * Example usage:
     * <code>
     * $query->filterByBonificacionBase('fooValue');   // WHERE bonificacion_base = 'fooValue'
     * $query->filterByBonificacionBase('%fooValue%'); // WHERE bonificacion_base LIKE '%fooValue%'
     * </code>
     *
     * @param     string $bonificacionBase The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByBonificacionBase($bonificacionBase = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($bonificacionBase)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $bonificacionBase)) {
                $bonificacionBase = str_replace('*', '%', $bonificacionBase);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::BONIFICACION_BASE, $bonificacionBase, $comparison);
    }

    /**
     * Filter the query on the dias_ausencias column
     *
     * Example usage:
     * <code>
     * $query->filterByDiasAusencias(1234); // WHERE dias_ausencias = 1234
     * $query->filterByDiasAusencias(array(12, 34)); // WHERE dias_ausencias IN (12, 34)
     * $query->filterByDiasAusencias(array('min' => 12)); // WHERE dias_ausencias > 12
     * </code>
     *
     * @param     mixed $diasAusencias The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByDiasAusencias($diasAusencias = null, $comparison = null)
    {
        if (is_array($diasAusencias)) {
            $useMinMax = false;
            if (isset($diasAusencias['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_AUSENCIAS, $diasAusencias['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($diasAusencias['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_AUSENCIAS, $diasAusencias['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_AUSENCIAS, $diasAusencias, $comparison);
    }

    /**
     * Filter the query on the dias_suspendido column
     *
     * Example usage:
     * <code>
     * $query->filterByDiasSuspendido(1234); // WHERE dias_suspendido = 1234
     * $query->filterByDiasSuspendido(array(12, 34)); // WHERE dias_suspendido IN (12, 34)
     * $query->filterByDiasSuspendido(array('min' => 12)); // WHERE dias_suspendido > 12
     * </code>
     *
     * @param     mixed $diasSuspendido The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByDiasSuspendido($diasSuspendido = null, $comparison = null)
    {
        if (is_array($diasSuspendido)) {
            $useMinMax = false;
            if (isset($diasSuspendido['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_SUSPENDIDO, $diasSuspendido['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($diasSuspendido['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_SUSPENDIDO, $diasSuspendido['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_SUSPENDIDO, $diasSuspendido, $comparison);
    }

    /**
     * Filter the query on the septimos column
     *
     * Example usage:
     * <code>
     * $query->filterBySeptimos(1234); // WHERE septimos = 1234
     * $query->filterBySeptimos(array(12, 34)); // WHERE septimos IN (12, 34)
     * $query->filterBySeptimos(array('min' => 12)); // WHERE septimos > 12
     * </code>
     *
     * @param     mixed $septimos The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterBySeptimos($septimos = null, $comparison = null)
    {
        if (is_array($septimos)) {
            $useMinMax = false;
            if (isset($septimos['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::SEPTIMOS, $septimos['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($septimos['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::SEPTIMOS, $septimos['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::SEPTIMOS, $septimos, $comparison);
    }

    /**
     * Filter the query on the total_descuentos column
     *
     * Example usage:
     * <code>
     * $query->filterByTotalDescuentos(1234); // WHERE total_descuentos = 1234
     * $query->filterByTotalDescuentos(array(12, 34)); // WHERE total_descuentos IN (12, 34)
     * $query->filterByTotalDescuentos(array('min' => 12)); // WHERE total_descuentos > 12
     * </code>
     *
     * @param     mixed $totalDescuentos The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByTotalDescuentos($totalDescuentos = null, $comparison = null)
    {
        if (is_array($totalDescuentos)) {
            $useMinMax = false;
            if (isset($totalDescuentos['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_DESCUENTOS, $totalDescuentos['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($totalDescuentos['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_DESCUENTOS, $totalDescuentos['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_DESCUENTOS, $totalDescuentos, $comparison);
    }

    /**
     * Filter the query on the total_ingresos column
     *
     * Example usage:
     * <code>
     * $query->filterByTotalIngresos(1234); // WHERE total_ingresos = 1234
     * $query->filterByTotalIngresos(array(12, 34)); // WHERE total_ingresos IN (12, 34)
     * $query->filterByTotalIngresos(array('min' => 12)); // WHERE total_ingresos > 12
     * </code>
     *
     * @param     mixed $totalIngresos The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByTotalIngresos($totalIngresos = null, $comparison = null)
    {
        if (is_array($totalIngresos)) {
            $useMinMax = false;
            if (isset($totalIngresos['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_INGRESOS, $totalIngresos['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($totalIngresos['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_INGRESOS, $totalIngresos['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_INGRESOS, $totalIngresos, $comparison);
    }

    /**
     * Filter the query on the total_extras column
     *
     * Example usage:
     * <code>
     * $query->filterByTotalExtras(1234); // WHERE total_extras = 1234
     * $query->filterByTotalExtras(array(12, 34)); // WHERE total_extras IN (12, 34)
     * $query->filterByTotalExtras(array('min' => 12)); // WHERE total_extras > 12
     * </code>
     *
     * @param     mixed $totalExtras The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByTotalExtras($totalExtras = null, $comparison = null)
    {
        if (is_array($totalExtras)) {
            $useMinMax = false;
            if (isset($totalExtras['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_EXTRAS, $totalExtras['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($totalExtras['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_EXTRAS, $totalExtras['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_EXTRAS, $totalExtras, $comparison);
    }

    /**
     * Filter the query on the total_sueldo_liquido column
     *
     * Example usage:
     * <code>
     * $query->filterByTotalSueldoLiquido(1234); // WHERE total_sueldo_liquido = 1234
     * $query->filterByTotalSueldoLiquido(array(12, 34)); // WHERE total_sueldo_liquido IN (12, 34)
     * $query->filterByTotalSueldoLiquido(array('min' => 12)); // WHERE total_sueldo_liquido > 12
     * </code>
     *
     * @param     mixed $totalSueldoLiquido The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByTotalSueldoLiquido($totalSueldoLiquido = null, $comparison = null)
    {
        if (is_array($totalSueldoLiquido)) {
            $useMinMax = false;
            if (isset($totalSueldoLiquido['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO, $totalSueldoLiquido['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($totalSueldoLiquido['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO, $totalSueldoLiquido['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO, $totalSueldoLiquido, $comparison);
    }

    /**
     * Filter the query on the alta column
     *
     * Example usage:
     * <code>
     * $query->filterByAlta('fooValue');   // WHERE alta = 'fooValue'
     * $query->filterByAlta('%fooValue%'); // WHERE alta LIKE '%fooValue%'
     * </code>
     *
     * @param     string $alta The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByAlta($alta = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($alta)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $alta)) {
                $alta = str_replace('*', '%', $alta);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::ALTA, $alta, $comparison);
    }

    /**
     * Filter the query on the baja column
     *
     * Example usage:
     * <code>
     * $query->filterByBaja('fooValue');   // WHERE baja = 'fooValue'
     * $query->filterByBaja('%fooValue%'); // WHERE baja LIKE '%fooValue%'
     * </code>
     *
     * @param     string $baja The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByBaja($baja = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($baja)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $baja)) {
                $baja = str_replace('*', '%', $baja);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::BAJA, $baja, $comparison);
    }

    /**
     * Filter the query on the codigo column
     *
     * Example usage:
     * <code>
     * $query->filterByCodigo('fooValue');   // WHERE codigo = 'fooValue'
     * $query->filterByCodigo('%fooValue%'); // WHERE codigo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codigo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByCodigo($codigo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codigo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codigo)) {
                $codigo = str_replace('*', '%', $codigo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::CODIGO, $codigo, $comparison);
    }

    /**
     * Filter the query on the puesto column
     *
     * Example usage:
     * <code>
     * $query->filterByPuesto('fooValue');   // WHERE puesto = 'fooValue'
     * $query->filterByPuesto('%fooValue%'); // WHERE puesto LIKE '%fooValue%'
     * </code>
     *
     * @param     string $puesto The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByPuesto($puesto = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($puesto)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $puesto)) {
                $puesto = str_replace('*', '%', $puesto);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::PUESTO, $puesto, $comparison);
    }

    /**
     * Filter the query on the departamento column
     *
     * Example usage:
     * <code>
     * $query->filterByDepartamento('fooValue');   // WHERE departamento = 'fooValue'
     * $query->filterByDepartamento('%fooValue%'); // WHERE departamento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $departamento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByDepartamento($departamento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($departamento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $departamento)) {
                $departamento = str_replace('*', '%', $departamento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::DEPARTAMENTO, $departamento, $comparison);
    }

    /**
     * Filter the query on the dias_base column
     *
     * Example usage:
     * <code>
     * $query->filterByDiasBase(1234); // WHERE dias_base = 1234
     * $query->filterByDiasBase(array(12, 34)); // WHERE dias_base IN (12, 34)
     * $query->filterByDiasBase(array('min' => 12)); // WHERE dias_base > 12
     * </code>
     *
     * @param     mixed $diasBase The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByDiasBase($diasBase = null, $comparison = null)
    {
        if (is_array($diasBase)) {
            $useMinMax = false;
            if (isset($diasBase['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_BASE, $diasBase['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($diasBase['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_BASE, $diasBase['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::DIAS_BASE, $diasBase, $comparison);
    }

    /**
     * Filter the query on the bloque column
     *
     * Example usage:
     * <code>
     * $query->filterByBloque('fooValue');   // WHERE bloque = 'fooValue'
     * $query->filterByBloque('%fooValue%'); // WHERE bloque LIKE '%fooValue%'
     * </code>
     *
     * @param     string $bloque The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByBloque($bloque = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($bloque)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $bloque)) {
                $bloque = str_replace('*', '%', $bloque);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::BLOQUE, $bloque, $comparison);
    }

    /**
     * Filter the query on the inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByInicio('fooValue');   // WHERE inicio = 'fooValue'
     * $query->filterByInicio('%fooValue%'); // WHERE inicio LIKE '%fooValue%'
     * </code>
     *
     * @param     string $inicio The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByInicio($inicio = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($inicio)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $inicio)) {
                $inicio = str_replace('*', '%', $inicio);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::INICIO, $inicio, $comparison);
    }

    /**
     * Filter the query on the fin column
     *
     * Example usage:
     * <code>
     * $query->filterByFin('fooValue');   // WHERE fin = 'fooValue'
     * $query->filterByFin('%fooValue%'); // WHERE fin LIKE '%fooValue%'
     * </code>
     *
     * @param     string $fin The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByFin($fin = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($fin)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $fin)) {
                $fin = str_replace('*', '%', $fin);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::FIN, $fin, $comparison);
    }

    /**
     * Filter the query on the numero column
     *
     * Example usage:
     * <code>
     * $query->filterByNumero('fooValue');   // WHERE numero = 'fooValue'
     * $query->filterByNumero('%fooValue%'); // WHERE numero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $numero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByNumero($numero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($numero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $numero)) {
                $numero = str_replace('*', '%', $numero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::NUMERO, $numero, $comparison);
    }

    /**
     * Filter the query on the laborados column
     *
     * Example usage:
     * <code>
     * $query->filterByLaborados(1234); // WHERE laborados = 1234
     * $query->filterByLaborados(array(12, 34)); // WHERE laborados IN (12, 34)
     * $query->filterByLaborados(array('min' => 12)); // WHERE laborados > 12
     * </code>
     *
     * @param     mixed $laborados The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByLaborados($laborados = null, $comparison = null)
    {
        if (is_array($laborados)) {
            $useMinMax = false;
            if (isset($laborados['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::LABORADOS, $laborados['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($laborados['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::LABORADOS, $laborados['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::LABORADOS, $laborados, $comparison);
    }

    /**
     * Filter the query on the cabecera_in column
     *
     * Example usage:
     * <code>
     * $query->filterByCabeceraIn(1234); // WHERE cabecera_in = 1234
     * $query->filterByCabeceraIn(array(12, 34)); // WHERE cabecera_in IN (12, 34)
     * $query->filterByCabeceraIn(array('min' => 12)); // WHERE cabecera_in > 12
     * </code>
     *
     * @param     mixed $cabeceraIn The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function filterByCabeceraIn($cabeceraIn = null, $comparison = null)
    {
        if (is_array($cabeceraIn)) {
            $useMinMax = false;
            if (isset($cabeceraIn['min'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::CABECERA_IN, $cabeceraIn['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cabeceraIn['max'])) {
                $this->addUsingAlias(ReciboEncabezadoPeer::CABECERA_IN, $cabeceraIn['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ReciboEncabezadoPeer::CABECERA_IN, $cabeceraIn, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   ReciboEncabezado $reciboEncabezado Object to remove from the list of results
     *
     * @return ReciboEncabezadoQuery The current query, for fluid interface
     */
    public function prune($reciboEncabezado = null)
    {
        if ($reciboEncabezado) {
            $this->addUsingAlias(ReciboEncabezadoPeer::ID, $reciboEncabezado->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
