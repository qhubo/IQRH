<?php


/**
 * Base class that represents a row from the 'proyecto' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 07/30/19 18:41:47
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseProyecto extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'ProyectoPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        ProyectoPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the codigo field.
     * @var        string
     */
    protected $codigo;

    /**
     * The value for the nombre field.
     * @var        string
     */
    protected $nombre;

    /**
     * The value for the telefono field.
     * @var        string
     */
    protected $telefono;

    /**
     * The value for the contacto field.
     * @var        string
     */
    protected $contacto;

    /**
     * The value for the created_by field.
     * @var        string
     */
    protected $created_by;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the updated_by field.
     * @var        string
     */
    protected $updated_by;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the nit_proyecto field.
     * @var        string
     */
    protected $nit_proyecto;

    /**
     * The value for the razon_social field.
     * @var        string
     */
    protected $razon_social;

    /**
     * The value for the nomenclatura field.
     * @var        string
     */
    protected $nomenclatura;

    /**
     * The value for the ubicacion_geografica field.
     * @var        string
     */
    protected $ubicacion_geografica;

    /**
     * The value for the documento_representante field.
     * @var        string
     */
    protected $documento_representante;

    /**
     * The value for the representante_legal field.
     * @var        string
     */
    protected $representante_legal;

    /**
     * The value for the gerente field.
     * @var        string
     */
    protected $gerente;

    /**
     * The value for the residente field.
     * @var        string
     */
    protected $residente;

    /**
     * The value for the departamento field.
     * @var        string
     */
    protected $departamento;

    /**
     * The value for the municipio field.
     * @var        string
     */
    protected $municipio;

    /**
     * The value for the interno field.
     * @var        string
     */
    protected $interno;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [codigo] column value.
     *
     * @return string
     */
    public function getCodigo()
    {
        return $this->codigo;
    }

    /**
     * Get the [nombre] column value.
     *
     * @return string
     */
    public function getNombre()
    {
        return $this->nombre;
    }

    /**
     * Get the [telefono] column value.
     *
     * @return string
     */
    public function getTelefono()
    {
        return $this->telefono;
    }

    /**
     * Get the [contacto] column value.
     *
     * @return string
     */
    public function getContacto()
    {
        return $this->contacto;
    }

    /**
     * Get the [created_by] column value.
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->created_by;
    }

    /**
     * Get the [created_at] column value.
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Get the [updated_by] column value.
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->updated_by;
    }

    /**
     * Get the [updated_at] column value.
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }

    /**
     * Get the [nit_proyecto] column value.
     *
     * @return string
     */
    public function getNitProyecto()
    {
        return $this->nit_proyecto;
    }

    /**
     * Get the [razon_social] column value.
     *
     * @return string
     */
    public function getRazonSocial()
    {
        return $this->razon_social;
    }

    /**
     * Get the [nomenclatura] column value.
     *
     * @return string
     */
    public function getNomenclatura()
    {
        return $this->nomenclatura;
    }

    /**
     * Get the [ubicacion_geografica] column value.
     *
     * @return string
     */
    public function getUbicacionGeografica()
    {
        return $this->ubicacion_geografica;
    }

    /**
     * Get the [documento_representante] column value.
     *
     * @return string
     */
    public function getDocumentoRepresentante()
    {
        return $this->documento_representante;
    }

    /**
     * Get the [representante_legal] column value.
     *
     * @return string
     */
    public function getRepresentanteLegal()
    {
        return $this->representante_legal;
    }

    /**
     * Get the [gerente] column value.
     *
     * @return string
     */
    public function getGerente()
    {
        return $this->gerente;
    }

    /**
     * Get the [residente] column value.
     *
     * @return string
     */
    public function getResidente()
    {
        return $this->residente;
    }

    /**
     * Get the [departamento] column value.
     *
     * @return string
     */
    public function getDepartamento()
    {
        return $this->departamento;
    }

    /**
     * Get the [municipio] column value.
     *
     * @return string
     */
    public function getMunicipio()
    {
        return $this->municipio;
    }

    /**
     * Get the [interno] column value.
     *
     * @return string
     */
    public function getInterno()
    {
        return $this->interno;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = ProyectoPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [codigo] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setCodigo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->codigo !== $v) {
            $this->codigo = $v;
            $this->modifiedColumns[] = ProyectoPeer::CODIGO;
        }


        return $this;
    } // setCodigo()

    /**
     * Set the value of [nombre] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setNombre($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->nombre !== $v) {
            $this->nombre = $v;
            $this->modifiedColumns[] = ProyectoPeer::NOMBRE;
        }


        return $this;
    } // setNombre()

    /**
     * Set the value of [telefono] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setTelefono($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->telefono !== $v) {
            $this->telefono = $v;
            $this->modifiedColumns[] = ProyectoPeer::TELEFONO;
        }


        return $this;
    } // setTelefono()

    /**
     * Set the value of [contacto] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setContacto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->contacto !== $v) {
            $this->contacto = $v;
            $this->modifiedColumns[] = ProyectoPeer::CONTACTO;
        }


        return $this;
    } // setContacto()

    /**
     * Set the value of [created_by] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setCreatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->created_by !== $v) {
            $this->created_by = $v;
            $this->modifiedColumns[] = ProyectoPeer::CREATED_BY;
        }


        return $this;
    } // setCreatedBy()

    /**
     * Set the value of [created_at] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->created_at !== $v) {
            $this->created_at = $v;
            $this->modifiedColumns[] = ProyectoPeer::CREATED_AT;
        }


        return $this;
    } // setCreatedAt()

    /**
     * Set the value of [updated_by] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setUpdatedBy($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->updated_by !== $v) {
            $this->updated_by = $v;
            $this->modifiedColumns[] = ProyectoPeer::UPDATED_BY;
        }


        return $this;
    } // setUpdatedBy()

    /**
     * Set the value of [updated_at] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->updated_at !== $v) {
            $this->updated_at = $v;
            $this->modifiedColumns[] = ProyectoPeer::UPDATED_AT;
        }


        return $this;
    } // setUpdatedAt()

    /**
     * Set the value of [nit_proyecto] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setNitProyecto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->nit_proyecto !== $v) {
            $this->nit_proyecto = $v;
            $this->modifiedColumns[] = ProyectoPeer::NIT_PROYECTO;
        }


        return $this;
    } // setNitProyecto()

    /**
     * Set the value of [razon_social] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setRazonSocial($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->razon_social !== $v) {
            $this->razon_social = $v;
            $this->modifiedColumns[] = ProyectoPeer::RAZON_SOCIAL;
        }


        return $this;
    } // setRazonSocial()

    /**
     * Set the value of [nomenclatura] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setNomenclatura($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->nomenclatura !== $v) {
            $this->nomenclatura = $v;
            $this->modifiedColumns[] = ProyectoPeer::NOMENCLATURA;
        }


        return $this;
    } // setNomenclatura()

    /**
     * Set the value of [ubicacion_geografica] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setUbicacionGeografica($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->ubicacion_geografica !== $v) {
            $this->ubicacion_geografica = $v;
            $this->modifiedColumns[] = ProyectoPeer::UBICACION_GEOGRAFICA;
        }


        return $this;
    } // setUbicacionGeografica()

    /**
     * Set the value of [documento_representante] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setDocumentoRepresentante($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->documento_representante !== $v) {
            $this->documento_representante = $v;
            $this->modifiedColumns[] = ProyectoPeer::DOCUMENTO_REPRESENTANTE;
        }


        return $this;
    } // setDocumentoRepresentante()

    /**
     * Set the value of [representante_legal] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setRepresentanteLegal($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->representante_legal !== $v) {
            $this->representante_legal = $v;
            $this->modifiedColumns[] = ProyectoPeer::REPRESENTANTE_LEGAL;
        }


        return $this;
    } // setRepresentanteLegal()

    /**
     * Set the value of [gerente] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setGerente($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->gerente !== $v) {
            $this->gerente = $v;
            $this->modifiedColumns[] = ProyectoPeer::GERENTE;
        }


        return $this;
    } // setGerente()

    /**
     * Set the value of [residente] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setResidente($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->residente !== $v) {
            $this->residente = $v;
            $this->modifiedColumns[] = ProyectoPeer::RESIDENTE;
        }


        return $this;
    } // setResidente()

    /**
     * Set the value of [departamento] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setDepartamento($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->departamento !== $v) {
            $this->departamento = $v;
            $this->modifiedColumns[] = ProyectoPeer::DEPARTAMENTO;
        }


        return $this;
    } // setDepartamento()

    /**
     * Set the value of [municipio] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setMunicipio($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->municipio !== $v) {
            $this->municipio = $v;
            $this->modifiedColumns[] = ProyectoPeer::MUNICIPIO;
        }


        return $this;
    } // setMunicipio()

    /**
     * Set the value of [interno] column.
     *
     * @param string $v new value
     * @return Proyecto The current object (for fluent API support)
     */
    public function setInterno($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->interno !== $v) {
            $this->interno = $v;
            $this->modifiedColumns[] = ProyectoPeer::INTERNO;
        }


        return $this;
    } // setInterno()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->codigo = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->nombre = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->telefono = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->contacto = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->created_by = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->created_at = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->updated_by = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->updated_at = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->nit_proyecto = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->razon_social = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->nomenclatura = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->ubicacion_geografica = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->documento_representante = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->representante_legal = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->gerente = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->residente = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->departamento = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->municipio = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
            $this->interno = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 20; // 20 = ProyectoPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Proyecto object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ProyectoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = ProyectoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ProyectoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = ProyectoQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseProyecto:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseProyecto:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ProyectoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseProyecto:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(ProyectoPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(ProyectoPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseProyecto:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                ProyectoPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = ProyectoPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . ProyectoPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(ProyectoPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(ProyectoPeer::CODIGO)) {
            $modifiedColumns[':p' . $index++]  = '`CODIGO`';
        }
        if ($this->isColumnModified(ProyectoPeer::NOMBRE)) {
            $modifiedColumns[':p' . $index++]  = '`NOMBRE`';
        }
        if ($this->isColumnModified(ProyectoPeer::TELEFONO)) {
            $modifiedColumns[':p' . $index++]  = '`TELEFONO`';
        }
        if ($this->isColumnModified(ProyectoPeer::CONTACTO)) {
            $modifiedColumns[':p' . $index++]  = '`CONTACTO`';
        }
        if ($this->isColumnModified(ProyectoPeer::CREATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_BY`';
        }
        if ($this->isColumnModified(ProyectoPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(ProyectoPeer::UPDATED_BY)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_BY`';
        }
        if ($this->isColumnModified(ProyectoPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(ProyectoPeer::NIT_PROYECTO)) {
            $modifiedColumns[':p' . $index++]  = '`NIT_PROYECTO`';
        }
        if ($this->isColumnModified(ProyectoPeer::RAZON_SOCIAL)) {
            $modifiedColumns[':p' . $index++]  = '`RAZON_SOCIAL`';
        }
        if ($this->isColumnModified(ProyectoPeer::NOMENCLATURA)) {
            $modifiedColumns[':p' . $index++]  = '`NOMENCLATURA`';
        }
        if ($this->isColumnModified(ProyectoPeer::UBICACION_GEOGRAFICA)) {
            $modifiedColumns[':p' . $index++]  = '`UBICACION_GEOGRAFICA`';
        }
        if ($this->isColumnModified(ProyectoPeer::DOCUMENTO_REPRESENTANTE)) {
            $modifiedColumns[':p' . $index++]  = '`DOCUMENTO_REPRESENTANTE`';
        }
        if ($this->isColumnModified(ProyectoPeer::REPRESENTANTE_LEGAL)) {
            $modifiedColumns[':p' . $index++]  = '`REPRESENTANTE_LEGAL`';
        }
        if ($this->isColumnModified(ProyectoPeer::GERENTE)) {
            $modifiedColumns[':p' . $index++]  = '`GERENTE`';
        }
        if ($this->isColumnModified(ProyectoPeer::RESIDENTE)) {
            $modifiedColumns[':p' . $index++]  = '`RESIDENTE`';
        }
        if ($this->isColumnModified(ProyectoPeer::DEPARTAMENTO)) {
            $modifiedColumns[':p' . $index++]  = '`DEPARTAMENTO`';
        }
        if ($this->isColumnModified(ProyectoPeer::MUNICIPIO)) {
            $modifiedColumns[':p' . $index++]  = '`MUNICIPIO`';
        }
        if ($this->isColumnModified(ProyectoPeer::INTERNO)) {
            $modifiedColumns[':p' . $index++]  = '`INTERNO`';
        }

        $sql = sprintf(
            'INSERT INTO `proyecto` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`CODIGO`':
                        $stmt->bindValue($identifier, $this->codigo, PDO::PARAM_STR);
                        break;
                    case '`NOMBRE`':
                        $stmt->bindValue($identifier, $this->nombre, PDO::PARAM_STR);
                        break;
                    case '`TELEFONO`':
                        $stmt->bindValue($identifier, $this->telefono, PDO::PARAM_STR);
                        break;
                    case '`CONTACTO`':
                        $stmt->bindValue($identifier, $this->contacto, PDO::PARAM_STR);
                        break;
                    case '`CREATED_BY`':
                        $stmt->bindValue($identifier, $this->created_by, PDO::PARAM_STR);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_BY`':
                        $stmt->bindValue($identifier, $this->updated_by, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`NIT_PROYECTO`':
                        $stmt->bindValue($identifier, $this->nit_proyecto, PDO::PARAM_STR);
                        break;
                    case '`RAZON_SOCIAL`':
                        $stmt->bindValue($identifier, $this->razon_social, PDO::PARAM_STR);
                        break;
                    case '`NOMENCLATURA`':
                        $stmt->bindValue($identifier, $this->nomenclatura, PDO::PARAM_STR);
                        break;
                    case '`UBICACION_GEOGRAFICA`':
                        $stmt->bindValue($identifier, $this->ubicacion_geografica, PDO::PARAM_STR);
                        break;
                    case '`DOCUMENTO_REPRESENTANTE`':
                        $stmt->bindValue($identifier, $this->documento_representante, PDO::PARAM_STR);
                        break;
                    case '`REPRESENTANTE_LEGAL`':
                        $stmt->bindValue($identifier, $this->representante_legal, PDO::PARAM_STR);
                        break;
                    case '`GERENTE`':
                        $stmt->bindValue($identifier, $this->gerente, PDO::PARAM_STR);
                        break;
                    case '`RESIDENTE`':
                        $stmt->bindValue($identifier, $this->residente, PDO::PARAM_STR);
                        break;
                    case '`DEPARTAMENTO`':
                        $stmt->bindValue($identifier, $this->departamento, PDO::PARAM_STR);
                        break;
                    case '`MUNICIPIO`':
                        $stmt->bindValue($identifier, $this->municipio, PDO::PARAM_STR);
                        break;
                    case '`INTERNO`':
                        $stmt->bindValue($identifier, $this->interno, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = ProyectoPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = ProyectoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getCodigo();
                break;
            case 2:
                return $this->getNombre();
                break;
            case 3:
                return $this->getTelefono();
                break;
            case 4:
                return $this->getContacto();
                break;
            case 5:
                return $this->getCreatedBy();
                break;
            case 6:
                return $this->getCreatedAt();
                break;
            case 7:
                return $this->getUpdatedBy();
                break;
            case 8:
                return $this->getUpdatedAt();
                break;
            case 9:
                return $this->getNitProyecto();
                break;
            case 10:
                return $this->getRazonSocial();
                break;
            case 11:
                return $this->getNomenclatura();
                break;
            case 12:
                return $this->getUbicacionGeografica();
                break;
            case 13:
                return $this->getDocumentoRepresentante();
                break;
            case 14:
                return $this->getRepresentanteLegal();
                break;
            case 15:
                return $this->getGerente();
                break;
            case 16:
                return $this->getResidente();
                break;
            case 17:
                return $this->getDepartamento();
                break;
            case 18:
                return $this->getMunicipio();
                break;
            case 19:
                return $this->getInterno();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array())
    {
        if (isset($alreadyDumpedObjects['Proyecto'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Proyecto'][$this->getPrimaryKey()] = true;
        $keys = ProyectoPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getCodigo(),
            $keys[2] => $this->getNombre(),
            $keys[3] => $this->getTelefono(),
            $keys[4] => $this->getContacto(),
            $keys[5] => $this->getCreatedBy(),
            $keys[6] => $this->getCreatedAt(),
            $keys[7] => $this->getUpdatedBy(),
            $keys[8] => $this->getUpdatedAt(),
            $keys[9] => $this->getNitProyecto(),
            $keys[10] => $this->getRazonSocial(),
            $keys[11] => $this->getNomenclatura(),
            $keys[12] => $this->getUbicacionGeografica(),
            $keys[13] => $this->getDocumentoRepresentante(),
            $keys[14] => $this->getRepresentanteLegal(),
            $keys[15] => $this->getGerente(),
            $keys[16] => $this->getResidente(),
            $keys[17] => $this->getDepartamento(),
            $keys[18] => $this->getMunicipio(),
            $keys[19] => $this->getInterno(),
        );

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = ProyectoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setCodigo($value);
                break;
            case 2:
                $this->setNombre($value);
                break;
            case 3:
                $this->setTelefono($value);
                break;
            case 4:
                $this->setContacto($value);
                break;
            case 5:
                $this->setCreatedBy($value);
                break;
            case 6:
                $this->setCreatedAt($value);
                break;
            case 7:
                $this->setUpdatedBy($value);
                break;
            case 8:
                $this->setUpdatedAt($value);
                break;
            case 9:
                $this->setNitProyecto($value);
                break;
            case 10:
                $this->setRazonSocial($value);
                break;
            case 11:
                $this->setNomenclatura($value);
                break;
            case 12:
                $this->setUbicacionGeografica($value);
                break;
            case 13:
                $this->setDocumentoRepresentante($value);
                break;
            case 14:
                $this->setRepresentanteLegal($value);
                break;
            case 15:
                $this->setGerente($value);
                break;
            case 16:
                $this->setResidente($value);
                break;
            case 17:
                $this->setDepartamento($value);
                break;
            case 18:
                $this->setMunicipio($value);
                break;
            case 19:
                $this->setInterno($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = ProyectoPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setCodigo($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setNombre($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setTelefono($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setContacto($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setCreatedBy($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setCreatedAt($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setUpdatedBy($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setUpdatedAt($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setNitProyecto($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setRazonSocial($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setNomenclatura($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setUbicacionGeografica($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setDocumentoRepresentante($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setRepresentanteLegal($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setGerente($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setResidente($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setDepartamento($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setMunicipio($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setInterno($arr[$keys[19]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(ProyectoPeer::DATABASE_NAME);

        if ($this->isColumnModified(ProyectoPeer::ID)) $criteria->add(ProyectoPeer::ID, $this->id);
        if ($this->isColumnModified(ProyectoPeer::CODIGO)) $criteria->add(ProyectoPeer::CODIGO, $this->codigo);
        if ($this->isColumnModified(ProyectoPeer::NOMBRE)) $criteria->add(ProyectoPeer::NOMBRE, $this->nombre);
        if ($this->isColumnModified(ProyectoPeer::TELEFONO)) $criteria->add(ProyectoPeer::TELEFONO, $this->telefono);
        if ($this->isColumnModified(ProyectoPeer::CONTACTO)) $criteria->add(ProyectoPeer::CONTACTO, $this->contacto);
        if ($this->isColumnModified(ProyectoPeer::CREATED_BY)) $criteria->add(ProyectoPeer::CREATED_BY, $this->created_by);
        if ($this->isColumnModified(ProyectoPeer::CREATED_AT)) $criteria->add(ProyectoPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(ProyectoPeer::UPDATED_BY)) $criteria->add(ProyectoPeer::UPDATED_BY, $this->updated_by);
        if ($this->isColumnModified(ProyectoPeer::UPDATED_AT)) $criteria->add(ProyectoPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(ProyectoPeer::NIT_PROYECTO)) $criteria->add(ProyectoPeer::NIT_PROYECTO, $this->nit_proyecto);
        if ($this->isColumnModified(ProyectoPeer::RAZON_SOCIAL)) $criteria->add(ProyectoPeer::RAZON_SOCIAL, $this->razon_social);
        if ($this->isColumnModified(ProyectoPeer::NOMENCLATURA)) $criteria->add(ProyectoPeer::NOMENCLATURA, $this->nomenclatura);
        if ($this->isColumnModified(ProyectoPeer::UBICACION_GEOGRAFICA)) $criteria->add(ProyectoPeer::UBICACION_GEOGRAFICA, $this->ubicacion_geografica);
        if ($this->isColumnModified(ProyectoPeer::DOCUMENTO_REPRESENTANTE)) $criteria->add(ProyectoPeer::DOCUMENTO_REPRESENTANTE, $this->documento_representante);
        if ($this->isColumnModified(ProyectoPeer::REPRESENTANTE_LEGAL)) $criteria->add(ProyectoPeer::REPRESENTANTE_LEGAL, $this->representante_legal);
        if ($this->isColumnModified(ProyectoPeer::GERENTE)) $criteria->add(ProyectoPeer::GERENTE, $this->gerente);
        if ($this->isColumnModified(ProyectoPeer::RESIDENTE)) $criteria->add(ProyectoPeer::RESIDENTE, $this->residente);
        if ($this->isColumnModified(ProyectoPeer::DEPARTAMENTO)) $criteria->add(ProyectoPeer::DEPARTAMENTO, $this->departamento);
        if ($this->isColumnModified(ProyectoPeer::MUNICIPIO)) $criteria->add(ProyectoPeer::MUNICIPIO, $this->municipio);
        if ($this->isColumnModified(ProyectoPeer::INTERNO)) $criteria->add(ProyectoPeer::INTERNO, $this->interno);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(ProyectoPeer::DATABASE_NAME);
        $criteria->add(ProyectoPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Proyecto (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setCodigo($this->getCodigo());
        $copyObj->setNombre($this->getNombre());
        $copyObj->setTelefono($this->getTelefono());
        $copyObj->setContacto($this->getContacto());
        $copyObj->setCreatedBy($this->getCreatedBy());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setUpdatedBy($this->getUpdatedBy());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setNitProyecto($this->getNitProyecto());
        $copyObj->setRazonSocial($this->getRazonSocial());
        $copyObj->setNomenclatura($this->getNomenclatura());
        $copyObj->setUbicacionGeografica($this->getUbicacionGeografica());
        $copyObj->setDocumentoRepresentante($this->getDocumentoRepresentante());
        $copyObj->setRepresentanteLegal($this->getRepresentanteLegal());
        $copyObj->setGerente($this->getGerente());
        $copyObj->setResidente($this->getResidente());
        $copyObj->setDepartamento($this->getDepartamento());
        $copyObj->setMunicipio($this->getMunicipio());
        $copyObj->setInterno($this->getInterno());
        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Proyecto Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return ProyectoPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new ProyectoPeer();
        }

        return self::$peer;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->codigo = null;
        $this->nombre = null;
        $this->telefono = null;
        $this->contacto = null;
        $this->created_by = null;
        $this->created_at = null;
        $this->updated_by = null;
        $this->updated_at = null;
        $this->nit_proyecto = null;
        $this->razon_social = null;
        $this->nomenclatura = null;
        $this->ubicacion_geografica = null;
        $this->documento_representante = null;
        $this->representante_legal = null;
        $this->gerente = null;
        $this->residente = null;
        $this->departamento = null;
        $this->municipio = null;
        $this->interno = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(ProyectoPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseProyecto:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
