<?php


/**
 * Base class that represents a query for the 'proyeccion_vacacion' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 03/28/19 02:04:56
 *
 * @method ProyeccionVacacionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method ProyeccionVacacionQuery orderByUsuario($order = Criteria::ASC) Order by the usuario column
 * @method ProyeccionVacacionQuery orderByFechaInicio($order = Criteria::ASC) Order by the fecha_inicio column
 * @method ProyeccionVacacionQuery orderByFechaFin($order = Criteria::ASC) Order by the fecha_fin column
 * @method ProyeccionVacacionQuery orderByPeriodo($order = Criteria::ASC) Order by the periodo column
 * @method ProyeccionVacacionQuery orderByDiaVacacion($order = Criteria::ASC) Order by the dia_vacacion column
 * @method ProyeccionVacacionQuery orderByEstatus($order = Criteria::ASC) Order by the estatus column
 * @method ProyeccionVacacionQuery orderByUsuarioCreo($order = Criteria::ASC) Order by the usuario_creo column
 * @method ProyeccionVacacionQuery orderByFechaCrea($order = Criteria::ASC) Order by the fecha_crea column
 * @method ProyeccionVacacionQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 *
 * @method ProyeccionVacacionQuery groupById() Group by the id column
 * @method ProyeccionVacacionQuery groupByUsuario() Group by the usuario column
 * @method ProyeccionVacacionQuery groupByFechaInicio() Group by the fecha_inicio column
 * @method ProyeccionVacacionQuery groupByFechaFin() Group by the fecha_fin column
 * @method ProyeccionVacacionQuery groupByPeriodo() Group by the periodo column
 * @method ProyeccionVacacionQuery groupByDiaVacacion() Group by the dia_vacacion column
 * @method ProyeccionVacacionQuery groupByEstatus() Group by the estatus column
 * @method ProyeccionVacacionQuery groupByUsuarioCreo() Group by the usuario_creo column
 * @method ProyeccionVacacionQuery groupByFechaCrea() Group by the fecha_crea column
 * @method ProyeccionVacacionQuery groupByObservaciones() Group by the observaciones column
 *
 * @method ProyeccionVacacionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method ProyeccionVacacionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method ProyeccionVacacionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method ProyeccionVacacion findOne(PropelPDO $con = null) Return the first ProyeccionVacacion matching the query
 * @method ProyeccionVacacion findOneOrCreate(PropelPDO $con = null) Return the first ProyeccionVacacion matching the query, or a new ProyeccionVacacion object populated from the query conditions when no match is found
 *
 * @method ProyeccionVacacion findOneById(int $id) Return the first ProyeccionVacacion filtered by the id column
 * @method ProyeccionVacacion findOneByUsuario(string $usuario) Return the first ProyeccionVacacion filtered by the usuario column
 * @method ProyeccionVacacion findOneByFechaInicio(string $fecha_inicio) Return the first ProyeccionVacacion filtered by the fecha_inicio column
 * @method ProyeccionVacacion findOneByFechaFin(string $fecha_fin) Return the first ProyeccionVacacion filtered by the fecha_fin column
 * @method ProyeccionVacacion findOneByPeriodo(int $periodo) Return the first ProyeccionVacacion filtered by the periodo column
 * @method ProyeccionVacacion findOneByDiaVacacion(double $dia_vacacion) Return the first ProyeccionVacacion filtered by the dia_vacacion column
 * @method ProyeccionVacacion findOneByEstatus(string $estatus) Return the first ProyeccionVacacion filtered by the estatus column
 * @method ProyeccionVacacion findOneByUsuarioCreo(string $usuario_creo) Return the first ProyeccionVacacion filtered by the usuario_creo column
 * @method ProyeccionVacacion findOneByFechaCrea(string $fecha_crea) Return the first ProyeccionVacacion filtered by the fecha_crea column
 * @method ProyeccionVacacion findOneByObservaciones(string $observaciones) Return the first ProyeccionVacacion filtered by the observaciones column
 *
 * @method array findById(int $id) Return ProyeccionVacacion objects filtered by the id column
 * @method array findByUsuario(string $usuario) Return ProyeccionVacacion objects filtered by the usuario column
 * @method array findByFechaInicio(string $fecha_inicio) Return ProyeccionVacacion objects filtered by the fecha_inicio column
 * @method array findByFechaFin(string $fecha_fin) Return ProyeccionVacacion objects filtered by the fecha_fin column
 * @method array findByPeriodo(int $periodo) Return ProyeccionVacacion objects filtered by the periodo column
 * @method array findByDiaVacacion(double $dia_vacacion) Return ProyeccionVacacion objects filtered by the dia_vacacion column
 * @method array findByEstatus(string $estatus) Return ProyeccionVacacion objects filtered by the estatus column
 * @method array findByUsuarioCreo(string $usuario_creo) Return ProyeccionVacacion objects filtered by the usuario_creo column
 * @method array findByFechaCrea(string $fecha_crea) Return ProyeccionVacacion objects filtered by the fecha_crea column
 * @method array findByObservaciones(string $observaciones) Return ProyeccionVacacion objects filtered by the observaciones column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseProyeccionVacacionQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseProyeccionVacacionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'ProyeccionVacacion', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new ProyeccionVacacionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     ProyeccionVacacionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return ProyeccionVacacionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof ProyeccionVacacionQuery) {
            return $criteria;
        }
        $query = new ProyeccionVacacionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   ProyeccionVacacion|ProyeccionVacacion[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = ProyeccionVacacionPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(ProyeccionVacacionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   ProyeccionVacacion A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `USUARIO`, `FECHA_INICIO`, `FECHA_FIN`, `PERIODO`, `DIA_VACACION`, `ESTATUS`, `USUARIO_CREO`, `FECHA_CREA`, `OBSERVACIONES` FROM `proyeccion_vacacion` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new ProyeccionVacacion();
            $obj->hydrate($row);
            ProyeccionVacacionPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return ProyeccionVacacion|ProyeccionVacacion[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|ProyeccionVacacion[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(ProyeccionVacacionPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(ProyeccionVacacionPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the usuario column
     *
     * Example usage:
     * <code>
     * $query->filterByUsuario('fooValue');   // WHERE usuario = 'fooValue'
     * $query->filterByUsuario('%fooValue%'); // WHERE usuario LIKE '%fooValue%'
     * </code>
     *
     * @param     string $usuario The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByUsuario($usuario = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($usuario)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $usuario)) {
                $usuario = str_replace('*', '%', $usuario);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::USUARIO, $usuario, $comparison);
    }

    /**
     * Filter the query on the fecha_inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByFechaInicio('2011-03-14'); // WHERE fecha_inicio = '2011-03-14'
     * $query->filterByFechaInicio('now'); // WHERE fecha_inicio = '2011-03-14'
     * $query->filterByFechaInicio(array('max' => 'yesterday')); // WHERE fecha_inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $fechaInicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByFechaInicio($fechaInicio = null, $comparison = null)
    {
        if (is_array($fechaInicio)) {
            $useMinMax = false;
            if (isset($fechaInicio['min'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_INICIO, $fechaInicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fechaInicio['max'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_INICIO, $fechaInicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_INICIO, $fechaInicio, $comparison);
    }

    /**
     * Filter the query on the fecha_fin column
     *
     * Example usage:
     * <code>
     * $query->filterByFechaFin('2011-03-14'); // WHERE fecha_fin = '2011-03-14'
     * $query->filterByFechaFin('now'); // WHERE fecha_fin = '2011-03-14'
     * $query->filterByFechaFin(array('max' => 'yesterday')); // WHERE fecha_fin > '2011-03-13'
     * </code>
     *
     * @param     mixed $fechaFin The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByFechaFin($fechaFin = null, $comparison = null)
    {
        if (is_array($fechaFin)) {
            $useMinMax = false;
            if (isset($fechaFin['min'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_FIN, $fechaFin['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fechaFin['max'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_FIN, $fechaFin['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_FIN, $fechaFin, $comparison);
    }

    /**
     * Filter the query on the periodo column
     *
     * Example usage:
     * <code>
     * $query->filterByPeriodo(1234); // WHERE periodo = 1234
     * $query->filterByPeriodo(array(12, 34)); // WHERE periodo IN (12, 34)
     * $query->filterByPeriodo(array('min' => 12)); // WHERE periodo > 12
     * </code>
     *
     * @param     mixed $periodo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByPeriodo($periodo = null, $comparison = null)
    {
        if (is_array($periodo)) {
            $useMinMax = false;
            if (isset($periodo['min'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::PERIODO, $periodo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($periodo['max'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::PERIODO, $periodo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::PERIODO, $periodo, $comparison);
    }

    /**
     * Filter the query on the dia_vacacion column
     *
     * Example usage:
     * <code>
     * $query->filterByDiaVacacion(1234); // WHERE dia_vacacion = 1234
     * $query->filterByDiaVacacion(array(12, 34)); // WHERE dia_vacacion IN (12, 34)
     * $query->filterByDiaVacacion(array('min' => 12)); // WHERE dia_vacacion > 12
     * </code>
     *
     * @param     mixed $diaVacacion The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByDiaVacacion($diaVacacion = null, $comparison = null)
    {
        if (is_array($diaVacacion)) {
            $useMinMax = false;
            if (isset($diaVacacion['min'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::DIA_VACACION, $diaVacacion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($diaVacacion['max'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::DIA_VACACION, $diaVacacion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::DIA_VACACION, $diaVacacion, $comparison);
    }

    /**
     * Filter the query on the estatus column
     *
     * Example usage:
     * <code>
     * $query->filterByEstatus('fooValue');   // WHERE estatus = 'fooValue'
     * $query->filterByEstatus('%fooValue%'); // WHERE estatus LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estatus The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByEstatus($estatus = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estatus)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estatus)) {
                $estatus = str_replace('*', '%', $estatus);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::ESTATUS, $estatus, $comparison);
    }

    /**
     * Filter the query on the usuario_creo column
     *
     * Example usage:
     * <code>
     * $query->filterByUsuarioCreo('fooValue');   // WHERE usuario_creo = 'fooValue'
     * $query->filterByUsuarioCreo('%fooValue%'); // WHERE usuario_creo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $usuarioCreo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByUsuarioCreo($usuarioCreo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($usuarioCreo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $usuarioCreo)) {
                $usuarioCreo = str_replace('*', '%', $usuarioCreo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::USUARIO_CREO, $usuarioCreo, $comparison);
    }

    /**
     * Filter the query on the fecha_crea column
     *
     * Example usage:
     * <code>
     * $query->filterByFechaCrea('2011-03-14'); // WHERE fecha_crea = '2011-03-14'
     * $query->filterByFechaCrea('now'); // WHERE fecha_crea = '2011-03-14'
     * $query->filterByFechaCrea(array('max' => 'yesterday')); // WHERE fecha_crea > '2011-03-13'
     * </code>
     *
     * @param     mixed $fechaCrea The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByFechaCrea($fechaCrea = null, $comparison = null)
    {
        if (is_array($fechaCrea)) {
            $useMinMax = false;
            if (isset($fechaCrea['min'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_CREA, $fechaCrea['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fechaCrea['max'])) {
                $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_CREA, $fechaCrea['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::FECHA_CREA, $fechaCrea, $comparison);
    }

    /**
     * Filter the query on the observaciones column
     *
     * Example usage:
     * <code>
     * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
     * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
     * </code>
     *
     * @param     string $observaciones The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function filterByObservaciones($observaciones = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($observaciones)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $observaciones)) {
                $observaciones = str_replace('*', '%', $observaciones);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProyeccionVacacionPeer::OBSERVACIONES, $observaciones, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   ProyeccionVacacion $proyeccionVacacion Object to remove from the list of results
     *
     * @return ProyeccionVacacionQuery The current query, for fluid interface
     */
    public function prune($proyeccionVacacion = null)
    {
        if ($proyeccionVacacion) {
            $this->addUsingAlias(ProyeccionVacacionPeer::ID, $proyeccionVacacion->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
