<?php


/**
 * Base class that represents a query for the 'usuario' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 06/13/18 07:04:56
 *
 * @method UsuarioQuery orderById($order = Criteria::ASC) Order by the id column
 * @method UsuarioQuery orderByCodigo($order = Criteria::ASC) Order by the codigo column
 * @method UsuarioQuery orderByUsuario($order = Criteria::ASC) Order by the usuario column
 * @method UsuarioQuery orderByClave($order = Criteria::ASC) Order by the clave column
 * @method UsuarioQuery orderByCorreo($order = Criteria::ASC) Order by the correo column
 * @method UsuarioQuery orderByEstado($order = Criteria::ASC) Order by the estado column
 * @method UsuarioQuery orderByImagen($order = Criteria::ASC) Order by the imagen column
 * @method UsuarioQuery orderByAdministrador($order = Criteria::ASC) Order by the administrador column
 * @method UsuarioQuery orderByValidado($order = Criteria::ASC) Order by the validado column
 * @method UsuarioQuery orderByUltimoIngreso($order = Criteria::ASC) Order by the ultimo_ingreso column
 * @method UsuarioQuery orderByTema($order = Criteria::ASC) Order by the tema column
 * @method UsuarioQuery orderByFrase($order = Criteria::ASC) Order by the frase column
 * @method UsuarioQuery orderByGenero($order = Criteria::ASC) Order by the genero column
 * @method UsuarioQuery orderByFechaNacimiento($order = Criteria::ASC) Order by the fecha_nacimiento column
 * @method UsuarioQuery orderByNombreCompleto($order = Criteria::ASC) Order by the nombre_completo column
 * @method UsuarioQuery orderByEmpresa($order = Criteria::ASC) Order by the empresa column
 * @method UsuarioQuery orderByLogo($order = Criteria::ASC) Order by the logo column
 * @method UsuarioQuery orderByActivo($order = Criteria::ASC) Order by the activo column
 * @method UsuarioQuery orderByTipoUsuario($order = Criteria::ASC) Order by the tipo_usuario column
 * @method UsuarioQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 *
 * @method UsuarioQuery groupById() Group by the id column
 * @method UsuarioQuery groupByCodigo() Group by the codigo column
 * @method UsuarioQuery groupByUsuario() Group by the usuario column
 * @method UsuarioQuery groupByClave() Group by the clave column
 * @method UsuarioQuery groupByCorreo() Group by the correo column
 * @method UsuarioQuery groupByEstado() Group by the estado column
 * @method UsuarioQuery groupByImagen() Group by the imagen column
 * @method UsuarioQuery groupByAdministrador() Group by the administrador column
 * @method UsuarioQuery groupByValidado() Group by the validado column
 * @method UsuarioQuery groupByUltimoIngreso() Group by the ultimo_ingreso column
 * @method UsuarioQuery groupByTema() Group by the tema column
 * @method UsuarioQuery groupByFrase() Group by the frase column
 * @method UsuarioQuery groupByGenero() Group by the genero column
 * @method UsuarioQuery groupByFechaNacimiento() Group by the fecha_nacimiento column
 * @method UsuarioQuery groupByNombreCompleto() Group by the nombre_completo column
 * @method UsuarioQuery groupByEmpresa() Group by the empresa column
 * @method UsuarioQuery groupByLogo() Group by the logo column
 * @method UsuarioQuery groupByActivo() Group by the activo column
 * @method UsuarioQuery groupByTipoUsuario() Group by the tipo_usuario column
 * @method UsuarioQuery groupByObservaciones() Group by the observaciones column
 *
 * @method UsuarioQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method UsuarioQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method UsuarioQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method UsuarioQuery leftJoinUsuarioPerfil($relationAlias = null) Adds a LEFT JOIN clause to the query using the UsuarioPerfil relation
 * @method UsuarioQuery rightJoinUsuarioPerfil($relationAlias = null) Adds a RIGHT JOIN clause to the query using the UsuarioPerfil relation
 * @method UsuarioQuery innerJoinUsuarioPerfil($relationAlias = null) Adds a INNER JOIN clause to the query using the UsuarioPerfil relation
 *
 * @method Usuario findOne(PropelPDO $con = null) Return the first Usuario matching the query
 * @method Usuario findOneOrCreate(PropelPDO $con = null) Return the first Usuario matching the query, or a new Usuario object populated from the query conditions when no match is found
 *
 * @method Usuario findOneById(int $id) Return the first Usuario filtered by the id column
 * @method Usuario findOneByCodigo(string $codigo) Return the first Usuario filtered by the codigo column
 * @method Usuario findOneByUsuario(string $usuario) Return the first Usuario filtered by the usuario column
 * @method Usuario findOneByClave(string $clave) Return the first Usuario filtered by the clave column
 * @method Usuario findOneByCorreo(string $correo) Return the first Usuario filtered by the correo column
 * @method Usuario findOneByEstado(string $estado) Return the first Usuario filtered by the estado column
 * @method Usuario findOneByImagen(string $imagen) Return the first Usuario filtered by the imagen column
 * @method Usuario findOneByAdministrador(boolean $administrador) Return the first Usuario filtered by the administrador column
 * @method Usuario findOneByValidado(boolean $validado) Return the first Usuario filtered by the validado column
 * @method Usuario findOneByUltimoIngreso(string $ultimo_ingreso) Return the first Usuario filtered by the ultimo_ingreso column
 * @method Usuario findOneByTema(string $tema) Return the first Usuario filtered by the tema column
 * @method Usuario findOneByFrase(string $frase) Return the first Usuario filtered by the frase column
 * @method Usuario findOneByGenero(string $genero) Return the first Usuario filtered by the genero column
 * @method Usuario findOneByFechaNacimiento(string $fecha_nacimiento) Return the first Usuario filtered by the fecha_nacimiento column
 * @method Usuario findOneByNombreCompleto(string $nombre_completo) Return the first Usuario filtered by the nombre_completo column
 * @method Usuario findOneByEmpresa(string $empresa) Return the first Usuario filtered by the empresa column
 * @method Usuario findOneByLogo(string $logo) Return the first Usuario filtered by the logo column
 * @method Usuario findOneByActivo(boolean $activo) Return the first Usuario filtered by the activo column
 * @method Usuario findOneByTipoUsuario(string $tipo_usuario) Return the first Usuario filtered by the tipo_usuario column
 * @method Usuario findOneByObservaciones(string $observaciones) Return the first Usuario filtered by the observaciones column
 *
 * @method array findById(int $id) Return Usuario objects filtered by the id column
 * @method array findByCodigo(string $codigo) Return Usuario objects filtered by the codigo column
 * @method array findByUsuario(string $usuario) Return Usuario objects filtered by the usuario column
 * @method array findByClave(string $clave) Return Usuario objects filtered by the clave column
 * @method array findByCorreo(string $correo) Return Usuario objects filtered by the correo column
 * @method array findByEstado(string $estado) Return Usuario objects filtered by the estado column
 * @method array findByImagen(string $imagen) Return Usuario objects filtered by the imagen column
 * @method array findByAdministrador(boolean $administrador) Return Usuario objects filtered by the administrador column
 * @method array findByValidado(boolean $validado) Return Usuario objects filtered by the validado column
 * @method array findByUltimoIngreso(string $ultimo_ingreso) Return Usuario objects filtered by the ultimo_ingreso column
 * @method array findByTema(string $tema) Return Usuario objects filtered by the tema column
 * @method array findByFrase(string $frase) Return Usuario objects filtered by the frase column
 * @method array findByGenero(string $genero) Return Usuario objects filtered by the genero column
 * @method array findByFechaNacimiento(string $fecha_nacimiento) Return Usuario objects filtered by the fecha_nacimiento column
 * @method array findByNombreCompleto(string $nombre_completo) Return Usuario objects filtered by the nombre_completo column
 * @method array findByEmpresa(string $empresa) Return Usuario objects filtered by the empresa column
 * @method array findByLogo(string $logo) Return Usuario objects filtered by the logo column
 * @method array findByActivo(boolean $activo) Return Usuario objects filtered by the activo column
 * @method array findByTipoUsuario(string $tipo_usuario) Return Usuario objects filtered by the tipo_usuario column
 * @method array findByObservaciones(string $observaciones) Return Usuario objects filtered by the observaciones column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuarioQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseUsuarioQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Usuario', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new UsuarioQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     UsuarioQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return UsuarioQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof UsuarioQuery) {
            return $criteria;
        }
        $query = new UsuarioQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Usuario|Usuario[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = UsuarioPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Usuario A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `CODIGO`, `USUARIO`, `CLAVE`, `CORREO`, `ESTADO`, `IMAGEN`, `ADMINISTRADOR`, `VALIDADO`, `ULTIMO_INGRESO`, `TEMA`, `FRASE`, `GENERO`, `FECHA_NACIMIENTO`, `NOMBRE_COMPLETO`, `EMPRESA`, `LOGO`, `ACTIVO`, `TIPO_USUARIO`, `OBSERVACIONES` FROM `usuario` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Usuario();
            $obj->hydrate($row);
            UsuarioPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Usuario|Usuario[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Usuario[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(UsuarioPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(UsuarioPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(UsuarioPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the codigo column
     *
     * Example usage:
     * <code>
     * $query->filterByCodigo('fooValue');   // WHERE codigo = 'fooValue'
     * $query->filterByCodigo('%fooValue%'); // WHERE codigo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codigo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByCodigo($codigo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codigo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codigo)) {
                $codigo = str_replace('*', '%', $codigo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CODIGO, $codigo, $comparison);
    }

    /**
     * Filter the query on the usuario column
     *
     * Example usage:
     * <code>
     * $query->filterByUsuario('fooValue');   // WHERE usuario = 'fooValue'
     * $query->filterByUsuario('%fooValue%'); // WHERE usuario LIKE '%fooValue%'
     * </code>
     *
     * @param     string $usuario The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByUsuario($usuario = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($usuario)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $usuario)) {
                $usuario = str_replace('*', '%', $usuario);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::USUARIO, $usuario, $comparison);
    }

    /**
     * Filter the query on the clave column
     *
     * Example usage:
     * <code>
     * $query->filterByClave('fooValue');   // WHERE clave = 'fooValue'
     * $query->filterByClave('%fooValue%'); // WHERE clave LIKE '%fooValue%'
     * </code>
     *
     * @param     string $clave The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByClave($clave = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($clave)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $clave)) {
                $clave = str_replace('*', '%', $clave);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CLAVE, $clave, $comparison);
    }

    /**
     * Filter the query on the correo column
     *
     * Example usage:
     * <code>
     * $query->filterByCorreo('fooValue');   // WHERE correo = 'fooValue'
     * $query->filterByCorreo('%fooValue%'); // WHERE correo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $correo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByCorreo($correo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($correo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $correo)) {
                $correo = str_replace('*', '%', $correo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::CORREO, $correo, $comparison);
    }

    /**
     * Filter the query on the estado column
     *
     * Example usage:
     * <code>
     * $query->filterByEstado('fooValue');   // WHERE estado = 'fooValue'
     * $query->filterByEstado('%fooValue%'); // WHERE estado LIKE '%fooValue%'
     * </code>
     *
     * @param     string $estado The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByEstado($estado = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($estado)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $estado)) {
                $estado = str_replace('*', '%', $estado);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::ESTADO, $estado, $comparison);
    }

    /**
     * Filter the query on the imagen column
     *
     * Example usage:
     * <code>
     * $query->filterByImagen('fooValue');   // WHERE imagen = 'fooValue'
     * $query->filterByImagen('%fooValue%'); // WHERE imagen LIKE '%fooValue%'
     * </code>
     *
     * @param     string $imagen The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByImagen($imagen = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($imagen)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $imagen)) {
                $imagen = str_replace('*', '%', $imagen);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::IMAGEN, $imagen, $comparison);
    }

    /**
     * Filter the query on the administrador column
     *
     * Example usage:
     * <code>
     * $query->filterByAdministrador(true); // WHERE administrador = true
     * $query->filterByAdministrador('yes'); // WHERE administrador = true
     * </code>
     *
     * @param     boolean|string $administrador The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByAdministrador($administrador = null, $comparison = null)
    {
        if (is_string($administrador)) {
            $administrador = in_array(strtolower($administrador), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(UsuarioPeer::ADMINISTRADOR, $administrador, $comparison);
    }

    /**
     * Filter the query on the validado column
     *
     * Example usage:
     * <code>
     * $query->filterByValidado(true); // WHERE validado = true
     * $query->filterByValidado('yes'); // WHERE validado = true
     * </code>
     *
     * @param     boolean|string $validado The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByValidado($validado = null, $comparison = null)
    {
        if (is_string($validado)) {
            $validado = in_array(strtolower($validado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(UsuarioPeer::VALIDADO, $validado, $comparison);
    }

    /**
     * Filter the query on the ultimo_ingreso column
     *
     * Example usage:
     * <code>
     * $query->filterByUltimoIngreso('2011-03-14'); // WHERE ultimo_ingreso = '2011-03-14'
     * $query->filterByUltimoIngreso('now'); // WHERE ultimo_ingreso = '2011-03-14'
     * $query->filterByUltimoIngreso(array('max' => 'yesterday')); // WHERE ultimo_ingreso > '2011-03-13'
     * </code>
     *
     * @param     mixed $ultimoIngreso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByUltimoIngreso($ultimoIngreso = null, $comparison = null)
    {
        if (is_array($ultimoIngreso)) {
            $useMinMax = false;
            if (isset($ultimoIngreso['min'])) {
                $this->addUsingAlias(UsuarioPeer::ULTIMO_INGRESO, $ultimoIngreso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ultimoIngreso['max'])) {
                $this->addUsingAlias(UsuarioPeer::ULTIMO_INGRESO, $ultimoIngreso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::ULTIMO_INGRESO, $ultimoIngreso, $comparison);
    }

    /**
     * Filter the query on the tema column
     *
     * Example usage:
     * <code>
     * $query->filterByTema('fooValue');   // WHERE tema = 'fooValue'
     * $query->filterByTema('%fooValue%'); // WHERE tema LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tema The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByTema($tema = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tema)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tema)) {
                $tema = str_replace('*', '%', $tema);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::TEMA, $tema, $comparison);
    }

    /**
     * Filter the query on the frase column
     *
     * Example usage:
     * <code>
     * $query->filterByFrase('fooValue');   // WHERE frase = 'fooValue'
     * $query->filterByFrase('%fooValue%'); // WHERE frase LIKE '%fooValue%'
     * </code>
     *
     * @param     string $frase The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByFrase($frase = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($frase)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $frase)) {
                $frase = str_replace('*', '%', $frase);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::FRASE, $frase, $comparison);
    }

    /**
     * Filter the query on the genero column
     *
     * Example usage:
     * <code>
     * $query->filterByGenero('fooValue');   // WHERE genero = 'fooValue'
     * $query->filterByGenero('%fooValue%'); // WHERE genero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $genero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByGenero($genero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($genero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $genero)) {
                $genero = str_replace('*', '%', $genero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::GENERO, $genero, $comparison);
    }

    /**
     * Filter the query on the fecha_nacimiento column
     *
     * Example usage:
     * <code>
     * $query->filterByFechaNacimiento('2011-03-14'); // WHERE fecha_nacimiento = '2011-03-14'
     * $query->filterByFechaNacimiento('now'); // WHERE fecha_nacimiento = '2011-03-14'
     * $query->filterByFechaNacimiento(array('max' => 'yesterday')); // WHERE fecha_nacimiento > '2011-03-13'
     * </code>
     *
     * @param     mixed $fechaNacimiento The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByFechaNacimiento($fechaNacimiento = null, $comparison = null)
    {
        if (is_array($fechaNacimiento)) {
            $useMinMax = false;
            if (isset($fechaNacimiento['min'])) {
                $this->addUsingAlias(UsuarioPeer::FECHA_NACIMIENTO, $fechaNacimiento['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fechaNacimiento['max'])) {
                $this->addUsingAlias(UsuarioPeer::FECHA_NACIMIENTO, $fechaNacimiento['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::FECHA_NACIMIENTO, $fechaNacimiento, $comparison);
    }

    /**
     * Filter the query on the nombre_completo column
     *
     * Example usage:
     * <code>
     * $query->filterByNombreCompleto('fooValue');   // WHERE nombre_completo = 'fooValue'
     * $query->filterByNombreCompleto('%fooValue%'); // WHERE nombre_completo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $nombreCompleto The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByNombreCompleto($nombreCompleto = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($nombreCompleto)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $nombreCompleto)) {
                $nombreCompleto = str_replace('*', '%', $nombreCompleto);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::NOMBRE_COMPLETO, $nombreCompleto, $comparison);
    }

    /**
     * Filter the query on the empresa column
     *
     * Example usage:
     * <code>
     * $query->filterByEmpresa('fooValue');   // WHERE empresa = 'fooValue'
     * $query->filterByEmpresa('%fooValue%'); // WHERE empresa LIKE '%fooValue%'
     * </code>
     *
     * @param     string $empresa The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByEmpresa($empresa = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($empresa)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $empresa)) {
                $empresa = str_replace('*', '%', $empresa);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::EMPRESA, $empresa, $comparison);
    }

    /**
     * Filter the query on the logo column
     *
     * Example usage:
     * <code>
     * $query->filterByLogo('fooValue');   // WHERE logo = 'fooValue'
     * $query->filterByLogo('%fooValue%'); // WHERE logo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $logo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByLogo($logo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($logo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $logo)) {
                $logo = str_replace('*', '%', $logo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::LOGO, $logo, $comparison);
    }

    /**
     * Filter the query on the activo column
     *
     * Example usage:
     * <code>
     * $query->filterByActivo(true); // WHERE activo = true
     * $query->filterByActivo('yes'); // WHERE activo = true
     * </code>
     *
     * @param     boolean|string $activo The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByActivo($activo = null, $comparison = null)
    {
        if (is_string($activo)) {
            $activo = in_array(strtolower($activo), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(UsuarioPeer::ACTIVO, $activo, $comparison);
    }

    /**
     * Filter the query on the tipo_usuario column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoUsuario('fooValue');   // WHERE tipo_usuario = 'fooValue'
     * $query->filterByTipoUsuario('%fooValue%'); // WHERE tipo_usuario LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tipoUsuario The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByTipoUsuario($tipoUsuario = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tipoUsuario)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tipoUsuario)) {
                $tipoUsuario = str_replace('*', '%', $tipoUsuario);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::TIPO_USUARIO, $tipoUsuario, $comparison);
    }

    /**
     * Filter the query on the observaciones column
     *
     * Example usage:
     * <code>
     * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
     * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
     * </code>
     *
     * @param     string $observaciones The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function filterByObservaciones($observaciones = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($observaciones)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $observaciones)) {
                $observaciones = str_replace('*', '%', $observaciones);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UsuarioPeer::OBSERVACIONES, $observaciones, $comparison);
    }

    /**
     * Filter the query by a related UsuarioPerfil object
     *
     * @param   UsuarioPerfil|PropelObjectCollection $usuarioPerfil  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UsuarioQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByUsuarioPerfil($usuarioPerfil, $comparison = null)
    {
        if ($usuarioPerfil instanceof UsuarioPerfil) {
            return $this
                ->addUsingAlias(UsuarioPeer::ID, $usuarioPerfil->getUsuarioId(), $comparison);
        } elseif ($usuarioPerfil instanceof PropelObjectCollection) {
            return $this
                ->useUsuarioPerfilQuery()
                ->filterByPrimaryKeys($usuarioPerfil->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByUsuarioPerfil() only accepts arguments of type UsuarioPerfil or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the UsuarioPerfil relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function joinUsuarioPerfil($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('UsuarioPerfil');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'UsuarioPerfil');
        }

        return $this;
    }

    /**
     * Use the UsuarioPerfil relation UsuarioPerfil object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   UsuarioPerfilQuery A secondary query class using the current class as primary query
     */
    public function useUsuarioPerfilQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinUsuarioPerfil($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'UsuarioPerfil', 'UsuarioPerfilQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Usuario $usuario Object to remove from the list of results
     *
     * @return UsuarioQuery The current query, for fluid interface
     */
    public function prune($usuario = null)
    {
        if ($usuario) {
            $this->addUsingAlias(UsuarioPeer::ID, $usuario->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
