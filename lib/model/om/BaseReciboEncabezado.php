<?php


/**
 * Base class that represents a row from the 'recibo_encabezado' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 01/12/19 03:45:03
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseReciboEncabezado extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'ReciboEncabezadoPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        ReciboEncabezadoPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the planilla_resumen_id field.
     * @var        int
     */
    protected $planilla_resumen_id;

    /**
     * The value for the empleado field.
     * @var        string
     */
    protected $empleado;

    /**
     * The value for the empleado_proyecto_id field.
     * @var        int
     */
    protected $empleado_proyecto_id;

    /**
     * The value for the sueldo_base field.
     * @var        double
     */
    protected $sueldo_base;

    /**
     * The value for the bonificacion_base field.
     * @var        string
     */
    protected $bonificacion_base;

    /**
     * The value for the dias_ausencias field.
     * @var        double
     */
    protected $dias_ausencias;

    /**
     * The value for the dias_suspendido field.
     * @var        double
     */
    protected $dias_suspendido;

    /**
     * The value for the septimos field.
     * @var        double
     */
    protected $septimos;

    /**
     * The value for the total_descuentos field.
     * @var        double
     */
    protected $total_descuentos;

    /**
     * The value for the total_ingresos field.
     * @var        double
     */
    protected $total_ingresos;

    /**
     * The value for the total_extras field.
     * @var        double
     */
    protected $total_extras;

    /**
     * The value for the total_sueldo_liquido field.
     * @var        double
     */
    protected $total_sueldo_liquido;

    /**
     * The value for the alta field.
     * @var        string
     */
    protected $alta;

    /**
     * The value for the baja field.
     * @var        string
     */
    protected $baja;

    /**
     * The value for the codigo field.
     * @var        string
     */
    protected $codigo;

    /**
     * The value for the puesto field.
     * @var        string
     */
    protected $puesto;

    /**
     * The value for the departamento field.
     * @var        string
     */
    protected $departamento;

    /**
     * The value for the dias_base field.
     * @var        double
     */
    protected $dias_base;

    /**
     * The value for the bloque field.
     * @var        string
     */
    protected $bloque;

    /**
     * The value for the inicio field.
     * @var        string
     */
    protected $inicio;

    /**
     * The value for the fin field.
     * @var        string
     */
    protected $fin;

    /**
     * The value for the numero field.
     * @var        string
     */
    protected $numero;

    /**
     * The value for the laborados field.
     * @var        double
     */
    protected $laborados;

    /**
     * The value for the cabecera_in field.
     * @var        int
     */
    protected $cabecera_in;

    /**
     * The value for the enviado_correo field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $enviado_correo;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->enviado_correo = false;
    }

    /**
     * Initializes internal state of BaseReciboEncabezado object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [planilla_resumen_id] column value.
     *
     * @return int
     */
    public function getPlanillaResumenId()
    {
        return $this->planilla_resumen_id;
    }

    /**
     * Get the [empleado] column value.
     *
     * @return string
     */
    public function getEmpleado()
    {
        return $this->empleado;
    }

    /**
     * Get the [empleado_proyecto_id] column value.
     *
     * @return int
     */
    public function getEmpleadoProyectoId()
    {
        return $this->empleado_proyecto_id;
    }

    /**
     * Get the [sueldo_base] column value.
     *
     * @return double
     */
    public function getSueldoBase()
    {
        return $this->sueldo_base;
    }

    /**
     * Get the [bonificacion_base] column value.
     *
     * @return string
     */
    public function getBonificacionBase()
    {
        return $this->bonificacion_base;
    }

    /**
     * Get the [dias_ausencias] column value.
     *
     * @return double
     */
    public function getDiasAusencias()
    {
        return $this->dias_ausencias;
    }

    /**
     * Get the [dias_suspendido] column value.
     *
     * @return double
     */
    public function getDiasSuspendido()
    {
        return $this->dias_suspendido;
    }

    /**
     * Get the [septimos] column value.
     *
     * @return double
     */
    public function getSeptimos()
    {
        return $this->septimos;
    }

    /**
     * Get the [total_descuentos] column value.
     *
     * @return double
     */
    public function getTotalDescuentos()
    {
        return $this->total_descuentos;
    }

    /**
     * Get the [total_ingresos] column value.
     *
     * @return double
     */
    public function getTotalIngresos()
    {
        return $this->total_ingresos;
    }

    /**
     * Get the [total_extras] column value.
     *
     * @return double
     */
    public function getTotalExtras()
    {
        return $this->total_extras;
    }

    /**
     * Get the [total_sueldo_liquido] column value.
     *
     * @return double
     */
    public function getTotalSueldoLiquido()
    {
        return $this->total_sueldo_liquido;
    }

    /**
     * Get the [alta] column value.
     *
     * @return string
     */
    public function getAlta()
    {
        return $this->alta;
    }

    /**
     * Get the [baja] column value.
     *
     * @return string
     */
    public function getBaja()
    {
        return $this->baja;
    }

    /**
     * Get the [codigo] column value.
     *
     * @return string
     */
    public function getCodigo()
    {
        return $this->codigo;
    }

    /**
     * Get the [puesto] column value.
     *
     * @return string
     */
    public function getPuesto()
    {
        return $this->puesto;
    }

    /**
     * Get the [departamento] column value.
     *
     * @return string
     */
    public function getDepartamento()
    {
        return $this->departamento;
    }

    /**
     * Get the [dias_base] column value.
     *
     * @return double
     */
    public function getDiasBase()
    {
        return $this->dias_base;
    }

    /**
     * Get the [bloque] column value.
     *
     * @return string
     */
    public function getBloque()
    {
        return $this->bloque;
    }

    /**
     * Get the [inicio] column value.
     *
     * @return string
     */
    public function getInicio()
    {
        return $this->inicio;
    }

    /**
     * Get the [fin] column value.
     *
     * @return string
     */
    public function getFin()
    {
        return $this->fin;
    }

    /**
     * Get the [numero] column value.
     *
     * @return string
     */
    public function getNumero()
    {
        return $this->numero;
    }

    /**
     * Get the [laborados] column value.
     *
     * @return double
     */
    public function getLaborados()
    {
        return $this->laborados;
    }

    /**
     * Get the [cabecera_in] column value.
     *
     * @return int
     */
    public function getCabeceraIn()
    {
        return $this->cabecera_in;
    }

    /**
     * Get the [enviado_correo] column value.
     *
     * @return boolean
     */
    public function getEnviadoCorreo()
    {
        return $this->enviado_correo;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [planilla_resumen_id] column.
     *
     * @param int $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setPlanillaResumenId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->planilla_resumen_id !== $v) {
            $this->planilla_resumen_id = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID;
        }


        return $this;
    } // setPlanillaResumenId()

    /**
     * Set the value of [empleado] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setEmpleado($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->empleado !== $v) {
            $this->empleado = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::EMPLEADO;
        }


        return $this;
    } // setEmpleado()

    /**
     * Set the value of [empleado_proyecto_id] column.
     *
     * @param int $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setEmpleadoProyectoId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->empleado_proyecto_id !== $v) {
            $this->empleado_proyecto_id = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID;
        }


        return $this;
    } // setEmpleadoProyectoId()

    /**
     * Set the value of [sueldo_base] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setSueldoBase($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->sueldo_base !== $v) {
            $this->sueldo_base = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::SUELDO_BASE;
        }


        return $this;
    } // setSueldoBase()

    /**
     * Set the value of [bonificacion_base] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setBonificacionBase($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->bonificacion_base !== $v) {
            $this->bonificacion_base = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::BONIFICACION_BASE;
        }


        return $this;
    } // setBonificacionBase()

    /**
     * Set the value of [dias_ausencias] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setDiasAusencias($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->dias_ausencias !== $v) {
            $this->dias_ausencias = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::DIAS_AUSENCIAS;
        }


        return $this;
    } // setDiasAusencias()

    /**
     * Set the value of [dias_suspendido] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setDiasSuspendido($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->dias_suspendido !== $v) {
            $this->dias_suspendido = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::DIAS_SUSPENDIDO;
        }


        return $this;
    } // setDiasSuspendido()

    /**
     * Set the value of [septimos] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setSeptimos($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->septimos !== $v) {
            $this->septimos = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::SEPTIMOS;
        }


        return $this;
    } // setSeptimos()

    /**
     * Set the value of [total_descuentos] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setTotalDescuentos($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->total_descuentos !== $v) {
            $this->total_descuentos = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::TOTAL_DESCUENTOS;
        }


        return $this;
    } // setTotalDescuentos()

    /**
     * Set the value of [total_ingresos] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setTotalIngresos($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->total_ingresos !== $v) {
            $this->total_ingresos = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::TOTAL_INGRESOS;
        }


        return $this;
    } // setTotalIngresos()

    /**
     * Set the value of [total_extras] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setTotalExtras($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->total_extras !== $v) {
            $this->total_extras = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::TOTAL_EXTRAS;
        }


        return $this;
    } // setTotalExtras()

    /**
     * Set the value of [total_sueldo_liquido] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setTotalSueldoLiquido($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->total_sueldo_liquido !== $v) {
            $this->total_sueldo_liquido = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO;
        }


        return $this;
    } // setTotalSueldoLiquido()

    /**
     * Set the value of [alta] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setAlta($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->alta !== $v) {
            $this->alta = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::ALTA;
        }


        return $this;
    } // setAlta()

    /**
     * Set the value of [baja] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setBaja($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->baja !== $v) {
            $this->baja = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::BAJA;
        }


        return $this;
    } // setBaja()

    /**
     * Set the value of [codigo] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setCodigo($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->codigo !== $v) {
            $this->codigo = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::CODIGO;
        }


        return $this;
    } // setCodigo()

    /**
     * Set the value of [puesto] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setPuesto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->puesto !== $v) {
            $this->puesto = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::PUESTO;
        }


        return $this;
    } // setPuesto()

    /**
     * Set the value of [departamento] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setDepartamento($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->departamento !== $v) {
            $this->departamento = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::DEPARTAMENTO;
        }


        return $this;
    } // setDepartamento()

    /**
     * Set the value of [dias_base] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setDiasBase($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->dias_base !== $v) {
            $this->dias_base = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::DIAS_BASE;
        }


        return $this;
    } // setDiasBase()

    /**
     * Set the value of [bloque] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setBloque($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->bloque !== $v) {
            $this->bloque = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::BLOQUE;
        }


        return $this;
    } // setBloque()

    /**
     * Set the value of [inicio] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setInicio($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->inicio !== $v) {
            $this->inicio = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::INICIO;
        }


        return $this;
    } // setInicio()

    /**
     * Set the value of [fin] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setFin($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->fin !== $v) {
            $this->fin = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::FIN;
        }


        return $this;
    } // setFin()

    /**
     * Set the value of [numero] column.
     *
     * @param string $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setNumero($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->numero !== $v) {
            $this->numero = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::NUMERO;
        }


        return $this;
    } // setNumero()

    /**
     * Set the value of [laborados] column.
     *
     * @param double $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setLaborados($v)
    {
        if ($v !== null) {
            $v = (double) $v;
        }

        if ($this->laborados !== $v) {
            $this->laborados = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::LABORADOS;
        }


        return $this;
    } // setLaborados()

    /**
     * Set the value of [cabecera_in] column.
     *
     * @param int $v new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setCabeceraIn($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->cabecera_in !== $v) {
            $this->cabecera_in = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::CABECERA_IN;
        }


        return $this;
    } // setCabeceraIn()

    /**
     * Sets the value of the [enviado_correo] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return ReciboEncabezado The current object (for fluent API support)
     */
    public function setEnviadoCorreo($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->enviado_correo !== $v) {
            $this->enviado_correo = $v;
            $this->modifiedColumns[] = ReciboEncabezadoPeer::ENVIADO_CORREO;
        }


        return $this;
    } // setEnviadoCorreo()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->enviado_correo !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->planilla_resumen_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->empleado = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->empleado_proyecto_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
            $this->sueldo_base = ($row[$startcol + 4] !== null) ? (double) $row[$startcol + 4] : null;
            $this->bonificacion_base = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->dias_ausencias = ($row[$startcol + 6] !== null) ? (double) $row[$startcol + 6] : null;
            $this->dias_suspendido = ($row[$startcol + 7] !== null) ? (double) $row[$startcol + 7] : null;
            $this->septimos = ($row[$startcol + 8] !== null) ? (double) $row[$startcol + 8] : null;
            $this->total_descuentos = ($row[$startcol + 9] !== null) ? (double) $row[$startcol + 9] : null;
            $this->total_ingresos = ($row[$startcol + 10] !== null) ? (double) $row[$startcol + 10] : null;
            $this->total_extras = ($row[$startcol + 11] !== null) ? (double) $row[$startcol + 11] : null;
            $this->total_sueldo_liquido = ($row[$startcol + 12] !== null) ? (double) $row[$startcol + 12] : null;
            $this->alta = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->baja = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->codigo = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->puesto = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->departamento = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->dias_base = ($row[$startcol + 18] !== null) ? (double) $row[$startcol + 18] : null;
            $this->bloque = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
            $this->inicio = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
            $this->fin = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
            $this->numero = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
            $this->laborados = ($row[$startcol + 23] !== null) ? (double) $row[$startcol + 23] : null;
            $this->cabecera_in = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
            $this->enviado_correo = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 26; // 26 = ReciboEncabezadoPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating ReciboEncabezado object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = ReciboEncabezadoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = ReciboEncabezadoQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseReciboEncabezado:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseReciboEncabezado:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(ReciboEncabezadoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseReciboEncabezado:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseReciboEncabezado:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                ReciboEncabezadoPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = ReciboEncabezadoPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . ReciboEncabezadoPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(ReciboEncabezadoPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID)) {
            $modifiedColumns[':p' . $index++]  = '`PLANILLA_RESUMEN_ID`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::EMPLEADO)) {
            $modifiedColumns[':p' . $index++]  = '`EMPLEADO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID)) {
            $modifiedColumns[':p' . $index++]  = '`EMPLEADO_PROYECTO_ID`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::SUELDO_BASE)) {
            $modifiedColumns[':p' . $index++]  = '`SUELDO_BASE`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::BONIFICACION_BASE)) {
            $modifiedColumns[':p' . $index++]  = '`BONIFICACION_BASE`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::DIAS_AUSENCIAS)) {
            $modifiedColumns[':p' . $index++]  = '`DIAS_AUSENCIAS`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::DIAS_SUSPENDIDO)) {
            $modifiedColumns[':p' . $index++]  = '`DIAS_SUSPENDIDO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::SEPTIMOS)) {
            $modifiedColumns[':p' . $index++]  = '`SEPTIMOS`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_DESCUENTOS)) {
            $modifiedColumns[':p' . $index++]  = '`TOTAL_DESCUENTOS`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_INGRESOS)) {
            $modifiedColumns[':p' . $index++]  = '`TOTAL_INGRESOS`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_EXTRAS)) {
            $modifiedColumns[':p' . $index++]  = '`TOTAL_EXTRAS`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO)) {
            $modifiedColumns[':p' . $index++]  = '`TOTAL_SUELDO_LIQUIDO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::ALTA)) {
            $modifiedColumns[':p' . $index++]  = '`ALTA`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::BAJA)) {
            $modifiedColumns[':p' . $index++]  = '`BAJA`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::CODIGO)) {
            $modifiedColumns[':p' . $index++]  = '`CODIGO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::PUESTO)) {
            $modifiedColumns[':p' . $index++]  = '`PUESTO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::DEPARTAMENTO)) {
            $modifiedColumns[':p' . $index++]  = '`DEPARTAMENTO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::DIAS_BASE)) {
            $modifiedColumns[':p' . $index++]  = '`DIAS_BASE`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::BLOQUE)) {
            $modifiedColumns[':p' . $index++]  = '`BLOQUE`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::INICIO)) {
            $modifiedColumns[':p' . $index++]  = '`INICIO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::FIN)) {
            $modifiedColumns[':p' . $index++]  = '`FIN`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::NUMERO)) {
            $modifiedColumns[':p' . $index++]  = '`NUMERO`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::LABORADOS)) {
            $modifiedColumns[':p' . $index++]  = '`LABORADOS`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::CABECERA_IN)) {
            $modifiedColumns[':p' . $index++]  = '`CABECERA_IN`';
        }
        if ($this->isColumnModified(ReciboEncabezadoPeer::ENVIADO_CORREO)) {
            $modifiedColumns[':p' . $index++]  = '`ENVIADO_CORREO`';
        }

        $sql = sprintf(
            'INSERT INTO `recibo_encabezado` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`PLANILLA_RESUMEN_ID`':
                        $stmt->bindValue($identifier, $this->planilla_resumen_id, PDO::PARAM_INT);
                        break;
                    case '`EMPLEADO`':
                        $stmt->bindValue($identifier, $this->empleado, PDO::PARAM_STR);
                        break;
                    case '`EMPLEADO_PROYECTO_ID`':
                        $stmt->bindValue($identifier, $this->empleado_proyecto_id, PDO::PARAM_INT);
                        break;
                    case '`SUELDO_BASE`':
                        $stmt->bindValue($identifier, $this->sueldo_base, PDO::PARAM_STR);
                        break;
                    case '`BONIFICACION_BASE`':
                        $stmt->bindValue($identifier, $this->bonificacion_base, PDO::PARAM_STR);
                        break;
                    case '`DIAS_AUSENCIAS`':
                        $stmt->bindValue($identifier, $this->dias_ausencias, PDO::PARAM_STR);
                        break;
                    case '`DIAS_SUSPENDIDO`':
                        $stmt->bindValue($identifier, $this->dias_suspendido, PDO::PARAM_STR);
                        break;
                    case '`SEPTIMOS`':
                        $stmt->bindValue($identifier, $this->septimos, PDO::PARAM_STR);
                        break;
                    case '`TOTAL_DESCUENTOS`':
                        $stmt->bindValue($identifier, $this->total_descuentos, PDO::PARAM_STR);
                        break;
                    case '`TOTAL_INGRESOS`':
                        $stmt->bindValue($identifier, $this->total_ingresos, PDO::PARAM_STR);
                        break;
                    case '`TOTAL_EXTRAS`':
                        $stmt->bindValue($identifier, $this->total_extras, PDO::PARAM_STR);
                        break;
                    case '`TOTAL_SUELDO_LIQUIDO`':
                        $stmt->bindValue($identifier, $this->total_sueldo_liquido, PDO::PARAM_STR);
                        break;
                    case '`ALTA`':
                        $stmt->bindValue($identifier, $this->alta, PDO::PARAM_STR);
                        break;
                    case '`BAJA`':
                        $stmt->bindValue($identifier, $this->baja, PDO::PARAM_STR);
                        break;
                    case '`CODIGO`':
                        $stmt->bindValue($identifier, $this->codigo, PDO::PARAM_STR);
                        break;
                    case '`PUESTO`':
                        $stmt->bindValue($identifier, $this->puesto, PDO::PARAM_STR);
                        break;
                    case '`DEPARTAMENTO`':
                        $stmt->bindValue($identifier, $this->departamento, PDO::PARAM_STR);
                        break;
                    case '`DIAS_BASE`':
                        $stmt->bindValue($identifier, $this->dias_base, PDO::PARAM_STR);
                        break;
                    case '`BLOQUE`':
                        $stmt->bindValue($identifier, $this->bloque, PDO::PARAM_STR);
                        break;
                    case '`INICIO`':
                        $stmt->bindValue($identifier, $this->inicio, PDO::PARAM_STR);
                        break;
                    case '`FIN`':
                        $stmt->bindValue($identifier, $this->fin, PDO::PARAM_STR);
                        break;
                    case '`NUMERO`':
                        $stmt->bindValue($identifier, $this->numero, PDO::PARAM_STR);
                        break;
                    case '`LABORADOS`':
                        $stmt->bindValue($identifier, $this->laborados, PDO::PARAM_STR);
                        break;
                    case '`CABECERA_IN`':
                        $stmt->bindValue($identifier, $this->cabecera_in, PDO::PARAM_INT);
                        break;
                    case '`ENVIADO_CORREO`':
                        $stmt->bindValue($identifier, (int) $this->enviado_correo, PDO::PARAM_INT);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = ReciboEncabezadoPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = ReciboEncabezadoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getPlanillaResumenId();
                break;
            case 2:
                return $this->getEmpleado();
                break;
            case 3:
                return $this->getEmpleadoProyectoId();
                break;
            case 4:
                return $this->getSueldoBase();
                break;
            case 5:
                return $this->getBonificacionBase();
                break;
            case 6:
                return $this->getDiasAusencias();
                break;
            case 7:
                return $this->getDiasSuspendido();
                break;
            case 8:
                return $this->getSeptimos();
                break;
            case 9:
                return $this->getTotalDescuentos();
                break;
            case 10:
                return $this->getTotalIngresos();
                break;
            case 11:
                return $this->getTotalExtras();
                break;
            case 12:
                return $this->getTotalSueldoLiquido();
                break;
            case 13:
                return $this->getAlta();
                break;
            case 14:
                return $this->getBaja();
                break;
            case 15:
                return $this->getCodigo();
                break;
            case 16:
                return $this->getPuesto();
                break;
            case 17:
                return $this->getDepartamento();
                break;
            case 18:
                return $this->getDiasBase();
                break;
            case 19:
                return $this->getBloque();
                break;
            case 20:
                return $this->getInicio();
                break;
            case 21:
                return $this->getFin();
                break;
            case 22:
                return $this->getNumero();
                break;
            case 23:
                return $this->getLaborados();
                break;
            case 24:
                return $this->getCabeceraIn();
                break;
            case 25:
                return $this->getEnviadoCorreo();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array())
    {
        if (isset($alreadyDumpedObjects['ReciboEncabezado'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['ReciboEncabezado'][$this->getPrimaryKey()] = true;
        $keys = ReciboEncabezadoPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getPlanillaResumenId(),
            $keys[2] => $this->getEmpleado(),
            $keys[3] => $this->getEmpleadoProyectoId(),
            $keys[4] => $this->getSueldoBase(),
            $keys[5] => $this->getBonificacionBase(),
            $keys[6] => $this->getDiasAusencias(),
            $keys[7] => $this->getDiasSuspendido(),
            $keys[8] => $this->getSeptimos(),
            $keys[9] => $this->getTotalDescuentos(),
            $keys[10] => $this->getTotalIngresos(),
            $keys[11] => $this->getTotalExtras(),
            $keys[12] => $this->getTotalSueldoLiquido(),
            $keys[13] => $this->getAlta(),
            $keys[14] => $this->getBaja(),
            $keys[15] => $this->getCodigo(),
            $keys[16] => $this->getPuesto(),
            $keys[17] => $this->getDepartamento(),
            $keys[18] => $this->getDiasBase(),
            $keys[19] => $this->getBloque(),
            $keys[20] => $this->getInicio(),
            $keys[21] => $this->getFin(),
            $keys[22] => $this->getNumero(),
            $keys[23] => $this->getLaborados(),
            $keys[24] => $this->getCabeceraIn(),
            $keys[25] => $this->getEnviadoCorreo(),
        );

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = ReciboEncabezadoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setPlanillaResumenId($value);
                break;
            case 2:
                $this->setEmpleado($value);
                break;
            case 3:
                $this->setEmpleadoProyectoId($value);
                break;
            case 4:
                $this->setSueldoBase($value);
                break;
            case 5:
                $this->setBonificacionBase($value);
                break;
            case 6:
                $this->setDiasAusencias($value);
                break;
            case 7:
                $this->setDiasSuspendido($value);
                break;
            case 8:
                $this->setSeptimos($value);
                break;
            case 9:
                $this->setTotalDescuentos($value);
                break;
            case 10:
                $this->setTotalIngresos($value);
                break;
            case 11:
                $this->setTotalExtras($value);
                break;
            case 12:
                $this->setTotalSueldoLiquido($value);
                break;
            case 13:
                $this->setAlta($value);
                break;
            case 14:
                $this->setBaja($value);
                break;
            case 15:
                $this->setCodigo($value);
                break;
            case 16:
                $this->setPuesto($value);
                break;
            case 17:
                $this->setDepartamento($value);
                break;
            case 18:
                $this->setDiasBase($value);
                break;
            case 19:
                $this->setBloque($value);
                break;
            case 20:
                $this->setInicio($value);
                break;
            case 21:
                $this->setFin($value);
                break;
            case 22:
                $this->setNumero($value);
                break;
            case 23:
                $this->setLaborados($value);
                break;
            case 24:
                $this->setCabeceraIn($value);
                break;
            case 25:
                $this->setEnviadoCorreo($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = ReciboEncabezadoPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setPlanillaResumenId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setEmpleado($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setEmpleadoProyectoId($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setSueldoBase($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setBonificacionBase($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setDiasAusencias($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setDiasSuspendido($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setSeptimos($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setTotalDescuentos($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setTotalIngresos($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setTotalExtras($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setTotalSueldoLiquido($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setAlta($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setBaja($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setCodigo($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setPuesto($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setDepartamento($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setDiasBase($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setBloque($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setInicio($arr[$keys[20]]);
        if (array_key_exists($keys[21], $arr)) $this->setFin($arr[$keys[21]]);
        if (array_key_exists($keys[22], $arr)) $this->setNumero($arr[$keys[22]]);
        if (array_key_exists($keys[23], $arr)) $this->setLaborados($arr[$keys[23]]);
        if (array_key_exists($keys[24], $arr)) $this->setCabeceraIn($arr[$keys[24]]);
        if (array_key_exists($keys[25], $arr)) $this->setEnviadoCorreo($arr[$keys[25]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(ReciboEncabezadoPeer::DATABASE_NAME);

        if ($this->isColumnModified(ReciboEncabezadoPeer::ID)) $criteria->add(ReciboEncabezadoPeer::ID, $this->id);
        if ($this->isColumnModified(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID)) $criteria->add(ReciboEncabezadoPeer::PLANILLA_RESUMEN_ID, $this->planilla_resumen_id);
        if ($this->isColumnModified(ReciboEncabezadoPeer::EMPLEADO)) $criteria->add(ReciboEncabezadoPeer::EMPLEADO, $this->empleado);
        if ($this->isColumnModified(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID)) $criteria->add(ReciboEncabezadoPeer::EMPLEADO_PROYECTO_ID, $this->empleado_proyecto_id);
        if ($this->isColumnModified(ReciboEncabezadoPeer::SUELDO_BASE)) $criteria->add(ReciboEncabezadoPeer::SUELDO_BASE, $this->sueldo_base);
        if ($this->isColumnModified(ReciboEncabezadoPeer::BONIFICACION_BASE)) $criteria->add(ReciboEncabezadoPeer::BONIFICACION_BASE, $this->bonificacion_base);
        if ($this->isColumnModified(ReciboEncabezadoPeer::DIAS_AUSENCIAS)) $criteria->add(ReciboEncabezadoPeer::DIAS_AUSENCIAS, $this->dias_ausencias);
        if ($this->isColumnModified(ReciboEncabezadoPeer::DIAS_SUSPENDIDO)) $criteria->add(ReciboEncabezadoPeer::DIAS_SUSPENDIDO, $this->dias_suspendido);
        if ($this->isColumnModified(ReciboEncabezadoPeer::SEPTIMOS)) $criteria->add(ReciboEncabezadoPeer::SEPTIMOS, $this->septimos);
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_DESCUENTOS)) $criteria->add(ReciboEncabezadoPeer::TOTAL_DESCUENTOS, $this->total_descuentos);
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_INGRESOS)) $criteria->add(ReciboEncabezadoPeer::TOTAL_INGRESOS, $this->total_ingresos);
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_EXTRAS)) $criteria->add(ReciboEncabezadoPeer::TOTAL_EXTRAS, $this->total_extras);
        if ($this->isColumnModified(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO)) $criteria->add(ReciboEncabezadoPeer::TOTAL_SUELDO_LIQUIDO, $this->total_sueldo_liquido);
        if ($this->isColumnModified(ReciboEncabezadoPeer::ALTA)) $criteria->add(ReciboEncabezadoPeer::ALTA, $this->alta);
        if ($this->isColumnModified(ReciboEncabezadoPeer::BAJA)) $criteria->add(ReciboEncabezadoPeer::BAJA, $this->baja);
        if ($this->isColumnModified(ReciboEncabezadoPeer::CODIGO)) $criteria->add(ReciboEncabezadoPeer::CODIGO, $this->codigo);
        if ($this->isColumnModified(ReciboEncabezadoPeer::PUESTO)) $criteria->add(ReciboEncabezadoPeer::PUESTO, $this->puesto);
        if ($this->isColumnModified(ReciboEncabezadoPeer::DEPARTAMENTO)) $criteria->add(ReciboEncabezadoPeer::DEPARTAMENTO, $this->departamento);
        if ($this->isColumnModified(ReciboEncabezadoPeer::DIAS_BASE)) $criteria->add(ReciboEncabezadoPeer::DIAS_BASE, $this->dias_base);
        if ($this->isColumnModified(ReciboEncabezadoPeer::BLOQUE)) $criteria->add(ReciboEncabezadoPeer::BLOQUE, $this->bloque);
        if ($this->isColumnModified(ReciboEncabezadoPeer::INICIO)) $criteria->add(ReciboEncabezadoPeer::INICIO, $this->inicio);
        if ($this->isColumnModified(ReciboEncabezadoPeer::FIN)) $criteria->add(ReciboEncabezadoPeer::FIN, $this->fin);
        if ($this->isColumnModified(ReciboEncabezadoPeer::NUMERO)) $criteria->add(ReciboEncabezadoPeer::NUMERO, $this->numero);
        if ($this->isColumnModified(ReciboEncabezadoPeer::LABORADOS)) $criteria->add(ReciboEncabezadoPeer::LABORADOS, $this->laborados);
        if ($this->isColumnModified(ReciboEncabezadoPeer::CABECERA_IN)) $criteria->add(ReciboEncabezadoPeer::CABECERA_IN, $this->cabecera_in);
        if ($this->isColumnModified(ReciboEncabezadoPeer::ENVIADO_CORREO)) $criteria->add(ReciboEncabezadoPeer::ENVIADO_CORREO, $this->enviado_correo);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(ReciboEncabezadoPeer::DATABASE_NAME);
        $criteria->add(ReciboEncabezadoPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of ReciboEncabezado (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setPlanillaResumenId($this->getPlanillaResumenId());
        $copyObj->setEmpleado($this->getEmpleado());
        $copyObj->setEmpleadoProyectoId($this->getEmpleadoProyectoId());
        $copyObj->setSueldoBase($this->getSueldoBase());
        $copyObj->setBonificacionBase($this->getBonificacionBase());
        $copyObj->setDiasAusencias($this->getDiasAusencias());
        $copyObj->setDiasSuspendido($this->getDiasSuspendido());
        $copyObj->setSeptimos($this->getSeptimos());
        $copyObj->setTotalDescuentos($this->getTotalDescuentos());
        $copyObj->setTotalIngresos($this->getTotalIngresos());
        $copyObj->setTotalExtras($this->getTotalExtras());
        $copyObj->setTotalSueldoLiquido($this->getTotalSueldoLiquido());
        $copyObj->setAlta($this->getAlta());
        $copyObj->setBaja($this->getBaja());
        $copyObj->setCodigo($this->getCodigo());
        $copyObj->setPuesto($this->getPuesto());
        $copyObj->setDepartamento($this->getDepartamento());
        $copyObj->setDiasBase($this->getDiasBase());
        $copyObj->setBloque($this->getBloque());
        $copyObj->setInicio($this->getInicio());
        $copyObj->setFin($this->getFin());
        $copyObj->setNumero($this->getNumero());
        $copyObj->setLaborados($this->getLaborados());
        $copyObj->setCabeceraIn($this->getCabeceraIn());
        $copyObj->setEnviadoCorreo($this->getEnviadoCorreo());
        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return ReciboEncabezado Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return ReciboEncabezadoPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new ReciboEncabezadoPeer();
        }

        return self::$peer;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->planilla_resumen_id = null;
        $this->empleado = null;
        $this->empleado_proyecto_id = null;
        $this->sueldo_base = null;
        $this->bonificacion_base = null;
        $this->dias_ausencias = null;
        $this->dias_suspendido = null;
        $this->septimos = null;
        $this->total_descuentos = null;
        $this->total_ingresos = null;
        $this->total_extras = null;
        $this->total_sueldo_liquido = null;
        $this->alta = null;
        $this->baja = null;
        $this->codigo = null;
        $this->puesto = null;
        $this->departamento = null;
        $this->dias_base = null;
        $this->bloque = null;
        $this->inicio = null;
        $this->fin = null;
        $this->numero = null;
        $this->laborados = null;
        $this->cabecera_in = null;
        $this->enviado_correo = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(ReciboEncabezadoPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseReciboEncabezado:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
